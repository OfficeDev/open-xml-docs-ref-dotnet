<Type Name="Revisions" FullName="DocumentFormat.OpenXml.Spreadsheet.Revisions">
  <TypeSignature Language="C#" Value="public class Revisions : DocumentFormat.OpenXml.OpenXmlPartRootElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Revisions extends DocumentFormat.OpenXml.OpenXmlPartRootElement" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Spreadsheet.Revisions" />
  <TypeSignature Language="VB.NET" Value="Public Class Revisions&#xA;Inherits OpenXmlPartRootElement" />
  <TypeSignature Language="F#" Value="type Revisions = class&#xA;    inherit OpenXmlPartRootElement" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.OpenXmlPartRootElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.RevisionRowColumn))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.RevisionMove))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.RevisionCustomView))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.RevisionSheetName))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.RevisionInsertSheet))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.RevisionCellChange))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.RevisionFormat))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.RevisionAutoFormat))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.RevisionDefinedName))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.RevisionComment))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.RevisionQueryTable))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.RevisionConflict))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Revisions. The root element of WorkbookRevisionLogPart. When the object is serialized out as xml, its qualified name is x:revisions.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 **revisions (Revisions)**  
  
 This element represents the root node of a list of revisions made in this shared workbook.  This root node shows up at the beginning of every log file that contains specific revisions made to the workbook.  
  
 When multiple users are sharing, and editing, a workbook at the same time, there can be conflicting changes. The spreadsheet application should have logic to resolve such conflicts, and the file format should only contain enough information so that the spreadsheet application can restore the workbook to the correct state after conflict resolution.  Revisions can also be tracked by the spreadsheet application for review by the user at a later time (as opposed to only dealing with conflicts on a save event.)  Some edits to workbooks are made as a result of this conflict resolution.  So, there are cases where a revision is effectively undone by another user, and as a result that undoing is itself a revision that adds or changes data in the file.  These operations are tracked by the *ua* and *ra* attributes of many different elements.  
  
 *[Example:*  
  
 Step 1:  
  
 User 1 inserts Column A.  So the XML in the revision log would look like this:  
  
```xml  
<revisions xmlns="…" xmlns:r="…">  
  <rrc rId="1" sId="1" ref="A1:A1048576" action="insertCol"/>  
</revisions>  
```  
  
 Step 2:  
  
 User 2 synchronizes the file to pick up that change, but then activates the Track Changes feature, and rejects that change.  This effectively performs an undo on User 1's insertion.  This is denoted in the file with the *ua* attribute meaning that this change happened as the result of an undo.  The XML for the revision log would look like this:  
  
```xml  
<revisions xmlns="…" xmlns:r="…">  
  <rrc rId="2" ua="1" sId="1" ref="A1:A1048576" action="deleteCol"/>  
  <rcft rId="1" ua="1" sheetId="1"/>  
</revisions>  
```  
  
 Step 3:  
  
 User 1 enters "foo" in A1, and saves the file.  A conflict resolution dialog is shown since User 2's version of the file removed the inserted Column A.  User 1 chooses to accept their own changes.  This undoes the change that User 2 made.  So, in effect, it performed an undo on a previous undo operation.  This is denoted in the file format by the *ra* attribute meaning that a the change occurred because a previous undo was undone.  So the resulting XML for the newest log file looks like this:  
  
```xml  
<revisions xmlns="…" xmlns:r="…">  
  <rrc rId="3" ua="1" ra="1" sId="1" ref="A1:A1048576" action="insertCol"/>  
  <rcft rId="2" ua="1" sheetId="1"/>  
  <rcc rId="4" sId="1">  
    <nc r="A1" t="inlineStr">  
      <is>  
        <t>foo</t>  
      </is>  
    </nc>  
  </rcc>  
  <rcft rId="2" sheetId="1"/>  
</revisions>  
```  
  
 *end example*]  
  
|Parent Elements|  
|---------------------|  
|Root element of SpreadsheetML Shared Workbook Revision Log part|  
  
|Child Elements|Subclause|  
|--------------------|---------------|  
|raf (Revision AutoFormat)|§18.11.1.8|  
|rcc (Revision Cell Change)|§18.11.1.9|  
|rcft (Revision Merge Conflict)|§18.11.1.10|  
|rcmt (Revision Cell Comment)|§18.11.1.11|  
|rcv (Revision Custom View)|§18.11.1.12|  
|rdn (Revision Defined Name)|§18.11.1.13|  
|rfmt (Revision Format)|§18.11.1.17|  
|ris (Revision Insert Sheet)|§18.11.1.18|  
|rm (Revision Cell Move)|§18.11.1.19|  
|rqt (Revision Query Table)|§18.11.1.20|  
|rrc (Revision Row Column Insert Delete)|§18.11.1.21|  
|rsnm (Revision Sheet Name)|§18.11.1.22|  
  
 [*Note*: The W3C XML Schema definition of this element’s content model (CT_Revisions) is located in §A.2. *end note*]  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlcopyrightiso.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Revisions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Revisions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the Revisions class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Revisions (params DocumentFormat.OpenXml.OpenXmlElement[] childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class DocumentFormat.OpenXml.OpenXmlElement[] childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Revisions.#ctor(DocumentFormat.OpenXml.OpenXmlElement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray childElements As OpenXmlElement())" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Spreadsheet.Revisions : DocumentFormat.OpenXml.OpenXmlElement[] -&gt; DocumentFormat.OpenXml.Spreadsheet.Revisions" Usage="new DocumentFormat.OpenXml.Spreadsheet.Revisions childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="DocumentFormat.OpenXml.OpenXmlElement[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the Revisions class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Revisions (System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt; childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Revisions.#ctor(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (childElements As IEnumerable(Of OpenXmlElement))" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Spreadsheet.Revisions : seq&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; -&gt; DocumentFormat.OpenXml.Spreadsheet.Revisions" Usage="new DocumentFormat.OpenXml.Spreadsheet.Revisions childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" />
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the Revisions class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Revisions (string outerXml);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string outerXml) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Revisions.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (outerXml As String)" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Spreadsheet.Revisions : string -&gt; DocumentFormat.OpenXml.Spreadsheet.Revisions" Usage="new DocumentFormat.OpenXml.Spreadsheet.Revisions outerXml" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="outerXml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outerXml">Specifies the outer XML of the element.</param>
        <summary>Initializes a new instance of the Revisions class from outer XML.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Revisions.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="revisions.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (DocumentFormat.OpenXml.Packaging.WorkbookRevisionLogPart openXmlPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class DocumentFormat.OpenXml.Packaging.WorkbookRevisionLogPart openXmlPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Revisions.Load(DocumentFormat.OpenXml.Packaging.WorkbookRevisionLogPart)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (openXmlPart As WorkbookRevisionLogPart)" />
      <MemberSignature Language="F#" Value="override this.Load : DocumentFormat.OpenXml.Packaging.WorkbookRevisionLogPart -&gt; unit" Usage="revisions.Load openXmlPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openXmlPart" Type="DocumentFormat.OpenXml.Packaging.WorkbookRevisionLogPart" />
      </Parameters>
      <Docs>
        <param name="openXmlPart">Specifies the part to be loaded.</param>
        <summary>Loads the DOM from the WorkbookRevisionLogPart.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Revisions.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.Spreadsheet.Revisions.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (DocumentFormat.OpenXml.Packaging.WorkbookRevisionLogPart openXmlPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class DocumentFormat.OpenXml.Packaging.WorkbookRevisionLogPart openXmlPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Revisions.Save(DocumentFormat.OpenXml.Packaging.WorkbookRevisionLogPart)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (openXmlPart As WorkbookRevisionLogPart)" />
      <MemberSignature Language="F#" Value="override this.Save : DocumentFormat.OpenXml.Packaging.WorkbookRevisionLogPart -&gt; unit" Usage="revisions.Save openXmlPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openXmlPart" Type="DocumentFormat.OpenXml.Packaging.WorkbookRevisionLogPart" />
      </Parameters>
      <Docs>
        <param name="openXmlPart">Specifies the part to save to.</param>
        <summary>Saves the DOM into the WorkbookRevisionLogPart.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkbookRevisionLogPart">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Packaging.WorkbookRevisionLogPart WorkbookRevisionLogPart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.Packaging.WorkbookRevisionLogPart WorkbookRevisionLogPart" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Revisions.WorkbookRevisionLogPart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorkbookRevisionLogPart As WorkbookRevisionLogPart" />
      <MemberSignature Language="F#" Value="member this.WorkbookRevisionLogPart : DocumentFormat.OpenXml.Packaging.WorkbookRevisionLogPart" Usage="DocumentFormat.OpenXml.Spreadsheet.Revisions.WorkbookRevisionLogPart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Packaging.WorkbookRevisionLogPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the WorkbookRevisionLogPart associated with this element.</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.Packaging.WorkbookRevisionLogPart" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>