<Type Name="Cell" FullName="DocumentFormat.OpenXml.Spreadsheet.Cell">
  <TypeSignature Language="C#" Value="public class Cell : DocumentFormat.OpenXml.Spreadsheet.CellType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Cell extends DocumentFormat.OpenXml.Spreadsheet.CellType" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Spreadsheet.Cell" />
  <TypeSignature Language="VB.NET" Value="Public Class Cell&#xA;Inherits CellType" />
  <TypeSignature Language="F#" Value="type Cell = class&#xA;    inherit CellType" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.Spreadsheet.CellType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Cell. When the object is serialized out as xml, its qualified name is x:c.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 **c (Cell)**  
  
 This collection represents a cell in the worksheet. Information about the cell's location (reference), value, data type, formatting, and formula is expressed here.  
  
 [*Example*:This example shows the information stored for a cell whose address in the grid is C6, whose style index is '6', and whose value metadata index is '15'. The cell contains a formula as well as a calculated result of that formula.  
  
```xml  
<c r="C6" s="1" vm="15">  
  <f>CUBEVALUE("xlextdat9 Adventure Works",C$5,$A6)</f>  
  <v>2838512.355</v>  
</c>  
```  
  
 *end example*]  
  
 While a cell can have a formula element f and a value element v, when the cell's type t is *inlineStr* then only the element is is allowed as a child element.  
  
 [*Example*:  
  
 Here is an example of expressing a string in the cell rather than using the shared string table.  
  
```xml  
<row r="1" spans="1:1">  
  <c r="A1" t="inlineStr">  
    <is><t>This is inline string example</t></is>  
  </c>  
</row>  
```  
  
 *end example*]  
  
|Parent Elements|  
|---------------------|  
|row (§18.3.1.73)|  
  
|Child Elements|Subclause|  
|--------------------|---------------|  
|extLst (Future Feature Data Storage Area)|§18.2.10|  
|f (Formula)|§18.3.1.40|  
|is (Rich Text Inline)|§18.3.1.53|  
|v (Cell Value)|§18.3.1.96|  
  
|Attributes|Description|  
|----------------|-----------------|  
|cm (Cell Metadata Index)|The zero-based index of the cell metadata record associated with this cell. Metadata information is found in the Metadata Part. Cell metadata is extra information stored at the cell level, and is attached to the cell (travels through moves, copy / paste, clear, etc). Cell metadata is not accessible via formula reference.<br /><br /> The possible values for this attribute are defined by the W3C XML Schema *unsignedInt* datatype.|  
|ph (Show Phonetic)|A Boolean value indicating if the spreadsheet application should show phonetic information.  Phonetic information is displayed in the same cell across the top of the cell and serves as a 'hint' which indicates how the text should be pronounced.  This should only be used for East Asian languages.<br /><br /> The possible values for this attribute are defined by the W3C XML Schema *boolean* datatype.|  
|r (Reference)|An A1 style reference to the location of this cell<br /><br /> The possible values for this attribute are defined by the *ST_CellRef* simple type (§18.18.7).|  
|s (Style Index)|The index of this cell's style. Style records are stored in the Styles Part.<br /><br /> The possible values for this attribute are defined by the W3C XML Schema *unsignedInt* datatype.|  
|t (Cell Data Type)|An enumeration representing the cell's data type.<br /><br /> The possible values for this attribute are defined by the *ST_CellType* simple type (§18.18.11).|  
|vm (Value Metadata Index)|The zero-based index of the value metadata record associated with this cell's value. Metadata records are stored in the Metadata Part. Value metadata is extra information stored at the cell level, but associated with the value rather than the cell itself. Value metadata is accessible via formula reference.<br /><br /> The possible values for this attribute are defined by the W3C XML Schema *unsignedInt* datatype.|  
  
 [*Note*: The W3C XML Schema definition of this element’s content model (CT_Cell) is located in §A.2. *end note*]  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlcopyrightiso.md)]  
  
   
  
## Examples  
 The following code example creates a new workbook, inserts a worksheet into it, and writes the word “Microsoft” in a specified cell address.  
  
```csharp  
using System;  
using DocumentFormat.OpenXml;  
using DocumentFormat.OpenXml.Packaging;  
using DocumentFormat.OpenXml.Spreadsheet;  
  
namespace CellEx  
{  
    class Program  
    {  
        static void Main(string[] args)  
        {  
            // Create a spreadsheet document by providing a file name.  
            string fileName = @"C:\Users\Public\Documents\myCellEx.xlsx";  
  
            SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.  
                Create(fileName, SpreadsheetDocumentType.Workbook);  
  
            // Add a WorkbookPart to the document.  
            WorkbookPart workbookpart = spreadsheetDocument.AddWorkbookPart();  
            workbookpart.Workbook = new Workbook();  
  
            // Add a WorksheetPart to the WorkbookPart.  
            WorksheetPart worksheetPart = workbookpart.AddNewPart<WorksheetPart>();  
            worksheetPart.Worksheet = new Worksheet(new SheetData());  
  
            // Add Sheets to the Workbook.  
            Sheets sheets = spreadsheetDocument.WorkbookPart.Workbook.AppendChild<Sheets>(new Sheets());  
  
            // Append a new worksheet and associate it with the workbook.  
            Sheet sheet = new Sheet()  
            {   Id = spreadsheetDocument.WorkbookPart.GetIdOfPart(worksheetPart),  
                SheetId = 1, Name = "mySheet"  
            };  
            sheets.Append(sheet);  
            Worksheet worksheet = new Worksheet();  
            SheetData sheetData = new SheetData();  
            Row row = new Row();  
            Cell cell = new Cell()   
                { CellReference = "A1", DataType = CellValues.String,  
                    CellValue = new CellValue("Microsoft") };  
            row.Append(cell);  
            sheetData.Append(row);  
            worksheet.Append(sheetData);  
            worksheetPart.Worksheet = worksheet;  
  
            // Close the document.  
            spreadsheetDocument.Close();  
            Console.WriteLine("All done. Press any key.");  
            Console.ReadKey();  
        }  
    }       
}  
  
```  
  
```vb  
Imports DocumentFormat.OpenXml  
Imports DocumentFormat.OpenXml.Packaging  
Imports DocumentFormat.OpenXml.Spreadsheet  
Module Module1  
    Sub Main()  
        ' Create a spreadsheet document by providing a file name.  
        Dim fileName As String = "C:\Users\Public\Documents\myCellEx.xlsx"  
  
        Dim spreadsheetDocument As SpreadsheetDocument = _  
            spreadsheetDocument.Create(fileName, SpreadsheetDocumentType.Workbook)  
  
        ' Add a WorkbookPart to the document.  
        Dim workbookpart As WorkbookPart = spreadsheetDocument.AddWorkbookPart()  
        workbookpart.Workbook = New Workbook()  
  
        ' Add a WorksheetPart to the WorkbookPart.  
        Dim worksheetPart As WorksheetPart = workbookpart.AddNewPart(Of WorksheetPart)()  
        worksheetPart.Worksheet = New Worksheet(New SheetData())  
  
        ' Add Sheets to the Workbook.  
        Dim sheets As Sheets = spreadsheetDocument.WorkbookPart.Workbook _  
        .AppendChild(Of Sheets)(New Sheets())  
  
        ' Append a new worksheet and associate it with the workbook.  
        Dim sheet As New Sheet() With { _  
         .Id = spreadsheetDocument.WorkbookPart.GetIdOfPart(worksheetPart), _  
         .SheetId = 1, .Name = "mySheet"}  
        sheets.Append(Sheet)  
        Dim worksheet As New Worksheet()  
        Dim sheetData As New SheetData()  
        Dim row As New Row()  
        Dim cell As New Cell() With {.CellReference = "A1", .DataType = CellValues.[String], _  
         .CellValue = New CellValue("Microsoft")}  
        row.Append(Cell)  
        sheetData.Append(row)  
        worksheet.Append(sheetData)  
        worksheetPart.Worksheet = worksheet  
  
        ' Close the document.  
        spreadsheetDocument.Close()  
        Console.WriteLine("All done. Press any key.")  
        Console.ReadKey()  
    End Sub  
End Module  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Cell ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Cell.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the Cell class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Cell (params DocumentFormat.OpenXml.OpenXmlElement[] childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class DocumentFormat.OpenXml.OpenXmlElement[] childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Cell.#ctor(DocumentFormat.OpenXml.OpenXmlElement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray childElements As OpenXmlElement())" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Spreadsheet.Cell : DocumentFormat.OpenXml.OpenXmlElement[] -&gt; DocumentFormat.OpenXml.Spreadsheet.Cell" Usage="new DocumentFormat.OpenXml.Spreadsheet.Cell childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="DocumentFormat.OpenXml.OpenXmlElement[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the Cell class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Cell (System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt; childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Cell.#ctor(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (childElements As IEnumerable(Of OpenXmlElement))" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Spreadsheet.Cell : seq&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; -&gt; DocumentFormat.OpenXml.Spreadsheet.Cell" Usage="new DocumentFormat.OpenXml.Spreadsheet.Cell childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" />
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the Cell class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Cell (string outerXml);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string outerXml) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Cell.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (outerXml As String)" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Spreadsheet.Cell : string -&gt; DocumentFormat.OpenXml.Spreadsheet.Cell" Usage="new DocumentFormat.OpenXml.Spreadsheet.Cell outerXml" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="outerXml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outerXml">Specifies the outer XML of the element.</param>
        <summary>Initializes a new instance of the Cell class from outer XML.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Cell.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="cell.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Cell.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.Spreadsheet.Cell.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>