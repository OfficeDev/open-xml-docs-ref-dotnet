<Type Name="Worksheet" FullName="DocumentFormat.OpenXml.Spreadsheet.Worksheet">
  <TypeSignature Language="C#" Value="public class Worksheet : DocumentFormat.OpenXml.OpenXmlPartRootElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Worksheet extends DocumentFormat.OpenXml.OpenXmlPartRootElement" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Spreadsheet.Worksheet" />
  <TypeSignature Language="VB.NET" Value="Public Class Worksheet&#xA;Inherits OpenXmlPartRootElement" />
  <TypeSignature Language="F#" Value="type Worksheet = class&#xA;    inherit OpenXmlPartRootElement" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.OpenXmlPartRootElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.SheetProperties))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.SheetDimension))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.SheetViews))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.SheetFormatProperties))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.Columns))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.SheetData))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.SheetCalculationProperties))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.SheetProtection))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.ProtectedRanges))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.Scenarios))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.AutoFilter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.SortState))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.DataConsolidate))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.CustomSheetViews))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.MergeCells))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.PhoneticProperties))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.ConditionalFormatting))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.DataValidations))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.Hyperlinks))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.PrintOptions))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.PageMargins))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.PageSetup))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.HeaderFooter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.RowBreaks))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.ColumnBreaks))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.CustomProperties))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.CellWatches))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.IgnoredErrors))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.Drawing))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.LegacyDrawing))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.LegacyDrawingHeaderFooter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.DrawingHeaderFooter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.Picture))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.OleObjects))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.Controls))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.WebPublishItems))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.TableParts))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.WorksheetExtensionList))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Worksheet. The root element of WorksheetPart. When the object is serialized out as xml, its qualified name is x:worksheet.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 **worksheet (Worksheet)**  
  
 This is the root element of Worksheet parts within a SpreadsheetML document.  
  
|Parent Elements|  
|---------------------|  
|Root element of SpreadsheetML Worksheet part|  
  
|Child Elements|Subclause|  
|--------------------|---------------|  
|autoFilter (AutoFilter Settings)|§18.3.1.2|  
|cellWatches (Cell Watch Items)|§18.3.1.9|  
|colBreaks (Vertical Page Breaks)|§18.3.1.14|  
|cols (Column Information)|§18.3.1.17|  
|conditionalFormatting (Conditional Formatting)|§18.3.1.18|  
|controls (Embedded Controls)|§18.3.1.21|  
|customProperties (Custom Properties)|§18.3.1.23|  
|customSheetViews (Custom Sheet Views)|§18.3.1.27|  
|dataConsolidate (Data Consolidate)|§18.3.1.29|  
|dataValidations (Data Validations)|§18.3.1.33|  
|dimension (Worksheet Dimensions)|§18.3.1.35|  
|drawing (Drawing)|§18.3.1.36|  
|drawingHF (Drawing Reference in Header Footer)|§18.3.1.37|  
|extLst (Future Feature Data Storage Area)|§18.2.10|  
|headerFooter (Header Footer Settings)|§18.3.1.46|  
|hyperlinks (Hyperlinks)|§18.3.1.48|  
|ignoredErrors (Ignored Errors)|§18.3.1.51|  
|mergeCells (Merge Cells)|§18.3.1.55|  
|oleObjects (Embedded Objects)|§18.3.1.60|  
|pageMargins (Page Margins)|§18.3.1.62|  
|pageSetup (Page Setup Settings)|§18.3.1.63|  
|phoneticPr (Phonetic Properties)|§18.4.3|  
|picture (Background Image)|§18.3.1.67|  
|printOptions (Print Options)|§18.3.1.70|  
|protectedRanges (Protected Ranges)|§18.3.1.72|  
|rowBreaks (Horizontal Page Breaks (Row))|§18.3.1.74|  
|scenarios (Scenarios)|§18.3.1.76|  
|sheetCalcPr (Sheet Calculation Properties)|§18.3.1.79|  
|sheetData (Sheet Data)|§18.3.1.80|  
|sheetFormatPr (Sheet Format Properties)|§18.3.1.81|  
|sheetPr (Sheet Properties)|§18.3.1.82|  
|sheetProtection (Sheet Protection Options)|§18.3.1.85|  
|sheetViews (Sheet Views)|§18.3.1.88|  
|smartTags (Smart Tags)|§18.3.1.90|  
|sortState (Sort State)|§18.3.1.92|  
|tableParts (Table Parts)|§18.3.1.95|  
|webPublishItems (Web Publishing Items)|§18.3.1.98|  
  
 [*Note*: The W3C XML Schema definition of this element’s content model (CT_Worksheet) is located in §A.2. *end note*]  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlcopyrightiso.md)]  
  
   
  
## Examples  
 The following code example inserts a new worksheet into a spreadsheet document by providing its file name. After you run the code example, examine the test file “WorksheetEx.xlsx” and notice the new worksheet named “mySheet.”  
  
```csharp  
using System;  
using System.Linq;  
using DocumentFormat.OpenXml.Packaging;  
using DocumentFormat.OpenXml.Spreadsheet;  
  
namespace WorkSheetEx  
{  
    class Program  
    {  
        static void Main(string[] args)  
        {  
            string fileName = @"C:\Users\Public\Documents\WorksheetEx.xlsx";  
  
            using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(fileName, true))  
            {  
                // Add a WorksheetPart.  
                WorksheetPart newWorksheetPart = spreadSheet.WorkbookPart.AddNewPart<WorksheetPart>();  
                newWorksheetPart.Worksheet = new Worksheet(new SheetData());  
  
                // Create Sheets object.  
                Sheets sheets = spreadSheet.WorkbookPart.Workbook.GetFirstChild<Sheets>();  
                string relationshipId = spreadSheet.WorkbookPart.GetIdOfPart(newWorksheetPart);  
  
                // Create a unique ID for the new worksheet.  
                uint sheetId = 1;  
                if (sheets.Elements<Sheet>().Count() > 0)  
                {  
                    sheetId = sheets.Elements<Sheet>().Select(s => s.SheetId.Value).Max() + 1;  
                }  
  
                // Give the new worksheet a name.  
                string sheetName = "mySheet" + sheetId;  
  
                // Append the new worksheet and associate it with the workbook.  
                Sheet sheet = new Sheet() { Id = relationshipId, SheetId = sheetId, Name = sheetName };  
                sheets.Append(sheet);  
            }  
            Console.WriteLine("All done.");  
            Console.ReadKey();  
        }  
    }  
}  
  
```  
  
```vb  
Imports System.Linq  
Imports DocumentFormat.OpenXml.Packaging  
Imports DocumentFormat.OpenXml.Spreadsheet  
Module Module1  
    Sub Main()  
        Dim fileName As String = "C:\Users\Public\Documents\WorksheetEx.xlsx"  
        Dim spreadSheet As SpreadsheetDocument = SpreadsheetDocument.Open(fileName, True)  
  
        Using (spreadSheet)  
            ' Add a WorksheetPart.  
            Dim newWorksheetPart As WorksheetPart = spreadSheet.WorkbookPart.AddNewPart(Of WorksheetPart)()  
            newWorksheetPart.Worksheet = New Worksheet(New SheetData())  
  
            ' Create a Sheets object.  
            Dim sheets As Sheets = spreadSheet.WorkbookPart.Workbook.GetFirstChild(Of Sheets)()  
            Dim relationshipId As String = spreadSheet.WorkbookPart.GetIdOfPart(newWorksheetPart)  
  
            ' Get a unique ID for the new worksheet.  
            Dim sheetId As UInteger = 1  
            If (sheets.Elements(Of Sheet).Count > 0) Then  
                sheetId = sheets.Elements(Of Sheet).Select(Function(s) s.SheetId.Value).Max + 1  
            End If  
  
            ' Give the new worksheet a name.  
            Dim sheetName As String = ("mySheet" + sheetId.ToString())  
  
            ' Append the new worksheet and associate it with the workbook.  
            Dim sheet As Sheet = New Sheet  
            sheet.Id = relationshipId  
            sheet.SheetId = sheetId  
            sheet.Name = sheetName  
            sheets.Append(sheet)  
        End Using  
        Console.WriteLine("All done.")  
        Console.ReadKey()  
    End Sub  
End Module  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Worksheet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Worksheet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the Worksheet class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Worksheet (params DocumentFormat.OpenXml.OpenXmlElement[] childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class DocumentFormat.OpenXml.OpenXmlElement[] childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Worksheet.#ctor(DocumentFormat.OpenXml.OpenXmlElement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray childElements As OpenXmlElement())" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Spreadsheet.Worksheet : DocumentFormat.OpenXml.OpenXmlElement[] -&gt; DocumentFormat.OpenXml.Spreadsheet.Worksheet" Usage="new DocumentFormat.OpenXml.Spreadsheet.Worksheet childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="DocumentFormat.OpenXml.OpenXmlElement[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the Worksheet class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Worksheet (System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt; childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Worksheet.#ctor(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (childElements As IEnumerable(Of OpenXmlElement))" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Spreadsheet.Worksheet : seq&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; -&gt; DocumentFormat.OpenXml.Spreadsheet.Worksheet" Usage="new DocumentFormat.OpenXml.Spreadsheet.Worksheet childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" />
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the Worksheet class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Worksheet (string outerXml);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string outerXml) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Worksheet.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (outerXml As String)" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Spreadsheet.Worksheet : string -&gt; DocumentFormat.OpenXml.Spreadsheet.Worksheet" Usage="new DocumentFormat.OpenXml.Spreadsheet.Worksheet outerXml" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="outerXml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outerXml">Specifies the outer XML of the element.</param>
        <summary>Initializes a new instance of the Worksheet class from outer XML.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Worksheet.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="worksheet.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (DocumentFormat.OpenXml.Packaging.WorksheetPart openXmlPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class DocumentFormat.OpenXml.Packaging.WorksheetPart openXmlPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Worksheet.Load(DocumentFormat.OpenXml.Packaging.WorksheetPart)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (openXmlPart As WorksheetPart)" />
      <MemberSignature Language="F#" Value="override this.Load : DocumentFormat.OpenXml.Packaging.WorksheetPart -&gt; unit" Usage="worksheet.Load openXmlPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openXmlPart" Type="DocumentFormat.OpenXml.Packaging.WorksheetPart" />
      </Parameters>
      <Docs>
        <param name="openXmlPart">Specifies the part to be loaded.</param>
        <summary>Loads the DOM from the WorksheetPart.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Worksheet.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.Spreadsheet.Worksheet.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (DocumentFormat.OpenXml.Packaging.WorksheetPart openXmlPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class DocumentFormat.OpenXml.Packaging.WorksheetPart openXmlPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Worksheet.Save(DocumentFormat.OpenXml.Packaging.WorksheetPart)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (openXmlPart As WorksheetPart)" />
      <MemberSignature Language="F#" Value="override this.Save : DocumentFormat.OpenXml.Packaging.WorksheetPart -&gt; unit" Usage="worksheet.Save openXmlPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openXmlPart" Type="DocumentFormat.OpenXml.Packaging.WorksheetPart" />
      </Parameters>
      <Docs>
        <param name="openXmlPart">Specifies the part to save to.</param>
        <summary>Saves the DOM into the WorksheetPart.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SheetDimension">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Spreadsheet.SheetDimension SheetDimension { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.Spreadsheet.SheetDimension SheetDimension" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Worksheet.SheetDimension" />
      <MemberSignature Language="VB.NET" Value="Public Property SheetDimension As SheetDimension" />
      <MemberSignature Language="F#" Value="member this.SheetDimension : DocumentFormat.OpenXml.Spreadsheet.SheetDimension with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.Worksheet.SheetDimension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Spreadsheet.SheetDimension</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>SheetDimension. Represents the following element tag in the schema: x:dimension</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <remark>
            xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
            </remark>
      </Docs>
    </Member>
    <Member MemberName="SheetFormatProperties">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Spreadsheet.SheetFormatProperties SheetFormatProperties { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.Spreadsheet.SheetFormatProperties SheetFormatProperties" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Worksheet.SheetFormatProperties" />
      <MemberSignature Language="VB.NET" Value="Public Property SheetFormatProperties As SheetFormatProperties" />
      <MemberSignature Language="F#" Value="member this.SheetFormatProperties : DocumentFormat.OpenXml.Spreadsheet.SheetFormatProperties with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.Worksheet.SheetFormatProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Spreadsheet.SheetFormatProperties</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>SheetFormatProperties. Represents the following element tag in the schema: x:sheetFormatPr</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <remark>
            xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
            </remark>
      </Docs>
    </Member>
    <Member MemberName="SheetProperties">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Spreadsheet.SheetProperties SheetProperties { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.Spreadsheet.SheetProperties SheetProperties" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Worksheet.SheetProperties" />
      <MemberSignature Language="VB.NET" Value="Public Property SheetProperties As SheetProperties" />
      <MemberSignature Language="F#" Value="member this.SheetProperties : DocumentFormat.OpenXml.Spreadsheet.SheetProperties with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.Worksheet.SheetProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Spreadsheet.SheetProperties</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>SheetProperties. Represents the following element tag in the schema: x:sheetPr</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <remark>
            xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
            </remark>
      </Docs>
    </Member>
    <Member MemberName="SheetViews">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Spreadsheet.SheetViews SheetViews { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.Spreadsheet.SheetViews SheetViews" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Worksheet.SheetViews" />
      <MemberSignature Language="VB.NET" Value="Public Property SheetViews As SheetViews" />
      <MemberSignature Language="F#" Value="member this.SheetViews : DocumentFormat.OpenXml.Spreadsheet.SheetViews with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.Worksheet.SheetViews" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Spreadsheet.SheetViews</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>SheetViews. Represents the following element tag in the schema: x:sheetViews</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <remark>
            xmlns:x = http://schemas.openxmlformats.org/spreadsheetml/2006/main
            </remark>
      </Docs>
    </Member>
    <Member MemberName="WorksheetPart">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Packaging.WorksheetPart WorksheetPart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.Packaging.WorksheetPart WorksheetPart" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Worksheet.WorksheetPart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorksheetPart As WorksheetPart" />
      <MemberSignature Language="F#" Value="member this.WorksheetPart : DocumentFormat.OpenXml.Packaging.WorksheetPart" Usage="DocumentFormat.OpenXml.Spreadsheet.Worksheet.WorksheetPart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Packaging.WorksheetPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the WorksheetPart associated with this element.</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.Packaging.WorksheetPart" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>