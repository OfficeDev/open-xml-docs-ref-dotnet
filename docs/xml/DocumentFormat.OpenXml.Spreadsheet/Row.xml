<Type Name="Row" FullName="DocumentFormat.OpenXml.Spreadsheet.Row">
  <TypeSignature Language="C#" Value="public class Row : DocumentFormat.OpenXml.OpenXmlCompositeElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Row extends DocumentFormat.OpenXml.OpenXmlCompositeElement" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Spreadsheet.Row" />
  <TypeSignature Language="VB.NET" Value="Public Class Row&#xA;Inherits OpenXmlCompositeElement" />
  <TypeSignature Language="F#" Value="type Row = class&#xA;    inherit OpenXmlCompositeElement" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.OpenXmlCompositeElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.Cell))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.ExtensionList))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Row. When the object is serialized out as xml, its qualified name is x:row.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 `row (Row)`  
  
 The element expresses information about an entire row of a worksheet, and contains all cell definitions for a particular row in the worksheet.  
  
 [*Example*:  
  
 This row expresses information about row  the worksheet, and contains 3 cell definitions.  
  
```xml  
<row r="2" spans="2:12">  
  <c r="C2" s="1">  
    <f>PMT(B3/12,B4,-B5)</f>  
    <v>672.68336574300008</v>  
  </c>  
  <c r="D2">  
    <v>180</v>  
  </c>  
  <c r="E2">  
    <v>360</v>  
  </c>  
</row>  
```  
  
 *end example*]  
  
|Parent Elements|  
|---------------------|  
|sheetData (§18.3.1.80)|  
  
|Child Elements|Subclause|  
|--------------------|---------------|  
|c (Cell)|§18.3.1.4|  
|extLst (Future Feature Data Storage Area)|§18.2.10|  
  
  [*Note*: The W3C XML Schema definition of this element’s content model (CT_Row) is located in §A.2. *end note*]  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlcopyrightiso.md)]  
  
   
  
## Examples  
 The following code example creates a spreadsheet documents, adds a row to the cell table, and writes the number "123" in the cell A1.  
  
```csharp  
using System;  
using DocumentFormat.OpenXml;  
using DocumentFormat.OpenXml.Packaging;  
using DocumentFormat.OpenXml.Spreadsheet;  
  
namespace RowEx  
{  
    class Program  
    {  
        static void Main(string[] args)  
        {  
            string fileName = @"C:\Users\Public\Documents\RowEx.xlsx";  
  
            // Create a spreadsheet document by using the file name.  
            SpreadsheetDocument spreadsheetDocument =  
                 SpreadsheetDocument.Create(fileName, SpreadsheetDocumentType.Workbook);  
  
            // Add a WorkbookPart and Workbook objects.  
            WorkbookPart workbookpart = spreadsheetDocument.AddWorkbookPart();  
            workbookpart.Workbook = new Workbook();  
  
            // Add a WorksheetPart.  
            WorksheetPart worksheetPart = workbookpart.AddNewPart<WorksheetPart>();  
  
            // Create Worksheet and SheetData objects.  
            worksheetPart.Worksheet = new Worksheet(new SheetData());  
  
            // Add a Sheets object.  
            Sheets sheets = spreadsheetDocument.WorkbookPart.Workbook  
                .AppendChild<Sheets>(new Sheets());  
  
            // Append the new worksheet named "mySheet" and associate it   
            // with the workbook.  
            Sheet sheet = new Sheet()  
            {  
                Id = spreadsheetDocument.WorkbookPart  
                    .GetIdOfPart(worksheetPart),  
                SheetId = 1,  
                Name = "mySheet"  
            };  
            sheets.Append(sheet);  
  
            // Get the sheetData cell table.  
            SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();  
  
            // Add a row to the cell table.  
            Row row;  
            row = new Row() { RowIndex = 1 };  
            sheetData.Append(row);  
  
            // Add the cell to the cell table at A1.  
            Cell refCell = null;  
            Cell newCell = new Cell() { CellReference = "A1" };  
            row.InsertBefore(newCell, refCell);  
  
            // Set the cell value to be a numeric value of 123.  
            newCell.CellValue = new CellValue("123");  
            newCell.DataType = new EnumValue<CellValues>(CellValues.Number);  
  
            // Close the document.  
            spreadsheetDocument.Close();  
  
            Console.WriteLine("All done. Press a key");  
            Console.ReadKey();  
        }  
    }  
}  
  
```  
  
```vb  
Imports System  
Imports DocumentFormat.OpenXml  
Imports DocumentFormat.OpenXml.Packaging  
Imports DocumentFormat.OpenXml.Spreadsheet  
  
Module Module1  
  
    Sub Main(ByVal args As String())  
        Dim fileName As String = "C:\Users\Public\Documents\RowEx.xlsx"  
  
        ' Create a spreadsheet document by using the file name.  
        Dim spreadsheetDocument As SpreadsheetDocument = _  
            spreadsheetDocument.Create(fileName, SpreadsheetDocumentType.Workbook)  
  
        ' Add a WorkbookPart and Workbook objects.  
        Dim workbookpart As WorkbookPart = spreadsheetDocument.AddWorkbookPart()  
        workbookpart.Workbook = New Workbook()  
  
        ' Add a WorksheetPart.  
        Dim worksheetPart As WorksheetPart = _  
            workbookpart.AddNewPart(Of WorksheetPart)()  
  
        ' Create Worksheet and SheetData objects.  
        worksheetPart.Worksheet = New Worksheet(New SheetData())  
  
        ' Add a Sheets object.  
        Dim sheets As Sheets = _  
            spreadsheetDocument.WorkbookPart.Workbook.AppendChild(Of Sheets)(New Sheets())  
  
        ' Append the new worksheet named "mySheet" and associate it   
        ' with the workbook.  
        Dim sheet As New Sheet() With { _  
         .Id = SpreadsheetDocument.WorkbookPart.GetIdOfPart(worksheetPart), _  
         .SheetId = 1, _  
         .Name = "mySheet" _  
        }  
        sheets.Append(sheet)  
  
        ' Get the sheetData cell table.  
        Dim sheetData As SheetData = _  
            worksheetPart.Worksheet.GetFirstChild(Of SheetData)()  
  
        ' Add a row to the cell table.  
        Dim row As Row  
        row = New Row() With { _  
         .RowIndex = 1 _  
        }  
        sheetData.Append(row)  
  
        ' Add the cell to the cell table at A1.  
        Dim refCell As Cell = Nothing  
        Dim newCell As New Cell() With { _  
         .CellReference = "A1" _  
        }  
        row.InsertBefore(newCell, refCell)  
  
        ' Set the cell value to be a numeric value of 123.  
        newCell.CellValue = New CellValue("123")  
        newCell.DataType = New EnumValue(Of CellValues)(CellValues.Number)  
  
        ' Close the document.  
        spreadsheetDocument.Close()  
  
        Console.WriteLine("All done. Press a key")  
        Console.ReadKey()  
    End Sub  
End Module  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Row ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Row.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the Row class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Row (params DocumentFormat.OpenXml.OpenXmlElement[] childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class DocumentFormat.OpenXml.OpenXmlElement[] childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Row.#ctor(DocumentFormat.OpenXml.OpenXmlElement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray childElements As OpenXmlElement())" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Spreadsheet.Row : DocumentFormat.OpenXml.OpenXmlElement[] -&gt; DocumentFormat.OpenXml.Spreadsheet.Row" Usage="new DocumentFormat.OpenXml.Spreadsheet.Row childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="DocumentFormat.OpenXml.OpenXmlElement[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the Row class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Row (System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt; childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Row.#ctor(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (childElements As IEnumerable(Of OpenXmlElement))" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Spreadsheet.Row : seq&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; -&gt; DocumentFormat.OpenXml.Spreadsheet.Row" Usage="new DocumentFormat.OpenXml.Spreadsheet.Row childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" />
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the Row class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Row (string outerXml);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string outerXml) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Row.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (outerXml As String)" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Spreadsheet.Row : string -&gt; DocumentFormat.OpenXml.Spreadsheet.Row" Usage="new DocumentFormat.OpenXml.Spreadsheet.Row outerXml" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="outerXml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outerXml">Specifies the outer XML of the element.</param>
        <summary>Initializes a new instance of the Row class from outer XML.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Row.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="row.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Collapsed">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.BooleanValue Collapsed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.BooleanValue Collapsed" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Row.Collapsed" />
      <MemberSignature Language="VB.NET" Value="Public Property Collapsed As BooleanValue" />
      <MemberSignature Language="F#" Value="member this.Collapsed : DocumentFormat.OpenXml.BooleanValue with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.Row.Collapsed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "collapsed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.BooleanValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Collapsed.Represents the following attribute in the schema: collapsed</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.BooleanValue" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomFormat">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.BooleanValue CustomFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.BooleanValue CustomFormat" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Row.CustomFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomFormat As BooleanValue" />
      <MemberSignature Language="F#" Value="member this.CustomFormat : DocumentFormat.OpenXml.BooleanValue with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.Row.CustomFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "customFormat")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.BooleanValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Custom Format.Represents the following attribute in the schema: customFormat</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.BooleanValue" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomHeight">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.BooleanValue CustomHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.BooleanValue CustomHeight" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Row.CustomHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomHeight As BooleanValue" />
      <MemberSignature Language="F#" Value="member this.CustomHeight : DocumentFormat.OpenXml.BooleanValue with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.Row.CustomHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "customHeight")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.BooleanValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Custom Height.Represents the following attribute in the schema: customHeight</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.BooleanValue" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DyDescent">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.DoubleValue DyDescent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.DoubleValue DyDescent" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Row.DyDescent" />
      <MemberSignature Language="VB.NET" Value="Public Property DyDescent As DoubleValue" />
      <MemberSignature Language="F#" Value="member this.DyDescent : DocumentFormat.OpenXml.DoubleValue with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.Row.DyDescent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(55, "dyDescent")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.DoubleValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>dyDescent.Represents the following attribute in the schema: x14ac:dyDescent</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <remark> xmlns:x14ac=http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac
            </remark>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.DoubleValue Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.DoubleValue Height" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Row.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As DoubleValue" />
      <MemberSignature Language="F#" Value="member this.Height : DocumentFormat.OpenXml.DoubleValue with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.Row.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "ht")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.DoubleValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Row Height.Represents the following attribute in the schema: ht</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.DoubleValue" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hidden">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.BooleanValue Hidden { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.BooleanValue Hidden" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Row.Hidden" />
      <MemberSignature Language="VB.NET" Value="Public Property Hidden As BooleanValue" />
      <MemberSignature Language="F#" Value="member this.Hidden : DocumentFormat.OpenXml.BooleanValue with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.Row.Hidden" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "hidden")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.BooleanValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Hidden.Represents the following attribute in the schema: hidden</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.BooleanValue" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Row.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.Spreadsheet.Row.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutlineLevel">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.ByteValue OutlineLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.ByteValue OutlineLevel" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Row.OutlineLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property OutlineLevel As ByteValue" />
      <MemberSignature Language="F#" Value="member this.OutlineLevel : DocumentFormat.OpenXml.ByteValue with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.Row.OutlineLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "outlineLevel")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.ByteValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Outline Level.Represents the following attribute in the schema: outlineLevel</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.ByteValue" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowIndex">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.UInt32Value RowIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.UInt32Value RowIndex" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Row.RowIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property RowIndex As UInt32Value" />
      <MemberSignature Language="F#" Value="member this.RowIndex : DocumentFormat.OpenXml.UInt32Value with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.Row.RowIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "r")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.UInt32Value</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Row Index.Represents the following attribute in the schema: r</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.UInt32Value" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowPhonetic">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.BooleanValue ShowPhonetic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.BooleanValue ShowPhonetic" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Row.ShowPhonetic" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowPhonetic As BooleanValue" />
      <MemberSignature Language="F#" Value="member this.ShowPhonetic : DocumentFormat.OpenXml.BooleanValue with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.Row.ShowPhonetic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "ph")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.BooleanValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Show Phonetic.Represents the following attribute in the schema: ph</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.BooleanValue" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Spans">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.ListValue&lt;DocumentFormat.OpenXml.StringValue&gt; Spans { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.ListValue`1&lt;class DocumentFormat.OpenXml.StringValue&gt; Spans" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Row.Spans" />
      <MemberSignature Language="VB.NET" Value="Public Property Spans As ListValue(Of StringValue)" />
      <MemberSignature Language="F#" Value="member this.Spans : DocumentFormat.OpenXml.ListValue&lt;DocumentFormat.OpenXml.StringValue&gt; with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.Row.Spans" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "spans")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.ListValue&lt;DocumentFormat.OpenXml.StringValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Spans.Represents the following attribute in the schema: spans</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.ListValue`1" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleIndex">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.UInt32Value StyleIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.UInt32Value StyleIndex" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Row.StyleIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property StyleIndex As UInt32Value" />
      <MemberSignature Language="F#" Value="member this.StyleIndex : DocumentFormat.OpenXml.UInt32Value with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.Row.StyleIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "s")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.UInt32Value</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Style Index.Represents the following attribute in the schema: s</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.UInt32Value" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThickBot">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.BooleanValue ThickBot { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.BooleanValue ThickBot" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Row.ThickBot" />
      <MemberSignature Language="VB.NET" Value="Public Property ThickBot As BooleanValue" />
      <MemberSignature Language="F#" Value="member this.ThickBot : DocumentFormat.OpenXml.BooleanValue with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.Row.ThickBot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "thickBot")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.BooleanValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Thick Bottom.Represents the following attribute in the schema: thickBot</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.BooleanValue" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThickTop">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.BooleanValue ThickTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.BooleanValue ThickTop" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Row.ThickTop" />
      <MemberSignature Language="VB.NET" Value="Public Property ThickTop As BooleanValue" />
      <MemberSignature Language="F#" Value="member this.ThickTop : DocumentFormat.OpenXml.BooleanValue with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.Row.ThickTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "thickTop")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.BooleanValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Thick Top Border.Represents the following attribute in the schema: thickTop</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.BooleanValue" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>