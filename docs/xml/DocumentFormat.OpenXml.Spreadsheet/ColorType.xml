<Type Name="ColorType" FullName="DocumentFormat.OpenXml.Spreadsheet.ColorType">
  <TypeSignature Language="C#" Value="public abstract class ColorType : DocumentFormat.OpenXml.OpenXmlLeafElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ColorType extends DocumentFormat.OpenXml.OpenXmlLeafElement" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Spreadsheet.ColorType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ColorType&#xA;Inherits OpenXmlLeafElement" />
  <TypeSignature Language="F#" Value="type ColorType = class&#xA;    inherit OpenXmlLeafElement" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.OpenXmlLeafElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines the ColorType class.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ColorType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.ColorType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the ColorType class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Auto">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.BooleanValue Auto { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.BooleanValue Auto" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.ColorType.Auto" />
      <MemberSignature Language="VB.NET" Value="Public Property Auto As BooleanValue" />
      <MemberSignature Language="F#" Value="member this.Auto : DocumentFormat.OpenXml.BooleanValue with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.ColorType.Auto" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "auto")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.BooleanValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Automatic.Represents the following attribute in the schema: auto</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.BooleanValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 A boolean value indicating the color is automatic and system color dependent.  
  
 The possible values for this attribute are defined by the XML Schema `boolean` data type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Indexed">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.UInt32Value Indexed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.UInt32Value Indexed" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.ColorType.Indexed" />
      <MemberSignature Language="VB.NET" Value="Public Property Indexed As UInt32Value" />
      <MemberSignature Language="F#" Value="member this.Indexed : DocumentFormat.OpenXml.UInt32Value with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.ColorType.Indexed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "indexed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.UInt32Value</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Index.Represents the following attribute in the schema: indexed</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.UInt32Value" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Indexed color value. Only used for backwards compatibility. References a color in `indexedColors`.  
  
 The possible values for this attribute are defined by the XML Schema `unsignedInt` data type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rgb">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.HexBinaryValue Rgb { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.HexBinaryValue Rgb" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.ColorType.Rgb" />
      <MemberSignature Language="VB.NET" Value="Public Property Rgb As HexBinaryValue" />
      <MemberSignature Language="F#" Value="member this.Rgb : DocumentFormat.OpenXml.HexBinaryValue with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.ColorType.Rgb" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "rgb")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.HexBinaryValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Alpha Red Green Blue Color Value.Represents the following attribute in the schema: rgb</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.StringValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Standard Alpha Red Green Blue color value (ARGB).  
  
 The possible values for this attribute are defined by the `ST_UnsignedIntHex` simple type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Theme">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.UInt32Value Theme { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.UInt32Value Theme" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.ColorType.Theme" />
      <MemberSignature Language="VB.NET" Value="Public Property Theme As UInt32Value" />
      <MemberSignature Language="F#" Value="member this.Theme : DocumentFormat.OpenXml.UInt32Value with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.ColorType.Theme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "theme")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.UInt32Value</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Theme Color.Represents the following attribute in the schema: theme</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.UInt32Value" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Index into the `clrScheme` collection, referencing a particular `sysClr` or `srgbClr` value expressed in the Theme part.  
  
 The possible values for this attribute are defined by the XML Schema `unsignedInt` data type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tint">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.DoubleValue Tint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.DoubleValue Tint" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.ColorType.Tint" />
      <MemberSignature Language="VB.NET" Value="Public Property Tint As DoubleValue" />
      <MemberSignature Language="F#" Value="member this.Tint : DocumentFormat.OpenXml.DoubleValue with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.ColorType.Tint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "tint")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.DoubleValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tint.Represents the following attribute in the schema: tint</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.DoubleValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies the tint value applied to the color.  
  
 If `tint` is supplied, then it is applied to the RGB value of the color to determine the final color applied.  
  
 The `tint` value is stored as a double from −1.0 .. 1.0, where −1.0 means 100% darken and 1.0 means 100% lighten. Also, 0.0 means no change.  
  
 In loading the RGB value, it is converted to HLS where HLS values are (0.. HLSMAX), where HLSMAX is currently 255.  
  
 Here are some examples of how to apply tint to color:  
  
 If (tint \< 0)  
  
 Lum’ = Lum * (1.0 + tint)  
  
 For example: Lum = 200; tint = −0.5; Darken 50%  
  
 Lum’ = 200 * (0.5) => 100  
  
 For example:  Lum = 200; tint = −1.0; Darken 100% (make black)  
  
 Lum’ = 200 * (1.0 − 1.0) => 0  
  
 If (tint > 0)  
  
 Lum’ = Lum * (1.0 − tint) + (HLSMAX – HLSMAX * (1.0 − tint))  
  
 For example: Lum = 100; tint = 0.75; Lighten 75%  
  
 Lum’ = 100 * (1 − 0.75)  + (HLSMAX – HLSMAX * (1 − 0.75))  
  
 = 100 * 0.25 + (255 – 255 * 0.25)  
  
 = 25 + (255 – 63) = 25 + 192 = 217  
  
 For example: Lum = 100; tint = 1.0; Lighten 100% (make white)  
  
 Lum’ = 100 * (1 − 1)  + (HLSMAX – HLSMAX * (1 − 1))  
  
 = 100 * 0 + (255 – 255 * 0)  
  
 = 0 + (255 – 0) = 255  
  
 The possible values for this attribute are defined by the XML Schema `double` data type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>