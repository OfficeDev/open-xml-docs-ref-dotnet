<Type Name="Sheet" FullName="DocumentFormat.OpenXml.Spreadsheet.Sheet">
  <TypeSignature Language="C#" Value="public class Sheet : DocumentFormat.OpenXml.OpenXmlLeafElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Sheet extends DocumentFormat.OpenXml.OpenXmlLeafElement" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Spreadsheet.Sheet" />
  <TypeSignature Language="VB.NET" Value="Public Class Sheet&#xA;Inherits OpenXmlLeafElement" />
  <TypeSignature Language="F#" Value="type Sheet = class&#xA;    inherit OpenXmlLeafElement" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.OpenXmlLeafElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Sheet Information. When the object is serialized out as xml, its qualified name is x:sheet.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 **sheet (Sheet Information)**  
  
 This element defines a sheet in this workbook. Sheet data is stored in a separate part.  
  
|Parent Elements|  
|---------------------|  
|sheets (§18.2.20)|  
  
|Attributes|Description|  
|----------------|-----------------|  
|id (Relationship Id)<br /><br /> Namespace: *.../officeDocument/2006/relationships*|Specifies the identifier of the sheet part where the definition for this sheet is stored.<br /><br /> This attribute is required.<br /><br /> The possible values for this attribute are defined by the *ST_RelationshipId* simple type (§22.8.2.1).|  
|name (Sheet Name)|Specifies the name of the sheet. This name shall be unique.<br /><br /> This attribute is required.<br /><br /> The possible values for this attribute are defined by the *ST_Xstring* simple type (§22.9.2.19).|  
|sheetId (Sheet Tab Id)|Specifies the internal identifier for the sheet. This identifier shall be unique.<br /><br /> This attribute is required.<br /><br /> The possible values for this attribute are defined by the W3C XML Schema *unsignedInt* datatype.|  
|state (Visible State)|Specifies the visible state of this sheet.<br /><br /> The default value for this attribute is "visible."<br /><br /> The possible values for this attribute are defined by the *ST_SheetState* simple type (§18.18.68).|  
  
 [*Note*: The W3C XML Schema definition of this element’s content model (CT_Sheet) is located in §A.2. *end note*]  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlcopyrightiso.md)]  
  
   
  
## Examples  
 The following code example inserts a new worksheet in the workbook of an existing spreadsheet document.  
  
```csharp  
using System;  
using System.Linq;  
using DocumentFormat.OpenXml.Packaging;  
using DocumentFormat.OpenXml.Spreadsheet;  
  
namespace SheetEx  
{  
    class Program  
    {  
        // Insert a new worksheet in a spreadsheet document.  
        static void Main(string[] args)  
        {  
            string document = @"C:\users\public\documents\SheetsEx.xlsx";  
  
            // Open the document for editing.  
            using (SpreadsheetDocument spreadsheetDocument  
                = SpreadsheetDocument.Open(document, true))  
            {  
                // Add a blank WorksheetPart.  
                WorksheetPart newWorksheetPart =   
                    spreadsheetDocument.WorkbookPart.AddNewPart<WorksheetPart>();  
                newWorksheetPart.Worksheet = new Worksheet(new SheetData());  
  
                Sheets sheets = spreadsheetDocument.WorkbookPart.Workbook  
                    .GetFirstChild<Sheets>();  
                string relationshipId = spreadsheetDocument.WorkbookPart  
                    .GetIdOfPart(newWorksheetPart);  
  
                // Get a unique ID for the new worksheet.  
                uint sheetId = 1;  
                if (sheets.Elements<Sheet>().Count() > 0)  
                   sheetId = sheets.Elements<Sheet>().Select(s => s.SheetId.Value).Max() + 1;  
  
                // Give the new worksheet a name.  
                string sheetName = "mySheet" + sheetId;  
  
                // Append the new worksheet and associate it with the workbook.  
                Sheet sheet = new Sheet() { Id = relationshipId, SheetId = sheetId,  
                    Name = sheetName };  
                sheets.Append(sheet);  
  
                Console.WriteLine("A new sheet has been inserted into the workbook.\nPress a key.");  
                Console.ReadKey();  
            }  
        }  
    }  
}  
  
```  
  
```vb  
Imports System.Linq  
Imports DocumentFormat.OpenXml.Packaging  
Imports DocumentFormat.OpenXml.Spreadsheet  
  
Module Module1  
    ' Insert a new worksheet in a spreadsheet document.  
    Sub Main(ByVal args As String())  
        Dim document As String = "C:\users\public\documents\SheetsEx.xlsx"  
  
        ' Open the document for editing.  
        Using spreadsheetDocument As SpreadsheetDocument = _  
            spreadsheetDocument.Open(document, True)  
            ' Add a blank WorksheetPart.  
            Dim newWorksheetPart As WorksheetPart = _  
                spreadsheetDocument.WorkbookPart.AddNewPart(Of WorksheetPart)()  
            newWorksheetPart.Worksheet = New Worksheet(New SheetData())  
  
            Dim sheets As Sheets = _  
                spreadsheetDocument.WorkbookPart.Workbook.GetFirstChild(Of Sheets)()  
            Dim relationshipId As String = _  
                spreadsheetDocument.WorkbookPart.GetIdOfPart(newWorksheetPart)  
  
            ' Get a unique ID for the new worksheet.  
            Dim sheetId As UInteger = 1  
            If sheets.Elements(Of Sheet)().Count() > 0 Then  
                sheetId = sheets.Elements(Of Sheet)().[Select](Function(s) _  
                           s.SheetId.Value).Max() + 1  
            End If  
  
            ' Give the new worksheet a name.  
            Dim sheetName As String = "mySheet" & sheetId  
  
            ' Append the new worksheet and associate it with the workbook.  
            Dim sheet As New Sheet() With { _  
             .Id = relationshipId, _  
             .SheetId = sheetId, _  
             .Name = sheetName _  
            }  
            sheets.Append(sheet)  
  
            Console.WriteLine("A new sheet has been inserted into the workbook." _  
                              & vbLf & "Press a key.")  
            Console.ReadKey()  
        End Using  
    End Sub  
End Module  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Sheet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Sheet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the Sheet class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.Sheet.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="sheet.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.StringValue Id { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.StringValue Id" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Sheet.Id" />
      <MemberSignature Language="VB.NET" Value="Public Property Id As StringValue" />
      <MemberSignature Language="F#" Value="member this.Id : DocumentFormat.OpenXml.StringValue with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.Sheet.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(19, "id")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.StringValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Relationship Id.Represents the following attribute in the schema: r:id</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.StringValue" />.</value>
        <remarks>To be added.</remarks>
        <remark> xmlns:r=http://schemas.openxmlformats.org/officeDocument/2006/relationships
            </remark>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Sheet.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.Spreadsheet.Sheet.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.StringValue Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.StringValue Name" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Sheet.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As StringValue" />
      <MemberSignature Language="F#" Value="member this.Name : DocumentFormat.OpenXml.StringValue with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.Sheet.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "name")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.StringValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sheet Name.Represents the following attribute in the schema: name</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.StringValue" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SheetId">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.UInt32Value SheetId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.UInt32Value SheetId" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Sheet.SheetId" />
      <MemberSignature Language="VB.NET" Value="Public Property SheetId As UInt32Value" />
      <MemberSignature Language="F#" Value="member this.SheetId : DocumentFormat.OpenXml.UInt32Value with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.Sheet.SheetId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "sheetId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.UInt32Value</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sheet Tab Id.Represents the following attribute in the schema: sheetId</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.UInt32Value" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Spreadsheet.SheetStateValues&gt; State { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.EnumValue`1&lt;valuetype DocumentFormat.OpenXml.Spreadsheet.SheetStateValues&gt; State" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.Sheet.State" />
      <MemberSignature Language="VB.NET" Value="Public Property State As EnumValue(Of SheetStateValues)" />
      <MemberSignature Language="F#" Value="member this.State : DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Spreadsheet.SheetStateValues&gt; with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.Sheet.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "state")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Spreadsheet.SheetStateValues&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Visible State.Represents the following attribute in the schema: state</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.EnumValue`1" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>