<Type Name="ExtensionList" FullName="DocumentFormat.OpenXml.Spreadsheet.ExtensionList">
  <TypeSignature Language="C#" Value="public class ExtensionList : DocumentFormat.OpenXml.OpenXmlCompositeElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExtensionList extends DocumentFormat.OpenXml.OpenXmlCompositeElement" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Spreadsheet.ExtensionList" />
  <TypeSignature Language="VB.NET" Value="Public Class ExtensionList&#xA;Inherits OpenXmlCompositeElement" />
  <TypeSignature Language="F#" Value="type ExtensionList = class&#xA;    inherit OpenXmlCompositeElement" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.OpenXmlCompositeElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.Extension))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines the ExtensionList Class. When the object is serialized out as xml, its qualified name is x:extLst.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 **extLst (Future Feature Data Storage Area)**  
  
 This element provides a convention for extending spreadsheetML in defined locations within the markup specification. The locations shall be denoted with the extLst element, and are called extension lists. Extension list locations within the markup document are specified in the markup specification and can be used to store extensions to the markup specification, whether those are future version extensions of the markup specification or are private extensions implemented independently from the markup specification. Markup within an extension might not be understood by a markup consumer.  
  
 extLst elements contain ext elements, called *extensions*. See §18.2.7 for more discussion of extensions.  
  
 [*Note*: Allowing markup specification extensions and private markup extensions within an extension list does not violate interoperability because the rules articulated within §18.2.7 and Part 5, §12 describe how markup producers and consumers must generate and consume markup documents containing application defined extension elements, including how to avoid and when to generate error conditions. *end note*]  
  
 [*Note*: This element is not intended to reintroduce transitional schema into the strict conformance class. *end note*]  
  
|Parent Elements|  
|---------------------|  
|autoFilter (§18.3.1.2); bk (§18.9.2); c (§18.3.1.4); cacheField (§18.10.1.3); cacheHierarchy (§18.10.1.6); cacheSource (§18.10.1.7); calcChain (§18.6.2); calculatedItem (§18.10.1.8); calculatedMember (§18.10.1.10); cellStyle (§18.8.7); cfRule (§18.3.1.10); cfvo (§18.3.1.11); chartsheet (§18.3.1.12); comments (§18.7.6); conditionalFormat (§18.10.1.18); conditionalFormatting (§18.3.1.18); connection (§18.13.1); customSheetView (§18.3.1.25); customWorkbookView (§18.2.3); dataField (§18.10.1.22); dialogsheet (§18.3.1.34); dxf (§18.8.14); externalLink (§18.14.8); filter (§18.10.1.33); filterColumn (§18.3.2.7); format (§18.10.1.35); futureMetadata (§18.9.4); groupLevel (§18.10.1.39); header (§18.11.1.1); ignoredErrors (§18.3.1.51); metadata (§18.9.8); nc (§18.11.1.3); ndxf (§18.11.1.4); oc (§18.11.1.5); odxf (§18.11.1.6); pageField (§18.10.1.62); pivotArea (§18.3.1.68); pivotCacheDefinition (§18.10.1.67); pivotCacheRecords (§18.10.1.68); pivotField (§18.10.1.69); pivotHierarchy (§18.10.1.72); pivotTableDefinition (§18.10.1.73); queryTable (§18.12.2); queryTableField (§18.12.4); queryTableRefresh (§18.12.6); rcc (§18.11.1.9); rdn (§18.11.1.13); reference (§18.10.2.1); rfmt (§18.11.1.17); row (§18.3.1.73); rsnm (§18.11.1.22); sheetView (§18.3.1.86); sheetView (§18.3.1.87); sheetViews (§18.3.1.89); sheetViews (§18.3.1.88); singleXmlCell (§18.5.2.1); sortState (§18.3.1.92); sst (§18.4.9); styleSheet (§18.8.39); table (§18.5.1.2); tableColumn (§18.5.1.3); tupleCache (§18.10.1.94); userInfo (§18.11.2.1); volTypes (§18.15.6); workbook (§18.2.27); workbookView (§18.2.30); worksheet (§18.3.1.99); xf (§18.8.45); xmlCellPr (§18.5.2.3); xmlColumnPr (§18.5.1.7); xmlPr (§18.5.2.4)|  
  
|Child Elements|Subclause|  
|--------------------|---------------|  
|ext (Extension)|§18.2.7|  
  
 [*Note*: The W3C XML Schema definition of this element’s content model (CT_ExtensionList) is located in §A.2. *end note*]  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlcopyrightiso.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExtensionList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.ExtensionList.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the ExtensionList class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExtensionList (params DocumentFormat.OpenXml.OpenXmlElement[] childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class DocumentFormat.OpenXml.OpenXmlElement[] childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.ExtensionList.#ctor(DocumentFormat.OpenXml.OpenXmlElement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray childElements As OpenXmlElement())" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Spreadsheet.ExtensionList : DocumentFormat.OpenXml.OpenXmlElement[] -&gt; DocumentFormat.OpenXml.Spreadsheet.ExtensionList" Usage="new DocumentFormat.OpenXml.Spreadsheet.ExtensionList childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="DocumentFormat.OpenXml.OpenXmlElement[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the ExtensionList class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExtensionList (System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt; childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.ExtensionList.#ctor(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (childElements As IEnumerable(Of OpenXmlElement))" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Spreadsheet.ExtensionList : seq&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; -&gt; DocumentFormat.OpenXml.Spreadsheet.ExtensionList" Usage="new DocumentFormat.OpenXml.Spreadsheet.ExtensionList childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" />
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the ExtensionList class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExtensionList (string outerXml);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string outerXml) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.ExtensionList.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (outerXml As String)" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Spreadsheet.ExtensionList : string -&gt; DocumentFormat.OpenXml.Spreadsheet.ExtensionList" Usage="new DocumentFormat.OpenXml.Spreadsheet.ExtensionList outerXml" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="outerXml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outerXml">Specifies the outer XML of the element.</param>
        <summary>Initializes a new instance of the ExtensionList class from outer XML.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.ExtensionList.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="extensionList.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.ExtensionList.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.Spreadsheet.ExtensionList.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>