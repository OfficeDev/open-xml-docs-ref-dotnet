<Type Name="SharedStringTable" FullName="DocumentFormat.OpenXml.Spreadsheet.SharedStringTable">
  <TypeSignature Language="C#" Value="public class SharedStringTable : DocumentFormat.OpenXml.OpenXmlPartRootElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SharedStringTable extends DocumentFormat.OpenXml.OpenXmlPartRootElement" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Spreadsheet.SharedStringTable" />
  <TypeSignature Language="VB.NET" Value="Public Class SharedStringTable&#xA;Inherits OpenXmlPartRootElement" />
  <TypeSignature Language="F#" Value="type SharedStringTable = class&#xA;    inherit OpenXmlPartRootElement" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.OpenXmlPartRootElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.SharedStringItem))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Spreadsheet.ExtensionList))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Shared String Table. The root element of SharedStringTablePart. When the object is serialized out as xml, its qualified name is x:sst.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 **sst (Shared String Table)**  
  
 This element is the root of the Shared String Table, which serves as a collection of individual String Items (si).  
  
|Parent Elements|  
|---------------------|  
|Root element of SpreadsheetML Shared String Table part|  
  
|Child Elements|Subclause|  
|--------------------|---------------|  
|extLst (Future Feature Data Storage Area)|§18.2.10|  
|si (String Item)|§18.4.8|  
  
|Attributes|Description|  
|----------------|-----------------|  
|count (String Count)|An integer representing the total count of strings in the workbook.  This count does not include any numbers, it counts only the total of text strings in the workbook.<br /><br /> This attribute is optional unless *uniqueCount* is used, in which case it is required.<br /><br /> The possible values for this attribute are defined by the W3C XML Schema *unsignedInt* datatype.|  
|uniqueCount (Unique String Count)|An integer representing the total count of unique strings in the Shared String Table.  A string is unique even if it is a copy of another string, but has different formatting applied at the character level.<br /><br /> *[Example:*<br /><br /> World, *World*, and *W*orld.<br /><br /> The *count* would be 3, and the *uniqueCount* would be 2.  Only one entry for "World" would show in the table because it is the same string, just with different formatting applied at the cell level (i.e., applied to the entire string in the cell).  The "*W*orld" string would get a separate unique entry in the shared string table because it has different formatting applied to specific characters.<br /><br /> *end example]*<br /><br /> This attribute is optional unless *count* is used, in which case it is required.<br /><br /> The possible values for this attribute are defined by the W3C XML Schema *unsignedInt* datatype.|  
  
 [*Note*: The W3C XML Schema definition of this element’s content model (CT_Sst) is located in §A.2. *end note*]  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlcopyrightiso.md)]  
  
   
  
## Examples  
 The following code example creates a new spreadsheet document and inserts a hyperlink in the cell "A2."  
  
```csharp  
using System;  
using System.Linq;  
using DocumentFormat.OpenXml;  
using DocumentFormat.OpenXml.Packaging;  
using DocumentFormat.OpenXml.Spreadsheet;  
  
namespace SharedStringTableEx  
{  
    class Program  
    {  
        static void Main(string[] args)  
        {  
            string fileName = @"C:\Users\Public\Documents\SharedStringTableEx.xlsx";  
  
            // Create a spreadsheet document.  
            SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.  
                Create(fileName, SpreadsheetDocumentType.Workbook);  
  
            // Add a WorkbookPart to the document.  
            WorkbookPart workbookpart = spreadsheetDocument.AddWorkbookPart();  
            workbookpart.Workbook = new Workbook();  
  
            // Add a WorksheetPart to the WorkbookPart.  
            WorksheetPart worksheetPart = workbookpart.AddNewPart<WorksheetPart>();  
            worksheetPart.Worksheet = new Worksheet(new SheetData());  
  
            // Add Sheets to the Workbook.  
            Sheets sheets =  
                spreadsheetDocument.WorkbookPart.Workbook.AppendChild<Sheets>(new Sheets());  
  
            // Append a new worksheet and associate it with the workbook.  
            Sheet sheet = new Sheet()  
            { Id = spreadsheetDocument.WorkbookPart.  
                GetIdOfPart(worksheetPart),  
                SheetId = 1,  
                Name = "mySheet"  
            };  
            sheets.Append(sheet);  
  
            Worksheet worksheet = new Worksheet();  
            SheetData sheetData = new SheetData();  
  
            Row row =  
                new Row()  
                { RowIndex = 2U,  
                  Spans = new ListValue<StringValue>() { InnerText = "2:2" }  
                };  
            Cell cell =  
                new Cell()  
                { CellReference = "A2",  
                  DataType = CellValues.String,  
                  CellValue = new CellValue("Microsoft")  
                };  
            row.Append(cell);  
            sheetData.Append(row);  
            worksheet.Append(sheetData);  
            worksheetPart.Worksheet = worksheet;  
  
            workbookpart.Workbook.Save();  
  
            // Close the document.  
            spreadsheetDocument.Close();  
            InsertHyperLink(fileName, "http://www.microsoft.com", "A2");  
  
            Console.WriteLine("The hyperlink has been inserted.\nPress a key.");  
            Console.ReadKey();  
        }  
  
        static public void InsertHyperLink(string fileName, string uri, string cellAddress)  
        {  
            // Open the document for editing.  
            using (SpreadsheetDocument spreadsheetDocument =  
                SpreadsheetDocument.Open(fileName, true))  
            {  
                // Get the first sheet in the workbook.  
                Sheet sheet1 = spreadsheetDocument.WorkbookPart.Workbook.  
                    Descendants<Sheet>().First();  
                WorksheetPart worksheetPart = (WorksheetPart)spreadsheetDocument.  
                    WorkbookPart.GetPartById(sheet1.Id);  
  
                // Create a hyperlink relationship.  
                HyperlinkRelationship hyperlinkRelationship =  
                    worksheetPart.AddHyperlinkRelationship(new System.Uri  
                    (uri, System.UriKind.Absolute), true);  
  
                // Add a new shared string table part.  
                SharedStringTablePart sharedStringTablePart1;  
                if (spreadsheetDocument.WorkbookPart.GetPartsCountOfType  
                    <SharedStringTablePart>() > 0)  
                {  
                    sharedStringTablePart1 =  
                        spreadsheetDocument.WorkbookPart.GetPartsOfType  
                        <SharedStringTablePart>().First();  
                }  
                else  
                {  
                    sharedStringTablePart1 =  
                        spreadsheetDocument.WorkbookPart.AddNewPart  
                        <SharedStringTablePart>();  
                }  
  
                // Add a new shared string table.  
                SharedStringTable sharedStringTable1 =  
                    new SharedStringTable() { Count = (UInt32Value)1U, UniqueCount =  
                        (UInt32Value)1U };  
                sharedStringTablePart1.SharedStringTable = sharedStringTable1;  
  
                // Create the hyperlink object.  
                Hyperlinks hyperlinks1 = new Hyperlinks();  
                Hyperlink hyperlink1 =  
                    new Hyperlink() { Reference = cellAddress, Id =   
                        hyperlinkRelationship.Id };  
  
                // Append the hyperlink to the collection.   
                hyperlinks1.Append(hyperlink1);  
  
                // Append the hyperlink to the worksheet.  
                worksheetPart.Worksheet.Append(hyperlinks1);  
            }  
        }  
    }  
}  
// Output:  
// The hyperlink has been inserted.  
// Press a key.  
  
```  
  
```vb  
Imports System.Linq  
Imports DocumentFormat.OpenXml  
Imports DocumentFormat.OpenXml.Packaging  
Imports DocumentFormat.OpenXml.Spreadsheet  
  
Module Module1  
    Sub Main(ByVal args As String())  
        Dim fileName As String = "C:\Users\Public\Documents\SharedStringTableEx.xlsx"  
  
        ' Create a spreadsheet document.  
        Dim spreadsheetDocument As SpreadsheetDocument = spreadsheetDocument.Create(fileName, SpreadsheetDocumentType.Workbook)  
  
        ' Add a WorkbookPart to the document.  
        Dim workbookpart As WorkbookPart = spreadsheetDocument.AddWorkbookPart()  
        workbookpart.Workbook = New Workbook()  
  
        ' Add a WorksheetPart to the WorkbookPart.  
        Dim worksheetPart As WorksheetPart = workbookpart.AddNewPart(Of WorksheetPart)()  
        worksheetPart.Worksheet = New Worksheet(New SheetData())  
  
        ' Add Sheets to the Workbook.  
        Dim sheets As Sheets = spreadsheetDocument.WorkbookPart.Workbook.AppendChild(Of Sheets)(New Sheets())  
  
        ' Append a new worksheet and associate it with the workbook.  
        Dim sheet As New Sheet() With { _  
         .Id = spreadsheetDocument.WorkbookPart.GetIdOfPart(worksheetPart), _  
         .SheetId = 1, _  
         .Name = "mySheet" _  
        }  
        sheets.Append(sheet)  
  
        Dim worksheet As New Worksheet()  
        Dim sheetData As New SheetData()  
  
        Dim row As New Row() With { _  
         .RowIndex = 2UI, _  
         .Spans = New ListValue(Of StringValue)() With { _  
          .InnerText = "2:2" _  
         } _  
        }  
        Dim cell As New Cell() With { _  
         .CellReference = "A2", _  
         .DataType = CellValues.[String], _  
         .CellValue = New CellValue("Microsoft") _  
        }  
        row.Append(cell)  
        sheetData.Append(row)  
        worksheet.Append(sheetData)  
        worksheetPart.Worksheet = worksheet  
  
        workbookpart.Workbook.Save()  
  
        ' Close the document.  
        spreadsheetDocument.Close()  
        InsertHyperLink(fileName, "http://www.microsoft.com", "A2")  
  
        Console.WriteLine("The hyperlink has been inserted." & vbLf & "Press a key.")  
        Console.ReadKey()  
    End Sub  
  
    Public Sub InsertHyperLink(ByVal fileName As String, ByVal uri As String, ByVal cellAddress As String)  
        ' Open the document for editing.  
        Using spreadsheetDocument As SpreadsheetDocument = spreadsheetDocument.Open(fileName, True)  
            ' Get the first sheet in the workbook.  
            Dim sheet1 As Sheet = spreadsheetDocument.WorkbookPart.Workbook.Descendants(Of Sheet)().First()  
            Dim worksheetPart As WorksheetPart = DirectCast(spreadsheetDocument.WorkbookPart.GetPartById(sheet1.Id), WorksheetPart)  
  
            ' Create a hyperlink relationship.  
            Dim hyperlinkRelationship As HyperlinkRelationship = worksheetPart.AddHyperlinkRelationship(New System.Uri(uri, System.UriKind.Absolute), True)  
  
            ' Add a new shared string table part.  
            Dim sharedStringTablePart1 As SharedStringTablePart  
            If spreadsheetDocument.WorkbookPart.GetPartsCountOfType(Of SharedStringTablePart)() > 0 Then  
                sharedStringTablePart1 = spreadsheetDocument.WorkbookPart.GetPartsOfType(Of SharedStringTablePart)().First()  
            Else  
                sharedStringTablePart1 = spreadsheetDocument.WorkbookPart.AddNewPart(Of SharedStringTablePart)()  
            End If  
  
            ' Add a new shared string table.  
            Dim sharedStringTable1 As New SharedStringTable() With { _  
              .Count = CType(1UI, UInt32Value), _  
              .UniqueCount = CType(1UI, UInt32Value) _  
            }  
            sharedStringTablePart1.SharedStringTable = sharedStringTable1  
  
            ' Create the hyperlink object.  
            Dim hyperlinks1 As New Hyperlinks()  
            Dim hyperlink1 As New Hyperlink() With { _  
             .Reference = cellAddress, _  
             .Id = hyperlinkRelationship.Id _  
            }  
  
            ' Append the hyperlink to the collection.   
            hyperlinks1.Append(hyperlink1)  
  
            ' Append the hyperlink to the worksheet.  
            worksheetPart.Worksheet.Append(hyperlinks1)  
        End Using  
    End Sub  
End Module  
' Output:  
' The hyperlink has been inserted.  
' Press a key.  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SharedStringTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.SharedStringTable.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the SharedStringTable class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SharedStringTable (params DocumentFormat.OpenXml.OpenXmlElement[] childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class DocumentFormat.OpenXml.OpenXmlElement[] childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.SharedStringTable.#ctor(DocumentFormat.OpenXml.OpenXmlElement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray childElements As OpenXmlElement())" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Spreadsheet.SharedStringTable : DocumentFormat.OpenXml.OpenXmlElement[] -&gt; DocumentFormat.OpenXml.Spreadsheet.SharedStringTable" Usage="new DocumentFormat.OpenXml.Spreadsheet.SharedStringTable childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="DocumentFormat.OpenXml.OpenXmlElement[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the SharedStringTable class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SharedStringTable (System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt; childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.SharedStringTable.#ctor(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (childElements As IEnumerable(Of OpenXmlElement))" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Spreadsheet.SharedStringTable : seq&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; -&gt; DocumentFormat.OpenXml.Spreadsheet.SharedStringTable" Usage="new DocumentFormat.OpenXml.Spreadsheet.SharedStringTable childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" />
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the SharedStringTable class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SharedStringTable (string outerXml);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string outerXml) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.SharedStringTable.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (outerXml As String)" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Spreadsheet.SharedStringTable : string -&gt; DocumentFormat.OpenXml.Spreadsheet.SharedStringTable" Usage="new DocumentFormat.OpenXml.Spreadsheet.SharedStringTable outerXml" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="outerXml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outerXml">Specifies the outer XML of the element.</param>
        <summary>Initializes a new instance of the SharedStringTable class from outer XML.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.SharedStringTable.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="sharedStringTable.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.UInt32Value Count { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.UInt32Value Count" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.SharedStringTable.Count" />
      <MemberSignature Language="VB.NET" Value="Public Property Count As UInt32Value" />
      <MemberSignature Language="F#" Value="member this.Count : DocumentFormat.OpenXml.UInt32Value with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.SharedStringTable.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "count")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.UInt32Value</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>String Count.Represents the following attribute in the schema: count</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.UInt32Value" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (DocumentFormat.OpenXml.Packaging.SharedStringTablePart openXmlPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class DocumentFormat.OpenXml.Packaging.SharedStringTablePart openXmlPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.SharedStringTable.Load(DocumentFormat.OpenXml.Packaging.SharedStringTablePart)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (openXmlPart As SharedStringTablePart)" />
      <MemberSignature Language="F#" Value="override this.Load : DocumentFormat.OpenXml.Packaging.SharedStringTablePart -&gt; unit" Usage="sharedStringTable.Load openXmlPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openXmlPart" Type="DocumentFormat.OpenXml.Packaging.SharedStringTablePart" />
      </Parameters>
      <Docs>
        <param name="openXmlPart">Specifies the part to be loaded.</param>
        <summary>Loads the DOM from the SharedStringTablePart.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.SharedStringTable.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.Spreadsheet.SharedStringTable.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (DocumentFormat.OpenXml.Packaging.SharedStringTablePart openXmlPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class DocumentFormat.OpenXml.Packaging.SharedStringTablePart openXmlPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Spreadsheet.SharedStringTable.Save(DocumentFormat.OpenXml.Packaging.SharedStringTablePart)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (openXmlPart As SharedStringTablePart)" />
      <MemberSignature Language="F#" Value="override this.Save : DocumentFormat.OpenXml.Packaging.SharedStringTablePart -&gt; unit" Usage="sharedStringTable.Save openXmlPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openXmlPart" Type="DocumentFormat.OpenXml.Packaging.SharedStringTablePart" />
      </Parameters>
      <Docs>
        <param name="openXmlPart">Specifies the part to save to.</param>
        <summary>Saves the DOM into the SharedStringTablePart.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SharedStringTablePart">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Packaging.SharedStringTablePart SharedStringTablePart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.Packaging.SharedStringTablePart SharedStringTablePart" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.SharedStringTable.SharedStringTablePart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SharedStringTablePart As SharedStringTablePart" />
      <MemberSignature Language="F#" Value="member this.SharedStringTablePart : DocumentFormat.OpenXml.Packaging.SharedStringTablePart" Usage="DocumentFormat.OpenXml.Spreadsheet.SharedStringTable.SharedStringTablePart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Packaging.SharedStringTablePart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the SharedStringTablePart associated with this element.</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.Packaging.SharedStringTablePart" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UniqueCount">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.UInt32Value UniqueCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.UInt32Value UniqueCount" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Spreadsheet.SharedStringTable.UniqueCount" />
      <MemberSignature Language="VB.NET" Value="Public Property UniqueCount As UInt32Value" />
      <MemberSignature Language="F#" Value="member this.UniqueCount : DocumentFormat.OpenXml.UInt32Value with get, set" Usage="DocumentFormat.OpenXml.Spreadsheet.SharedStringTable.UniqueCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "uniqueCount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.UInt32Value</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Unique String Count.Represents the following attribute in the schema: uniqueCount</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.UInt32Value" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>