<Type Name="Iterate" FullName="DocumentFormat.OpenXml.Presentation.Iterate">
  <TypeSignature Language="C#" Value="public class Iterate : DocumentFormat.OpenXml.OpenXmlCompositeElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Iterate extends DocumentFormat.OpenXml.OpenXmlCompositeElement" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Presentation.Iterate" />
  <TypeSignature Language="VB.NET" Value="Public Class Iterate&#xA;Inherits OpenXmlCompositeElement" />
  <TypeSignature Language="F#" Value="type Iterate = class&#xA;    inherit OpenXmlCompositeElement" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.OpenXmlCompositeElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Presentation.TimeAbsolute))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Presentation.TimePercentage))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines the Iterate Class. When the object is serialized out as xml, its qualified name is p:iterate.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 **iterate (Iterate)**  
  
 This element specifies how the animation should be successively applied to sub elements of the target element for a repeated effect. It can be applied to contained timing and animation structures over the letters, words, or shapes within a target element.  
  
 [*Example*:  Consider a text animation where the words appear letter by letter. The \<iterate> element should be used as follows:  
  
```xml  
<p:par>  
  <p:cTn id="1" >  
    <p:stCondLst>  
 … </p:stCondLst>  
    <p:iterate type="lt">  
      <p:tmPct val="10000"/>  
    </p:iterate>  
    <p:childTnLst>  
 … </p:childTnLst>  
  </p:cTn>  
</p:par>  
```  
  
 *end example*]  
  
|Parent Elements|  
|---------------------|  
|cTn (§19.5.33)|  
  
|Child Elements|Subclause|  
|--------------------|---------------|  
|tmAbs (Time Absolute)|§19.5.82|  
|tmPct (Time Percentage)|§19.5.83|  
  
|Attributes|Description|  
|----------------|-----------------|  
|backwards (Backwards)|This attribute specifies whether to go backwards in the timeline to the previous node.<br /><br /> The possible values for this attribute are defined by the W3C XML Schema *boolean* datatype.|  
|type (Iterate Type)|This attribute specifies the iteration behavior and applies it to each letter, word or shape within a container element.<br /><br /> Values are by word, by letter, or by element. If there is no text or block elements such as shapes within the container or a single word, letter, or shape (depending on iterate type) then no iteration happens and the behavior is applied to the element itself instead.<br /><br /> The possible values for this attribute are defined by the *ST_IterateType* simple type (§19.7.4).|  
  
 [*Note*: The W3C XML Schema definition of this element’s content model (CT_TLIterateData) is located in §A.3. *end note*]  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlcopyrightiso.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Iterate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Presentation.Iterate.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the Iterate class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Iterate (params DocumentFormat.OpenXml.OpenXmlElement[] childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class DocumentFormat.OpenXml.OpenXmlElement[] childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Presentation.Iterate.#ctor(DocumentFormat.OpenXml.OpenXmlElement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray childElements As OpenXmlElement())" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Presentation.Iterate : DocumentFormat.OpenXml.OpenXmlElement[] -&gt; DocumentFormat.OpenXml.Presentation.Iterate" Usage="new DocumentFormat.OpenXml.Presentation.Iterate childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="DocumentFormat.OpenXml.OpenXmlElement[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the Iterate class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Iterate (System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt; childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Presentation.Iterate.#ctor(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (childElements As IEnumerable(Of OpenXmlElement))" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Presentation.Iterate : seq&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; -&gt; DocumentFormat.OpenXml.Presentation.Iterate" Usage="new DocumentFormat.OpenXml.Presentation.Iterate childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" />
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the Iterate class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Iterate (string outerXml);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string outerXml) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Presentation.Iterate.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (outerXml As String)" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Presentation.Iterate : string -&gt; DocumentFormat.OpenXml.Presentation.Iterate" Usage="new DocumentFormat.OpenXml.Presentation.Iterate outerXml" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="outerXml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outerXml">Specifies the outer XML of the element.</param>
        <summary>Initializes a new instance of the Iterate class from outer XML.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Backwards">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.BooleanValue Backwards { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.BooleanValue Backwards" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Presentation.Iterate.Backwards" />
      <MemberSignature Language="VB.NET" Value="Public Property Backwards As BooleanValue" />
      <MemberSignature Language="F#" Value="member this.Backwards : DocumentFormat.OpenXml.BooleanValue with get, set" Usage="DocumentFormat.OpenXml.Presentation.Iterate.Backwards" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "backwards")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.BooleanValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Backwards.Represents the following attribute in the schema: backwards</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.BooleanValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 This attribute specifies whether to go backwards in the timeline to the previous node.  
  
 The possible values for this attribute are defined by the XML Schema `boolean` datatype.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Presentation.Iterate.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="iterate.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Presentation.Iterate.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.Presentation.Iterate.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeAbsolute">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Presentation.TimeAbsolute TimeAbsolute { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.Presentation.TimeAbsolute TimeAbsolute" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Presentation.Iterate.TimeAbsolute" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeAbsolute As TimeAbsolute" />
      <MemberSignature Language="F#" Value="member this.TimeAbsolute : DocumentFormat.OpenXml.Presentation.TimeAbsolute with get, set" Usage="DocumentFormat.OpenXml.Presentation.Iterate.TimeAbsolute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Presentation.TimeAbsolute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Time Absolute. Represents the following element tag in the schema: p:tmAbs</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.Presentation.TimeAbsolute" />.</value>
        <remarks>To be added.</remarks>
        <remark>
            xmlns:p = http://schemas.openxmlformats.org/presentationml/2006/main
            </remark>
      </Docs>
    </Member>
    <Member MemberName="TimePercentage">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Presentation.TimePercentage TimePercentage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.Presentation.TimePercentage TimePercentage" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Presentation.Iterate.TimePercentage" />
      <MemberSignature Language="VB.NET" Value="Public Property TimePercentage As TimePercentage" />
      <MemberSignature Language="F#" Value="member this.TimePercentage : DocumentFormat.OpenXml.Presentation.TimePercentage with get, set" Usage="DocumentFormat.OpenXml.Presentation.Iterate.TimePercentage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Presentation.TimePercentage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Time Percentage. Represents the following element tag in the schema: p:tmPct</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.Presentation.TimePercentage" />.</value>
        <remarks>To be added.</remarks>
        <remark>
            xmlns:p = http://schemas.openxmlformats.org/presentationml/2006/main
            </remark>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Presentation.IterateValues&gt; Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.EnumValue`1&lt;valuetype DocumentFormat.OpenXml.Presentation.IterateValues&gt; Type" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Presentation.Iterate.Type" />
      <MemberSignature Language="VB.NET" Value="Public Property Type As EnumValue(Of IterateValues)" />
      <MemberSignature Language="F#" Value="member this.Type : DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Presentation.IterateValues&gt; with get, set" Usage="DocumentFormat.OpenXml.Presentation.Iterate.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "type")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Presentation.IterateValues&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Iterate Type.Represents the following attribute in the schema: type</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.EnumValue`1" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 This attribute specifies the iteration behavior and applies it to each letter, word or shape within a container element.  
  
 Valid values are by word, by letter, or by element. If there is no text or block elements such as shapes within the container or a single word, letter, or shape (depending on iterate type) then no iteration will happen and the behavior is applied to the element itself instead.  
  
 The possible values for this attribute are defined by the `ST_IterateType` simple type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>