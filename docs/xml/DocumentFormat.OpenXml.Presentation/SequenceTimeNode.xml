<Type Name="SequenceTimeNode" FullName="DocumentFormat.OpenXml.Presentation.SequenceTimeNode">
  <TypeSignature Language="C#" Value="public class SequenceTimeNode : DocumentFormat.OpenXml.OpenXmlCompositeElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SequenceTimeNode extends DocumentFormat.OpenXml.OpenXmlCompositeElement" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Presentation.SequenceTimeNode" />
  <TypeSignature Language="VB.NET" Value="Public Class SequenceTimeNode&#xA;Inherits OpenXmlCompositeElement" />
  <TypeSignature Language="F#" Value="type SequenceTimeNode = class&#xA;    inherit OpenXmlCompositeElement" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.OpenXmlCompositeElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Presentation.CommonTimeNode))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Presentation.PreviousConditionList))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Presentation.NextConditionList))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Sequence Time Node. When the object is serialized out as xml, its qualified name is p:seq.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 `seq (Sequence Time Node)`  
  
 This element describes the Sequence time node and it can only be activated when the one before it finishes. Conceptually it can be though of as follows:  
  
 fc8a5b32-26dc-469b-9a54-69f42a02de1c  
  
 [*Example*:  For example, suppose we have a simple animation with a blind entrance.  
  
```xml  
<p:timing>  
  <p:tnLst>  
    <p:par>  
      <p:cTn id="1" dur="indefinite" restart="never" nodeType="tmRoot">  
        <p:childTnLst>  
          <p:seq concurrent="1" nextAc="seek">  
            …  
          </p:seq>  
        </p:childTnLst>  
      </p:cTn>  
    </p:par>  
  </p:tnLst>  
</p:timing>  
```  
  
 *end example*]  
  
|Parent Elements|  
|---------------------|  
|childTnLst (§19.5.25); subTnLst (§19.5.78); tnLst (§19.5.87)|  
  
|Child Elements|Subclause|  
|--------------------|---------------|  
|cTn (Common Time Node Properties)|§19.5.33|  
|nextCondLst (Next Conditions List)|§19.5.51|  
|prevCondLst (Previous Conditions List)|§19.5.55|  
  
|Attributes|Description|  
|----------------|-----------------|  
|concurrent (Concurrent)|This attribute specifies if concurrency is enabled or disabled. By default this attribute has a value of "disabled". When the value is set to "enabled", the previous element is left enabled when advancing to the next element in a sequence instead of being ended. This is only relevant for advancing via the next condition element being triggered. The only other way to advance to the next element would be to have the current element end, which implies it is no longer concurrent.<br /><br /> The possible values for this attribute are defined by the W3C XML Schema *boolean* datatype.|  
|nextAc (Next Action)|This attribute specifies what to do when going forward in sequence. By default this attribute has a value of "none". When this is set to seek it seeks the element to a natural end time (not necessarily the actual end time).<br /><br /> The natural end position is defined as the latest non-infinite end time of the children. If a child loops forever, the end of its first loop is used as its "end time" for the purposes of this calculation.<br /><br /> Some container elements can have infinite durations due to an infinite-duration child element. The engine needs to recurse down through all infinite duration containers to calculate their natural duration in case a child might have non-infinite duration within it that needs to be taken into account.<br /><br /> The possible values for this attribute are defined by the *ST_TLNextActionType* simple type (§19.7.34).|  
|prevAc (Previous Action)|This attribute specifies what to do when going backwards in a sequence. By default it is set to "none" and nothing special is done. When the value is "skipTimed", the sequence continues to go backwards until it reaches a sequence element that was defined to begin only on the next condition element.<br /><br /> The possible values for this attribute are defined by the *ST_TLPreviousActionType* simple type (§19.7.37).|  
  
 [*Note*: The W3C XML Schema definition of this element’s content model (CT_TLTimeNodeSequence) is located in §A.3. *end note*]  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlcopyrightiso.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SequenceTimeNode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Presentation.SequenceTimeNode.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the SequenceTimeNode class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SequenceTimeNode (params DocumentFormat.OpenXml.OpenXmlElement[] childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class DocumentFormat.OpenXml.OpenXmlElement[] childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Presentation.SequenceTimeNode.#ctor(DocumentFormat.OpenXml.OpenXmlElement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray childElements As OpenXmlElement())" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Presentation.SequenceTimeNode : DocumentFormat.OpenXml.OpenXmlElement[] -&gt; DocumentFormat.OpenXml.Presentation.SequenceTimeNode" Usage="new DocumentFormat.OpenXml.Presentation.SequenceTimeNode childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="DocumentFormat.OpenXml.OpenXmlElement[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the SequenceTimeNode class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SequenceTimeNode (System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt; childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Presentation.SequenceTimeNode.#ctor(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (childElements As IEnumerable(Of OpenXmlElement))" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Presentation.SequenceTimeNode : seq&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; -&gt; DocumentFormat.OpenXml.Presentation.SequenceTimeNode" Usage="new DocumentFormat.OpenXml.Presentation.SequenceTimeNode childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" />
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the SequenceTimeNode class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SequenceTimeNode (string outerXml);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string outerXml) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Presentation.SequenceTimeNode.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (outerXml As String)" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Presentation.SequenceTimeNode : string -&gt; DocumentFormat.OpenXml.Presentation.SequenceTimeNode" Usage="new DocumentFormat.OpenXml.Presentation.SequenceTimeNode outerXml" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="outerXml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outerXml">Specifies the outer XML of the element.</param>
        <summary>Initializes a new instance of the SequenceTimeNode class from outer XML.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Presentation.SequenceTimeNode.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="sequenceTimeNode.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonTimeNode">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Presentation.CommonTimeNode CommonTimeNode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.Presentation.CommonTimeNode CommonTimeNode" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Presentation.SequenceTimeNode.CommonTimeNode" />
      <MemberSignature Language="VB.NET" Value="Public Property CommonTimeNode As CommonTimeNode" />
      <MemberSignature Language="F#" Value="member this.CommonTimeNode : DocumentFormat.OpenXml.Presentation.CommonTimeNode with get, set" Usage="DocumentFormat.OpenXml.Presentation.SequenceTimeNode.CommonTimeNode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Presentation.CommonTimeNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Common TimeNode Properties. Represents the following element tag in the schema: p:cTn</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.Presentation.CommonTimeNode" />.</value>
        <remarks>To be added.</remarks>
        <remark>
            xmlns:p = http://schemas.openxmlformats.org/presentationml/2006/main
            </remark>
      </Docs>
    </Member>
    <Member MemberName="Concurrent">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.BooleanValue Concurrent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.BooleanValue Concurrent" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Presentation.SequenceTimeNode.Concurrent" />
      <MemberSignature Language="VB.NET" Value="Public Property Concurrent As BooleanValue" />
      <MemberSignature Language="F#" Value="member this.Concurrent : DocumentFormat.OpenXml.BooleanValue with get, set" Usage="DocumentFormat.OpenXml.Presentation.SequenceTimeNode.Concurrent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "concurrent")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.BooleanValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Concurrent.Represents the following attribute in the schema: concurrent</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.BooleanValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 This attribute specifies if concurrency is enabled or disabled. By default this attribute has a value of `disabled`. When the value is set to `enabled`, the previous element is left enabled when advancing to the next element in a sequence instead of being ended. This is only relevant for advancing via the next condition element being triggered. The only other way to advance to the next element would be to have the current element end, which implies it is no longer concurrent.  
  
 The possible values for this attribute are defined by the XML Schema `boolean` datatype.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Presentation.SequenceTimeNode.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.Presentation.SequenceTimeNode.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextAction">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Presentation.NextActionValues&gt; NextAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.EnumValue`1&lt;valuetype DocumentFormat.OpenXml.Presentation.NextActionValues&gt; NextAction" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Presentation.SequenceTimeNode.NextAction" />
      <MemberSignature Language="VB.NET" Value="Public Property NextAction As EnumValue(Of NextActionValues)" />
      <MemberSignature Language="F#" Value="member this.NextAction : DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Presentation.NextActionValues&gt; with get, set" Usage="DocumentFormat.OpenXml.Presentation.SequenceTimeNode.NextAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "nextAc")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Presentation.NextActionValues&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Next Action.Represents the following attribute in the schema: nextAc</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.EnumValue`1" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 This attribute specifies what to do when going forward in sequence. By default this attribute has a value of `none`. When this is set to `seek` it will seek the element to a natural end time (not necessarily the actual end time).  
  
 The natural end position is defined as the latest non-infinite end time of the children. If a child loops forever, the end of its first loop is used as its "end time" for the purposes of this calculation.  
  
 Some container elements may have infinite durations due to an infinite-duration child element. The engine needs to recurse down through all infinite duration containers to calculate their natural duration in case a child might have non-infinite duration within it that needs to be taken into account.  
  
 The possible values for this attribute are defined by the `ST_TLNextActionType` simple type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextConditionList">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Presentation.NextConditionList NextConditionList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.Presentation.NextConditionList NextConditionList" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Presentation.SequenceTimeNode.NextConditionList" />
      <MemberSignature Language="VB.NET" Value="Public Property NextConditionList As NextConditionList" />
      <MemberSignature Language="F#" Value="member this.NextConditionList : DocumentFormat.OpenXml.Presentation.NextConditionList with get, set" Usage="DocumentFormat.OpenXml.Presentation.SequenceTimeNode.NextConditionList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Presentation.NextConditionList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Next Conditions List. Represents the following element tag in the schema: p:nextCondLst</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.Presentation.NextConditionList" />.</value>
        <remarks>To be added.</remarks>
        <remark>
            xmlns:p = http://schemas.openxmlformats.org/presentationml/2006/main
            </remark>
      </Docs>
    </Member>
    <Member MemberName="PreviousAction">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Presentation.PreviousActionValues&gt; PreviousAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.EnumValue`1&lt;valuetype DocumentFormat.OpenXml.Presentation.PreviousActionValues&gt; PreviousAction" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Presentation.SequenceTimeNode.PreviousAction" />
      <MemberSignature Language="VB.NET" Value="Public Property PreviousAction As EnumValue(Of PreviousActionValues)" />
      <MemberSignature Language="F#" Value="member this.PreviousAction : DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Presentation.PreviousActionValues&gt; with get, set" Usage="DocumentFormat.OpenXml.Presentation.SequenceTimeNode.PreviousAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "prevAc")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Presentation.PreviousActionValues&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Previous Action.Represents the following attribute in the schema: prevAc</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.EnumValue`1" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 This attribute specifies what to do when going backwards in a sequence. By default it is set to `none` and nothing special is done. When the value is `skipTimed`, the sequence will continue to go backwards until it reaches a sequence element that was defined to begin only on the next condition element.  
  
 The possible values for this attribute are defined by the `ST_TLPreviousActionType` simple type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviousConditionList">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Presentation.PreviousConditionList PreviousConditionList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.Presentation.PreviousConditionList PreviousConditionList" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Presentation.SequenceTimeNode.PreviousConditionList" />
      <MemberSignature Language="VB.NET" Value="Public Property PreviousConditionList As PreviousConditionList" />
      <MemberSignature Language="F#" Value="member this.PreviousConditionList : DocumentFormat.OpenXml.Presentation.PreviousConditionList with get, set" Usage="DocumentFormat.OpenXml.Presentation.SequenceTimeNode.PreviousConditionList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Presentation.PreviousConditionList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Previous Conditions List. Represents the following element tag in the schema: p:prevCondLst</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.Presentation.PreviousConditionList" />.</value>
        <remarks>To be added.</remarks>
        <remark>
            xmlns:p = http://schemas.openxmlformats.org/presentationml/2006/main
            </remark>
      </Docs>
    </Member>
  </Members>
</Type>