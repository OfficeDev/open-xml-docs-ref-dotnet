<Type Name="OpenXmlPartContainer" FullName="DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer">
  <TypeSignature Language="C#" Value="public abstract class OpenXmlPartContainer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit OpenXmlPartContainer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class OpenXmlPartContainer" />
  <TypeSignature Language="F#" Value="type OpenXmlPartContainer = class" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Defines the base class for OpenXmlPackage and OpenXmlPart.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OpenXmlPartContainer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes OpenXmlPartContainer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAnnotation">
      <MemberSignature Language="C#" Value="public void AddAnnotation (object annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAnnotation(object annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddAnnotation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAnnotation (annotation As Object)" />
      <MemberSignature Language="F#" Value="member this.AddAnnotation : obj -&gt; unit" Usage="openXmlPartContainer.AddAnnotation annotation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="annotation">The annotation to add to this PartContainer</param>
        <summary>Adds an object to the annotation list of this PartContainer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddExtendedPart">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Packaging.ExtendedPart AddExtendedPart (string relationshipType, string contentType, string targetExt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class DocumentFormat.OpenXml.Packaging.ExtendedPart AddExtendedPart(string relationshipType, string contentType, string targetExt) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddExtendedPart(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddExtendedPart (relationshipType As String, contentType As String, targetExt As String) As ExtendedPart" />
      <MemberSignature Language="F#" Value="member this.AddExtendedPart : string * string * string -&gt; DocumentFormat.OpenXml.Packaging.ExtendedPart" Usage="openXmlPartContainer.AddExtendedPart (relationshipType, contentType, targetExt)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Packaging.ExtendedPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationshipType" Type="System.String" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="targetExt" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relationshipType">The relationship type of the part.</param>
        <param name="contentType">The content type of the part.</param>
        <param name="targetExt">The desired part name extension in the package.</param>
        <summary>Adds an extended part ( Application specific part ).</summary>
        <returns>The new ExtendedPart.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddExtendedPart">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Packaging.ExtendedPart AddExtendedPart (string relationshipType, string contentType, string targetExt, string rId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class DocumentFormat.OpenXml.Packaging.ExtendedPart AddExtendedPart(string relationshipType, string contentType, string targetExt, string rId) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddExtendedPart(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddExtendedPart (relationshipType As String, contentType As String, targetExt As String, rId As String) As ExtendedPart" />
      <MemberSignature Language="F#" Value="member this.AddExtendedPart : string * string * string * string -&gt; DocumentFormat.OpenXml.Packaging.ExtendedPart" Usage="openXmlPartContainer.AddExtendedPart (relationshipType, contentType, targetExt, rId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Packaging.ExtendedPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationshipType" Type="System.String" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="targetExt" Type="System.String" />
        <Parameter Name="rId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relationshipType">The relationship type of the part.</param>
        <param name="contentType">The content type of the part.</param>
        <param name="targetExt">The desired part name extension in the package.</param>
        <param name="rId">The desired relationship ID.</param>
        <summary>Adds an extended part ( Application specific part ).</summary>
        <returns>The new ExtendedPart.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddExternalRelationship">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Packaging.ExternalRelationship AddExternalRelationship (string relationshipType, Uri externalUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class DocumentFormat.OpenXml.Packaging.ExternalRelationship AddExternalRelationship(string relationshipType, class System.Uri externalUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddExternalRelationship(System.String,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddExternalRelationship (relationshipType As String, externalUri As Uri) As ExternalRelationship" />
      <MemberSignature Language="F#" Value="member this.AddExternalRelationship : string * Uri -&gt; DocumentFormat.OpenXml.Packaging.ExternalRelationship" Usage="openXmlPartContainer.AddExternalRelationship (relationshipType, externalUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Packaging.ExternalRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationshipType" Type="System.String" />
        <Parameter Name="externalUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="relationshipType">The relationship type.</param>
        <param name="externalUri">The external URI.</param>
        <summary>Adds an external relationship.             Do not add hyperlink relationships through this method. Use AddHyperlinkRelationship() instead.</summary>
        <returns>An ExternalRelationship with the relationship ID.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when "relationshipType" or the "externalUri" is null reference.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddExternalRelationship">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Packaging.ExternalRelationship AddExternalRelationship (string relationshipType, Uri externalUri, string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class DocumentFormat.OpenXml.Packaging.ExternalRelationship AddExternalRelationship(string relationshipType, class System.Uri externalUri, string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddExternalRelationship(System.String,System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddExternalRelationship (relationshipType As String, externalUri As Uri, id As String) As ExternalRelationship" />
      <MemberSignature Language="F#" Value="member this.AddExternalRelationship : string * Uri * string -&gt; DocumentFormat.OpenXml.Packaging.ExternalRelationship" Usage="openXmlPartContainer.AddExternalRelationship (relationshipType, externalUri, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Packaging.ExternalRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationshipType" Type="System.String" />
        <Parameter Name="externalUri" Type="System.Uri" />
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relationshipType">The relationship type.</param>
        <param name="externalUri">The external URI.</param>
        <param name="id">The desired relationship ID.</param>
        <summary>Adds an external relationship.             Do not add hyperlink relationships through this method. Use AddHyperlinkRelationship() instead.</summary>
        <returns>An ExternalRelationship with the relationship ID.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when "relationshipType" or the "externalUri" is null reference.</exception>
        <exception cref="T:System.InvalidOperationException">Thrown when the relatioship type is hyperlink relationship type (http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink).</exception>
      </Docs>
    </Member>
    <Member MemberName="AddHyperlinkRelationship">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Packaging.HyperlinkRelationship AddHyperlinkRelationship (Uri hyperlinkUri, bool isExternal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class DocumentFormat.OpenXml.Packaging.HyperlinkRelationship AddHyperlinkRelationship(class System.Uri hyperlinkUri, bool isExternal) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddHyperlinkRelationship(System.Uri,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHyperlinkRelationship (hyperlinkUri As Uri, isExternal As Boolean) As HyperlinkRelationship" />
      <MemberSignature Language="F#" Value="member this.AddHyperlinkRelationship : Uri * bool -&gt; DocumentFormat.OpenXml.Packaging.HyperlinkRelationship" Usage="openXmlPartContainer.AddHyperlinkRelationship (hyperlinkUri, isExternal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Packaging.HyperlinkRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hyperlinkUri" Type="System.Uri" />
        <Parameter Name="isExternal" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hyperlinkUri">The URI of the hyperlink.</param>
        <param name="isExternal">Is the hyperlink external to the <see cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackage" />.</param>
        <summary>Adds a new hyperlink relationship.</summary>
        <returns>An HyperlinkRelationship with the relationship ID.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when "hyperlinkUri" is null reference.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddHyperlinkRelationship">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Packaging.HyperlinkRelationship AddHyperlinkRelationship (Uri hyperlinkUri, bool isExternal, string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class DocumentFormat.OpenXml.Packaging.HyperlinkRelationship AddHyperlinkRelationship(class System.Uri hyperlinkUri, bool isExternal, string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddHyperlinkRelationship(System.Uri,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHyperlinkRelationship (hyperlinkUri As Uri, isExternal As Boolean, id As String) As HyperlinkRelationship" />
      <MemberSignature Language="F#" Value="member this.AddHyperlinkRelationship : Uri * bool * string -&gt; DocumentFormat.OpenXml.Packaging.HyperlinkRelationship" Usage="openXmlPartContainer.AddHyperlinkRelationship (hyperlinkUri, isExternal, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Packaging.HyperlinkRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hyperlinkUri" Type="System.Uri" />
        <Parameter Name="isExternal" Type="System.Boolean" />
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hyperlinkUri">The URI of the hyperlink.</param>
        <param name="isExternal">Is the hyperlink external to the <see cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackage" />.</param>
        <param name="id">The desired relationship ID.</param>
        <summary>Adds a new hyperlink relationship.</summary>
        <returns>An HyperlinkRelationship with the relationship ID.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when "hyperlinkUri" or "id" is null reference.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddNewPart&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T AddNewPart&lt;T&gt; () where T : DocumentFormat.OpenXml.Packaging.OpenXmlPart, DocumentFormat.OpenXml.Packaging.IFixedContentTypePart;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T AddNewPart&lt;(class DocumentFormat.OpenXml.Packaging.OpenXmlPart, class DocumentFormat.OpenXml.Packaging.IFixedContentTypePart) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddNewPart``1" />
      <MemberSignature Language="VB.NET" Value="Public Function AddNewPart(Of T As {OpenXmlPart, IFixedContentTypePart}) () As T" />
      <MemberSignature Language="F#" Value="member this.AddNewPart : unit -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.Packaging.OpenXmlPart and 'T :&gt; DocumentFormat.OpenXml.Packaging.IFixedContentTypePart)" Usage="openXmlPartContainer.AddNewPart " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.Packaging.OpenXmlPart</BaseTypeName>
            <InterfaceName>DocumentFormat.OpenXml.Packaging.IFixedContentTypePart</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The class of the part.</typeparam>
        <summary>Adds a new part of type T.</summary>
        <returns>The added part.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackageException">When the part is not allowed to be referenced by this part.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddNewPart&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T AddNewPart&lt;T&gt; (string id) where T : DocumentFormat.OpenXml.Packaging.OpenXmlPart, DocumentFormat.OpenXml.Packaging.IFixedContentTypePart;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T AddNewPart&lt;(class DocumentFormat.OpenXml.Packaging.OpenXmlPart, class DocumentFormat.OpenXml.Packaging.IFixedContentTypePart) T&gt;(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddNewPart``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddNewPart(Of T As {OpenXmlPart, IFixedContentTypePart}) (id As String) As T" />
      <MemberSignature Language="F#" Value="member this.AddNewPart : string -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.Packaging.OpenXmlPart and 'T :&gt; DocumentFormat.OpenXml.Packaging.IFixedContentTypePart)" Usage="openXmlPartContainer.AddNewPart id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.Packaging.OpenXmlPart</BaseTypeName>
            <InterfaceName>DocumentFormat.OpenXml.Packaging.IFixedContentTypePart</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The class of the part.</typeparam>
        <param name="id">The relationship id.</param>
        <summary>Adds a new part of type T.</summary>
        <returns>The added part.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackageException">When the part is not allowed to be referenced by this part.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddNewPart&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual T AddNewPart&lt;T&gt; (string contentType, string id) where T : DocumentFormat.OpenXml.Packaging.OpenXmlPart;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!T AddNewPart&lt;(class DocumentFormat.OpenXml.Packaging.OpenXmlPart) T&gt;(string contentType, string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddNewPart``1(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddNewPart(Of T As OpenXmlPart) (contentType As String, id As String) As T" />
      <MemberSignature Language="F#" Value="abstract member AddNewPart : string * string -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.Packaging.OpenXmlPart)&#xA;override this.AddNewPart : string * string -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.Packaging.OpenXmlPart)" Usage="openXmlPartContainer.AddNewPart (contentType, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.Packaging.OpenXmlPart</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The class of the part.</typeparam>
        <param name="contentType">The content type of the part. Must match the defined content type if the part is fixed content type.</param>
        <param name="id">The relationship id. The id will be automaticly generated if this param is null.</param>
        <summary>Adds a new part of type T.</summary>
        <returns>The added part.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mainly used for adding not-fixed content type part - ImagePart, VideoPart, AudioPart, etc  
  
 ]]></format>
        </remarks>
        <exception cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackageException">When the part is not allowed to be referenced by this part.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">When the part is fixed content type and the passed in contentType does not match the defined content type.</exception>
        <exception cref="T:System.ArgumentNullException">Thrown when "contentType" is null reference.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddPart&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual T AddPart&lt;T&gt; (T part) where T : DocumentFormat.OpenXml.Packaging.OpenXmlPart;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!T AddPart&lt;(class DocumentFormat.OpenXml.Packaging.OpenXmlPart) T&gt;(!!T part) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddPart``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddPart(Of T As OpenXmlPart) (part As T) As T" />
      <MemberSignature Language="F#" Value="abstract member AddPart : 'T -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.Packaging.OpenXmlPart)&#xA;override this.AddPart : 'T -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.Packaging.OpenXmlPart)" Usage="openXmlPartContainer.AddPart part" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.Packaging.OpenXmlPart</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="part" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">Derived class from OpenXmlPart.</typeparam>
        <param name="part">The part to be added to the document.</param>
        <summary>Adds the part to the document.             Must use the returned part to operate on the part added to the document.</summary>
        <returns>The part added to the document. This is different from the passed in part.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when "part" is null reference.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the part is not allowed to be added.</exception>
        <exception cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackageException">Thrown when one instance of the same type part already exists and multiple instances of that type are not allowed.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddPart&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual T AddPart&lt;T&gt; (T part, string id) where T : DocumentFormat.OpenXml.Packaging.OpenXmlPart;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!T AddPart&lt;(class DocumentFormat.OpenXml.Packaging.OpenXmlPart) T&gt;(!!T part, string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.AddPart``1(``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddPart(Of T As OpenXmlPart) (part As T, id As String) As T" />
      <MemberSignature Language="F#" Value="abstract member AddPart : 'T * string -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.Packaging.OpenXmlPart)&#xA;override this.AddPart : 'T * string -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.Packaging.OpenXmlPart)" Usage="openXmlPartContainer.AddPart (part, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.Packaging.OpenXmlPart</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="part" Type="T" />
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Derived class from OpenXmlPart.</typeparam>
        <param name="part">The part to be added to the document.</param>
        <param name="id">A unique relationship identifier.</param>
        <summary>Adds the part to the document with a given relationship identifier (ID).             Must use the returned part to operate on the part added to the document</summary>
        <returns>The part added to the document. This is different from the passed in part.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when "part" or the "id" is null reference.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the part is not allowed to be added.</exception>
        <exception cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackageException">Thrown when one instance of same type part already exists and multiple instances of that type are not allowed.</exception>
      </Docs>
    </Member>
    <Member MemberName="Annotation">
      <MemberSignature Language="C#" Value="public object Annotation (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Annotation(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.Annotation(System.Type)" />
      <MemberSignature Language="F#" Value="member this.Annotation : Type -&gt; obj" Usage="openXmlPartContainer.Annotation type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The type of the annotation to retrieve</param>
        <summary>Get the first annotation object of the specified type from this PartContainer.</summary>
        <returns>The first annotation object of the specified type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Annotation&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Annotation&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Annotation&lt;class T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.Annotation``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Annotation(Of T As Class) () As T" />
      <MemberSignature Language="F#" Value="member this.Annotation : unit -&gt; 'T (requires 'T : null)" Usage="openXmlPartContainer.Annotation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type of the annotation to retrieve.</typeparam>
        <summary>Get the first annotation object of the specified type from this PartContainer.</summary>
        <returns>The first annotation object of the specified type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Annotations">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;object&gt; Annotations (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;object&gt; Annotations(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.Annotations(System.Type)" />
      <MemberSignature Language="F#" Value="member this.Annotations : Type -&gt; seq&lt;obj&gt;" Usage="openXmlPartContainer.Annotations type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer/&lt;Annotations&gt;d__52))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The Type of the annotations to retrieve.</param>
        <summary>Gets a collection of annotations of the specified type for this PartContainer.</summary>
        <returns>An IEnumerable(T) of object that contains the annotations for this PartContainer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Annotations&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; Annotations&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; Annotations&lt;class T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.Annotations``1" />
      <MemberSignature Language="VB.NET" Value="Public Iterator Function Annotations(Of T As Class) () As IEnumerable(Of T)" />
      <MemberSignature Language="F#" Value="member this.Annotations : unit -&gt; seq&lt;'T (requires 'T : null)&gt; (requires 'T : null)" Usage="openXmlPartContainer.Annotations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer/&lt;Annotations&gt;d__51`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type of the annotations to retrieve.</typeparam>
        <summary>Gets a collection of annotations of the specified type for this PartContainer.</summary>
        <returns>An IEnumerable(T) of object that contains the annotations for this PartContainer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeIdOfPart">
      <MemberSignature Language="C#" Value="public string ChangeIdOfPart (DocumentFormat.OpenXml.Packaging.OpenXmlPart part, string newRelationshipId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ChangeIdOfPart(class DocumentFormat.OpenXml.Packaging.OpenXmlPart part, string newRelationshipId) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.ChangeIdOfPart(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChangeIdOfPart (part As OpenXmlPart, newRelationshipId As String) As String" />
      <MemberSignature Language="F#" Value="member this.ChangeIdOfPart : DocumentFormat.OpenXml.Packaging.OpenXmlPart * string -&gt; string" Usage="openXmlPartContainer.ChangeIdOfPart (part, newRelationshipId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="part" Type="DocumentFormat.OpenXml.Packaging.OpenXmlPart" />
        <Parameter Name="newRelationshipId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="part">The target part.</param>
        <param name="newRelationshipId">The new relationship ID of the part.</param>
        <summary>Changes the relationship ID of the part.</summary>
        <returns>The old relationship ID of the part.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Throw when "part" is null reference or the newRelationshipId is null reference.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the part does not exist under this part.</exception>
        <exception cref="T:System.ArgumentException">Thrown when the specified relationship id is already used by another part.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateRelationshipToPart">
      <MemberSignature Language="C#" Value="public string CreateRelationshipToPart (DocumentFormat.OpenXml.Packaging.OpenXmlPart targetPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string CreateRelationshipToPart(class DocumentFormat.OpenXml.Packaging.OpenXmlPart targetPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.CreateRelationshipToPart(DocumentFormat.OpenXml.Packaging.OpenXmlPart)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateRelationshipToPart (targetPart As OpenXmlPart) As String" />
      <MemberSignature Language="F#" Value="member this.CreateRelationshipToPart : DocumentFormat.OpenXml.Packaging.OpenXmlPart -&gt; string" Usage="openXmlPartContainer.CreateRelationshipToPart targetPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetPart" Type="DocumentFormat.OpenXml.Packaging.OpenXmlPart" />
      </Parameters>
      <Docs>
        <param name="targetPart">The part to add relationship for.</param>
        <summary>Adds a relationship for the specified part to this part.</summary>
        <returns>A unique relationship identifier.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when "part" or the "id" is null reference.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the part is no allowed to be added.</exception>
        <exception cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackageException">Thrown when one instance of same type part already exists and multiple instance of that type is not allowed.</exception>
        <exception cref="T:System.InvalidOperationException">Thrown when the <paramref name="targetPart" /> and this part are not in the same OpenXmlPackage.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateRelationshipToPart">
      <MemberSignature Language="C#" Value="public string CreateRelationshipToPart (DocumentFormat.OpenXml.Packaging.OpenXmlPart targetPart, string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string CreateRelationshipToPart(class DocumentFormat.OpenXml.Packaging.OpenXmlPart targetPart, string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.CreateRelationshipToPart(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateRelationshipToPart (targetPart As OpenXmlPart, id As String) As String" />
      <MemberSignature Language="F#" Value="member this.CreateRelationshipToPart : DocumentFormat.OpenXml.Packaging.OpenXmlPart * string -&gt; string" Usage="openXmlPartContainer.CreateRelationshipToPart (targetPart, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetPart" Type="DocumentFormat.OpenXml.Packaging.OpenXmlPart" />
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetPart">The part to add relationship for.</param>
        <param name="id">A unique relationship identifier.</param>
        <summary>Adds a relationship for the specified part to this part.</summary>
        <returns>A unique relationship identifier.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when "part" or the "id" is null reference.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the part is no allowed to be added.</exception>
        <exception cref="T:DocumentFormat.OpenXml.Packaging.OpenXmlPackageException">Thrown when one instance of same type part already exists and multiple instance of that type is not allowed.</exception>
        <exception cref="T:System.InvalidOperationException">Thrown when the <paramref name="targetPart" /> and this part are not in the same OpenXmlPackage.</exception>
      </Docs>
    </Member>
    <Member MemberName="DataPartReferenceRelationships">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.Packaging.DataPartReferenceRelationship&gt; DataPartReferenceRelationships { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.Packaging.DataPartReferenceRelationship&gt; DataPartReferenceRelationships" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.DataPartReferenceRelationships" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataPartReferenceRelationships As IEnumerable(Of DataPartReferenceRelationship)" />
      <MemberSignature Language="F#" Value="member this.DataPartReferenceRelationships : seq&lt;DocumentFormat.OpenXml.Packaging.DataPartReferenceRelationship&gt;" Usage="DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.DataPartReferenceRelationships" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.Packaging.DataPartReferenceRelationship&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Enumerates all <see cref="T:DocumentFormat.OpenXml.Packaging.DataPartReferenceRelationship" /> relationships.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteExternalRelationship">
      <MemberSignature Language="C#" Value="public void DeleteExternalRelationship (DocumentFormat.OpenXml.Packaging.ExternalRelationship externalRelationship);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteExternalRelationship(class DocumentFormat.OpenXml.Packaging.ExternalRelationship externalRelationship) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.DeleteExternalRelationship(DocumentFormat.OpenXml.Packaging.ExternalRelationship)" />
      <MemberSignature Language="F#" Value="member this.DeleteExternalRelationship : DocumentFormat.OpenXml.Packaging.ExternalRelationship -&gt; unit" Usage="openXmlPartContainer.DeleteExternalRelationship externalRelationship" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="externalRelationship" Type="DocumentFormat.OpenXml.Packaging.ExternalRelationship" />
      </Parameters>
      <Docs>
        <param name="externalRelationship">The external relationship to be deleted.</param>
        <summary>Deletes the specified external relationship.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when "externalRelationship" is null reference.</exception>
        <exception cref="T:System.InvalidOperationException">Thrown when the external relationship is not referenced by this part.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteExternalRelationship">
      <MemberSignature Language="C#" Value="public void DeleteExternalRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteExternalRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.DeleteExternalRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteExternalRelationship (id As String)" />
      <MemberSignature Language="F#" Value="member this.DeleteExternalRelationship : string -&gt; unit" Usage="openXmlPartContainer.DeleteExternalRelationship id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">The relationship ID of the ExternalRelationship.</param>
        <summary>Deletes the specified ExternalRelationship.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when the "id" parameter is null.</exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when there is no ExternalRelationship with the specified relationship ID.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeletePart">
      <MemberSignature Language="C#" Value="public bool DeletePart (DocumentFormat.OpenXml.Packaging.OpenXmlPart part);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool DeletePart(class DocumentFormat.OpenXml.Packaging.OpenXmlPart part) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.DeletePart(DocumentFormat.OpenXml.Packaging.OpenXmlPart)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeletePart (part As OpenXmlPart) As Boolean" />
      <MemberSignature Language="F#" Value="member this.DeletePart : DocumentFormat.OpenXml.Packaging.OpenXmlPart -&gt; bool" Usage="openXmlPartContainer.DeletePart part" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="part" Type="DocumentFormat.OpenXml.Packaging.OpenXmlPart" />
      </Parameters>
      <Docs>
        <param name="part">The part to be deleted.</param>
        <summary>Deletes a specified part in the package root layer.</summary>
        <returns>True if the part is successfully removed; otherwise, false. This method also returns false if the part was not found or the parameter is null.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Thrown when the part is not referenced by this part.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeletePart">
      <MemberSignature Language="C#" Value="public bool DeletePart (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool DeletePart(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.DeletePart(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeletePart (id As String) As Boolean" />
      <MemberSignature Language="F#" Value="member this.DeletePart : string -&gt; bool" Usage="openXmlPartContainer.DeletePart id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">The relationship ID of the part to be deleted.</param>
        <summary>Deletes the specified child part from this part.</summary>
        <returns>True if the part is successfully removed; otherwise, false. This method also returns false if the part was not found.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when "id" is null reference.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteParts&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void DeleteParts&lt;T&gt; (System.Collections.Generic.IEnumerable&lt;T&gt; partsToBeDeleted) where T : DocumentFormat.OpenXml.Packaging.OpenXmlPart;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteParts&lt;(class DocumentFormat.OpenXml.Packaging.OpenXmlPart) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; partsToBeDeleted) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.DeleteParts``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteParts(Of T As OpenXmlPart) (partsToBeDeleted As IEnumerable(Of T))" />
      <MemberSignature Language="F#" Value="member this.DeleteParts : seq&lt;'T (requires 'T :&gt; DocumentFormat.OpenXml.Packaging.OpenXmlPart)&gt; -&gt; unit (requires 'T :&gt; DocumentFormat.OpenXml.Packaging.OpenXmlPart)" Usage="openXmlPartContainer.DeleteParts partsToBeDeleted" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.Packaging.OpenXmlPart</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="partsToBeDeleted" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="partsToBeDeleted">The parts to be deleted.</param>
        <summary>Deletes all the parts which are in the passed in collection from the document.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when "partsToBeDeleted" is null reference.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteReferenceRelationship">
      <MemberSignature Language="C#" Value="public void DeleteReferenceRelationship (DocumentFormat.OpenXml.Packaging.ReferenceRelationship referenceRelationship);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteReferenceRelationship(class DocumentFormat.OpenXml.Packaging.ReferenceRelationship referenceRelationship) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.DeleteReferenceRelationship(DocumentFormat.OpenXml.Packaging.ReferenceRelationship)" />
      <MemberSignature Language="F#" Value="member this.DeleteReferenceRelationship : DocumentFormat.OpenXml.Packaging.ReferenceRelationship -&gt; unit" Usage="openXmlPartContainer.DeleteReferenceRelationship referenceRelationship" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="referenceRelationship" Type="DocumentFormat.OpenXml.Packaging.ReferenceRelationship" />
      </Parameters>
      <Docs>
        <param name="referenceRelationship">The reference relationship to be deleted.</param>
        <summary>Deletes the specified reference relationship.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when "referenceRelationship" is null reference.</exception>
        <exception cref="T:System.InvalidOperationException">Thrown when the reference relationship is not referenced by this part.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteReferenceRelationship">
      <MemberSignature Language="C#" Value="public void DeleteReferenceRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteReferenceRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.DeleteReferenceRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteReferenceRelationship (id As String)" />
      <MemberSignature Language="F#" Value="member this.DeleteReferenceRelationship : string -&gt; unit" Usage="openXmlPartContainer.DeleteReferenceRelationship id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">The relationship ID of the ReferenceRelationship.</param>
        <summary>Deletes the specified reference relationship.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when the "id" parameter is null.</exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when there is no ReferenceRelationship with the specified relationship ID.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExternalRelationships">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.Packaging.ExternalRelationship&gt; ExternalRelationships { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.Packaging.ExternalRelationship&gt; ExternalRelationships" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.ExternalRelationships" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExternalRelationships As IEnumerable(Of ExternalRelationship)" />
      <MemberSignature Language="F#" Value="member this.ExternalRelationships : seq&lt;DocumentFormat.OpenXml.Packaging.ExternalRelationship&gt;" Usage="DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.ExternalRelationships" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.Packaging.ExternalRelationship&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Enumerates all external relationships.             Hyperlink relationships are not included, use HyperlinkRelationship property to enumerate hyperlink relationships.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExternalRelationship">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Packaging.ExternalRelationship GetExternalRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class DocumentFormat.OpenXml.Packaging.ExternalRelationship GetExternalRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.GetExternalRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExternalRelationship (id As String) As ExternalRelationship" />
      <MemberSignature Language="F#" Value="member this.GetExternalRelationship : string -&gt; DocumentFormat.OpenXml.Packaging.ExternalRelationship" Usage="openXmlPartContainer.GetExternalRelationship id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Packaging.ExternalRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">The relationship ID of the ExternalRelationship.</param>
        <summary>Gets the specified ExternalRelationship.</summary>
        <returns>Returns the ExternalRelationship which has the relationship ID.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when the "id" parameter is null.</exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when there is no ExternalRelationship with the specified relationship ID.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetIdOfPart">
      <MemberSignature Language="C#" Value="public string GetIdOfPart (DocumentFormat.OpenXml.Packaging.OpenXmlPart part);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetIdOfPart(class DocumentFormat.OpenXml.Packaging.OpenXmlPart part) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.GetIdOfPart(DocumentFormat.OpenXml.Packaging.OpenXmlPart)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIdOfPart (part As OpenXmlPart) As String" />
      <MemberSignature Language="F#" Value="member this.GetIdOfPart : DocumentFormat.OpenXml.Packaging.OpenXmlPart -&gt; string" Usage="openXmlPartContainer.GetIdOfPart part" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="part" Type="DocumentFormat.OpenXml.Packaging.OpenXmlPart" />
      </Parameters>
      <Docs>
        <param name="part">The part.</param>
        <summary>Gets the relationship ID of the part.</summary>
        <returns>The relationship ID of the part.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when "part" is null reference.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the part does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetPartById">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Packaging.OpenXmlPart GetPartById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class DocumentFormat.OpenXml.Packaging.OpenXmlPart GetPartById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.GetPartById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPartById (id As String) As OpenXmlPart" />
      <MemberSignature Language="F#" Value="member this.GetPartById : string -&gt; DocumentFormat.OpenXml.Packaging.OpenXmlPart" Usage="openXmlPartContainer.GetPartById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Packaging.OpenXmlPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">The relationship ID of the part.</param>
        <summary>Gets the child part through the relationship ID.</summary>
        <returns>The part.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the part with the specified id does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetPartsCountOfType&lt;T&gt;">
      <MemberSignature Language="C#" Value="public int GetPartsCountOfType&lt;T&gt; () where T : DocumentFormat.OpenXml.Packaging.OpenXmlPart;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetPartsCountOfType&lt;(class DocumentFormat.OpenXml.Packaging.OpenXmlPart) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.GetPartsCountOfType``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPartsCountOfType(Of T As OpenXmlPart) () As Integer" />
      <MemberSignature Language="F#" Value="member this.GetPartsCountOfType : unit -&gt; int (requires 'T :&gt; DocumentFormat.OpenXml.Packaging.OpenXmlPart)" Usage="openXmlPartContainer.GetPartsCountOfType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.Packaging.OpenXmlPart</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type of the part.</typeparam>
        <summary>Gets the count of all parts of type T.</summary>
        <returns>The number of parts of this type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartsOfType&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; GetPartsOfType&lt;T&gt; () where T : DocumentFormat.OpenXml.Packaging.OpenXmlPart;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetPartsOfType&lt;(class DocumentFormat.OpenXml.Packaging.OpenXmlPart) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.GetPartsOfType``1" />
      <MemberSignature Language="VB.NET" Value="Public Iterator Function GetPartsOfType(Of T As OpenXmlPart) () As IEnumerable(Of T)" />
      <MemberSignature Language="F#" Value="member this.GetPartsOfType : unit -&gt; seq&lt;'T (requires 'T :&gt; DocumentFormat.OpenXml.Packaging.OpenXmlPart)&gt; (requires 'T :&gt; DocumentFormat.OpenXml.Packaging.OpenXmlPart)" Usage="openXmlPartContainer.GetPartsOfType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer/&lt;GetPartsOfType&gt;d__55`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.Packaging.OpenXmlPart</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Derived class from OpenXmlPart.</typeparam>
        <summary>Enumerates all the children parts of the specified type "T" of this part.</summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartsOfType&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void GetPartsOfType&lt;T&gt; (System.Collections.Generic.ICollection&lt;T&gt; partCollection) where T : DocumentFormat.OpenXml.Packaging.OpenXmlPart;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetPartsOfType&lt;(class DocumentFormat.OpenXml.Packaging.OpenXmlPart) T&gt;(class System.Collections.Generic.ICollection`1&lt;!!T&gt; partCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.GetPartsOfType``1(System.Collections.Generic.ICollection{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetPartsOfType(Of T As OpenXmlPart) (partCollection As ICollection(Of T))" />
      <MemberSignature Language="F#" Value="member this.GetPartsOfType : System.Collections.Generic.ICollection&lt;'T (requires 'T :&gt; DocumentFormat.OpenXml.Packaging.OpenXmlPart)&gt; -&gt; unit (requires 'T :&gt; DocumentFormat.OpenXml.Packaging.OpenXmlPart)" Usage="openXmlPartContainer.GetPartsOfType partCollection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.Packaging.OpenXmlPart</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="partCollection" Type="System.Collections.Generic.ICollection&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Derived class from OpenXmlPart.</typeparam>
        <param name="partCollection">The part collection to be filled in.</param>
        <summary>Gets all the children parts of the specified type "T" into "partCollection" of this part.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when "partCollection" is null reference.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetReferenceRelationship">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Packaging.ReferenceRelationship GetReferenceRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class DocumentFormat.OpenXml.Packaging.ReferenceRelationship GetReferenceRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.GetReferenceRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetReferenceRelationship (id As String) As ReferenceRelationship" />
      <MemberSignature Language="F#" Value="member this.GetReferenceRelationship : string -&gt; DocumentFormat.OpenXml.Packaging.ReferenceRelationship" Usage="openXmlPartContainer.GetReferenceRelationship id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Packaging.ReferenceRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">The relationship ID of the ReferenceRelationship.</param>
        <summary>Gets the specified ReferenceRelationship.</summary>
        <returns>Returns the ReferenceRelationship which has the relationship ID.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when the "id" parameter is null.</exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when there is no ReferenceRelationship with the specified relationship ID.</exception>
      </Docs>
    </Member>
    <Member MemberName="HyperlinkRelationships">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.Packaging.HyperlinkRelationship&gt; HyperlinkRelationships { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.Packaging.HyperlinkRelationship&gt; HyperlinkRelationships" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.HyperlinkRelationships" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HyperlinkRelationships As IEnumerable(Of HyperlinkRelationship)" />
      <MemberSignature Language="F#" Value="member this.HyperlinkRelationships : seq&lt;DocumentFormat.OpenXml.Packaging.HyperlinkRelationship&gt;" Usage="DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.HyperlinkRelationships" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.Packaging.HyperlinkRelationship&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Enumerates all hyperlink relationships.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parts">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.Packaging.IdPartPair&gt; Parts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.Packaging.IdPartPair&gt; Parts" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.Parts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parts As IEnumerable(Of IdPartPair)" />
      <MemberSignature Language="F#" Value="member this.Parts : seq&lt;DocumentFormat.OpenXml.Packaging.IdPartPair&gt;" Usage="DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.Parts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IteratorStateMachine(typeof(DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer/&lt;get_Parts&gt;d__31))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.Packaging.IdPartPair&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Enumerates all parts which are relationship targets of this part.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotations">
      <MemberSignature Language="C#" Value="public void RemoveAnnotations (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAnnotations(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.RemoveAnnotations(System.Type)" />
      <MemberSignature Language="F#" Value="member this.RemoveAnnotations : Type -&gt; unit" Usage="openXmlPartContainer.RemoveAnnotations type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The Type of the annotations to remove.</param>
        <summary>Removes the annotations of the specified type from this PartContainer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotations&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void RemoveAnnotations&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAnnotations&lt;class T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.RemoveAnnotations``1" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAnnotations(Of T As Class) ()" />
      <MemberSignature Language="F#" Value="member this.RemoveAnnotations : unit -&gt; unit (requires 'T : null)" Usage="openXmlPartContainer.RemoveAnnotations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The Type of the annotations to remove.</typeparam>
        <summary>Removes the annotations of the specified type from this PartContainer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThrowIfObjectDisposed">
      <MemberSignature Language="C#" Value="protected abstract void ThrowIfObjectDisposed ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ThrowIfObjectDisposed() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Packaging.OpenXmlPartContainer.ThrowIfObjectDisposed" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub ThrowIfObjectDisposed ()" />
      <MemberSignature Language="F#" Value="abstract member ThrowIfObjectDisposed : unit -&gt; unit" Usage="openXmlPartContainer.ThrowIfObjectDisposed " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Test whether the object is already disposed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>