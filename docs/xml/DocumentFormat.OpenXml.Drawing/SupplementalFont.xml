<Type Name="SupplementalFont" FullName="DocumentFormat.OpenXml.Drawing.SupplementalFont">
  <TypeSignature Language="C#" Value="public class SupplementalFont : DocumentFormat.OpenXml.OpenXmlLeafElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SupplementalFont extends DocumentFormat.OpenXml.OpenXmlLeafElement" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Drawing.SupplementalFont" />
  <TypeSignature Language="VB.NET" Value="Public Class SupplementalFont&#xA;Inherits OpenXmlLeafElement" />
  <TypeSignature Language="F#" Value="type SupplementalFont = class&#xA;    inherit OpenXmlLeafElement" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.OpenXmlLeafElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Font. When the object is serialized out as xml, its qualified name is a:font.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 **font (Font)**  
  
 This element defines a font within the styles area of DrawingML.  A font is defined by a script along with a typeface.  
  
 [*Example*:  Consider the following example of a font in DrawingML:  
  
```xml  
<font script="Thai" typeface="Cordia New"/>  
```  
  
 In this example, we see that the script 'Thai' is supposed to use the font face 'Cordia New'.  *end example*]  
  
|Parent Elements|  
|---------------------|  
|font (§20.1.4.2.13); majorFont (§20.1.4.1.24); minorFont (§20.1.4.1.25)|  
  
|Attributes|Description|  
|----------------|-----------------|  
|script (Script)|Specifies the script, or language, in which the typeface is supposed to be used.<br /><br /> The possible values for this attribute are defined by the W3C XML Schema *string* datatype.|  
|typeface (Typeface)|Specifies the font face to use.<br /><br /> The possible values for this attribute are defined by the *ST_TextTypeface* simple type (§20.1.10.81).|  
  
 [*Note*: The W3C XML Schema definition of this element’s content model (CT_SupplementalFont) is located in §A.4.1. *end note*]  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlcopyrightiso.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SupplementalFont ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Drawing.SupplementalFont.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the SupplementalFont class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Drawing.SupplementalFont.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="supplementalFont.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.SupplementalFont.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.Drawing.SupplementalFont.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Script">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.StringValue Script { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.StringValue Script" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.SupplementalFont.Script" />
      <MemberSignature Language="VB.NET" Value="Public Property Script As StringValue" />
      <MemberSignature Language="F#" Value="member this.Script : DocumentFormat.OpenXml.StringValue with get, set" Usage="DocumentFormat.OpenXml.Drawing.SupplementalFont.Script" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "script")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.StringValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Script.Represents the following attribute in the schema: script</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.StringValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies the script, or language, in which the `typeface` is supposed to be used.  
  
 The possible values for this attribute are defined by the XML Schema `string` datatype.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Typeface">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.StringValue Typeface { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.StringValue Typeface" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.SupplementalFont.Typeface" />
      <MemberSignature Language="VB.NET" Value="Public Property Typeface As StringValue" />
      <MemberSignature Language="F#" Value="member this.Typeface : DocumentFormat.OpenXml.StringValue with get, set" Usage="DocumentFormat.OpenXml.Drawing.SupplementalFont.Typeface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "typeface")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.StringValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Typeface.Represents the following attribute in the schema: typeface</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.StringValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies the font face to use.  
  
 The possible values for this attribute are defined by the `ST_TextTypeface` simple type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>