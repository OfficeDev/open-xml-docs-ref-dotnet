<Type Name="PresetTextWrap" FullName="DocumentFormat.OpenXml.Drawing.PresetTextWrap">
  <TypeSignature Language="C#" Value="public class PresetTextWrap : DocumentFormat.OpenXml.OpenXmlCompositeElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PresetTextWrap extends DocumentFormat.OpenXml.OpenXmlCompositeElement" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Drawing.PresetTextWrap" />
  <TypeSignature Language="VB.NET" Value="Public Class PresetTextWrap&#xA;Inherits OpenXmlCompositeElement" />
  <TypeSignature Language="F#" Value="type PresetTextWrap = class&#xA;    inherit OpenXmlCompositeElement" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.OpenXmlCompositeElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.AdjustValueList))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Preset Text Warp. When the object is serialized out as xml, its qualified name is a:prstTxWarp.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 `prstTxWarp (Preset Text Warp)`  
  
 This element specifies when a preset geometric shape should be used to transform a piece of text. This operation is known formally as a text warp. The generating application should be able to render all preset geometries enumerated in the ST_TextShapeType list.  
  
 [*Example*: Consider the case where the user wishes to accent a piece of text by warping it's shape. For this to occur a preset shape is chosen from the ST_TextShapeType list and applied to the entire body of text.  
  
```xml  
<p:sp>  
  <p:txBody>  
    <a:bodyPr wrap="none" rtlCol="0">  
      <a:prstTxWarp prst="textInflate">  
      </a:prstTxWarp>  
      <a:spAutoFit/>  
    </a:bodyPr>  
    <a:lstStyle/>  
    <a:p>  
…      <a:t>Sample Text</a:t>  
…    </a:p>  
  </p:txBody>  
</p:sp>  
```  
  
 8cf1df7f-8848-4e4c-a167-ed264eec5f58  
  
 The resulting text that has now had the Inflate text warp applied to it is shown above. *end example*]  
  
 Using any of the presets listed under the ST_TextShapeType list below it is possible to apply a text warp to a run of DrawingML text via the following steps.  
  
 If you look at any of the text warps in the file format you notice that each consists of two paths. This corresponds to a top path (first one specified) and a bottom path (second one specified). Now the top path and the bottom path represent the top line and base line that the text needs to be warped to. This is done in the following way:  
  
 *Compute the rectangle that the unwarped text resides in. (tightest possible rectangle around text, no white space except for “space characters”)*  
  
 *Take each of the quadratic and cubic Bezier curves that are used to calculate the original character and change their end points and control points by the following method…*  
  
 *Move a vertical line horizontally along the original text rectangle and find the horizontal percentage that a given end point or control point lives at. (.5 for the middle for instance)*  
  
 *Now do the same thing for this point vertically. Find the vertical percentage that this point lives at with the top and bottom of this text rectangle being the respective top and bottom bounds. (0.0 and 1.0 respectively)*  
  
 *Now that we have the percentages for a given point in a Bezier equation we can map that to the new point in the warped text environment.*  
  
 *Going back to the top and bottom paths specified in the file format we can take these and flatten them out to a straight arc (top and bottom might be different lengths)*  
  
 *After they are straight we can measure them both horizontally to find the same percentage point that we found within the original text rectangle. (0.5 let’s say)*  
  
 *So then we measure 50% along the top path and 50% along the bottom path, putting the paths back to their original curvy shapes.*  
  
 *Once we have these two points we can draw a line between them that serves as our vertical line in the original text rectangle [Note: This might not be truly vertical as 50% on the top does not always line up with 50% on the bottom. end note]*  
  
 *Taking this new line we then follow it from top to bottom the vertical percentage amount that we got from step 4.*  
  
 *This is then the new point that should be used in place of the old point in the original text rectangle.*  
  
 *We then continue doing these same steps for each of the end points and control points within the body of text. (is applied to a whole body of text only)*  
  
 [*Note*: Horizxontal percentages begin at 0.0 and continue to 1.0, left to right. Vertical percentages begin at 0.0 and continue to 1.0, top to bottom. *end note*]  
  
 [*Note*: Since this is a shape it does have both a shape coordinate system and a path coordinate system. *end note*]  
  
|Parent Elements|  
|---------------------|  
|bodyPr (§21.1.2.1.1)|  
  
|Child Elements|Subclause|  
|--------------------|---------------|  
|avLst (List of Shape Adjust Values)|§20.1.9.5|  
  
  [*Note*: The W3C XML Schema definition of this element’s content model (CT_PresetTextShape) is located in §A.4.1. *end note*]  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlcopyrightiso.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PresetTextWrap ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Drawing.PresetTextWrap.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the PresetTextWrap class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PresetTextWrap (params DocumentFormat.OpenXml.OpenXmlElement[] childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class DocumentFormat.OpenXml.OpenXmlElement[] childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Drawing.PresetTextWrap.#ctor(DocumentFormat.OpenXml.OpenXmlElement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray childElements As OpenXmlElement())" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Drawing.PresetTextWrap : DocumentFormat.OpenXml.OpenXmlElement[] -&gt; DocumentFormat.OpenXml.Drawing.PresetTextWrap" Usage="new DocumentFormat.OpenXml.Drawing.PresetTextWrap childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="DocumentFormat.OpenXml.OpenXmlElement[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the PresetTextWrap class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PresetTextWrap (System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt; childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Drawing.PresetTextWrap.#ctor(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (childElements As IEnumerable(Of OpenXmlElement))" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Drawing.PresetTextWrap : seq&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; -&gt; DocumentFormat.OpenXml.Drawing.PresetTextWrap" Usage="new DocumentFormat.OpenXml.Drawing.PresetTextWrap childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" />
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the PresetTextWrap class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PresetTextWrap (string outerXml);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string outerXml) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Drawing.PresetTextWrap.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (outerXml As String)" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Drawing.PresetTextWrap : string -&gt; DocumentFormat.OpenXml.Drawing.PresetTextWrap" Usage="new DocumentFormat.OpenXml.Drawing.PresetTextWrap outerXml" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="outerXml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outerXml">Specifies the outer XML of the element.</param>
        <summary>Initializes a new instance of the PresetTextWrap class from outer XML.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdjustValueList">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Drawing.AdjustValueList AdjustValueList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.Drawing.AdjustValueList AdjustValueList" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.PresetTextWrap.AdjustValueList" />
      <MemberSignature Language="VB.NET" Value="Public Property AdjustValueList As AdjustValueList" />
      <MemberSignature Language="F#" Value="member this.AdjustValueList : DocumentFormat.OpenXml.Drawing.AdjustValueList with get, set" Usage="DocumentFormat.OpenXml.Drawing.PresetTextWrap.AdjustValueList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Drawing.AdjustValueList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Adjust Value List. Represents the following element tag in the schema: a:avLst</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.Drawing.AdjustValueList" />.</value>
        <remarks>To be added.</remarks>
        <remark>
            xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
            </remark>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Drawing.PresetTextWrap.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="presetTextWrap.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.PresetTextWrap.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.Drawing.PresetTextWrap.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Preset">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Drawing.TextShapeValues&gt; Preset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.EnumValue`1&lt;valuetype DocumentFormat.OpenXml.Drawing.TextShapeValues&gt; Preset" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.PresetTextWrap.Preset" />
      <MemberSignature Language="VB.NET" Value="Public Property Preset As EnumValue(Of TextShapeValues)" />
      <MemberSignature Language="F#" Value="member this.Preset : DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Drawing.TextShapeValues&gt; with get, set" Usage="DocumentFormat.OpenXml.Drawing.PresetTextWrap.Preset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "prst")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Drawing.TextShapeValues&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Preset Warp Shape.Represents the following attribute in the schema: prst</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.EnumValue`1" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies the preset geometry that will be used for a shape warp on a piece of text. This preset can have any of the values in the enumerated list for `ST_TextShapeType`. This attribute is required in order for a text warp to be rendered.  
  
 Consider the sample DrawingML below.  
  
```  
<p:sp>  
  <p:txBody>  
    <a:bodyPr wrap="none" rtlCol="0">  
      <a:prstTxWarp prst="textInflate">  
      </a:prstTxWarp>  
      <a:spAutoFit/>  
    </a:bodyPr>  
    <a:lstStyle/>  
    <a:p>  
    …  
      <a:t>Sample Text</a:t>  
    …   
    </a:p>  
  </p:txBody>  
</p:sp>  
```  
  
 In the above example, a preset text shape geometry has been used to define the warping shape. The shape utilized here is the sun shape.  
  
 The possible values for this attribute are defined by the `ST_TextShapeType` simple type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>