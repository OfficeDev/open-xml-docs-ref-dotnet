<Type Name="BodyProperties" FullName="DocumentFormat.OpenXml.Drawing.BodyProperties">
  <TypeSignature Language="C#" Value="public class BodyProperties : DocumentFormat.OpenXml.OpenXmlCompositeElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BodyProperties extends DocumentFormat.OpenXml.OpenXmlCompositeElement" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Drawing.BodyProperties" />
  <TypeSignature Language="VB.NET" Value="Public Class BodyProperties&#xA;Inherits OpenXmlCompositeElement" />
  <TypeSignature Language="F#" Value="type BodyProperties = class&#xA;    inherit OpenXmlCompositeElement" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.OpenXmlCompositeElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.PresetTextWrap))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.NoAutoFit))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.NormalAutoFit))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.ShapeAutoFit))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Scene3DType))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Shape3DType))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.FlatText))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.ExtensionList))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines the BodyProperties Class. When the object is serialized out as xml, its qualified name is a:bodyPr.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 **bodyPr (Body Properties)**  
  
 This element defines the body properties for the text body within a shape.  
  
 [*Example*: Consider a shape with a text body that has some formatting properties associated with it. For the formatting of text body properties, the bodyPr element should be used as follows:  
  
```xml  
<p:sp>  
  …  <p:txBody>  
    <a:bodyPr>  
      (text body properties)    </a:bodyPr>  
  …  </p:txBody>  
</p:sp>  
```  
  
 *end example*]  
  
|Parent Elements|  
|---------------------|  
|lnDef (§20.1.4.1.20); rich (§21.2.2.156); spDef (§20.1.4.1.27); t (§21.4.3.8); txBody (§21.3.2.26); txBody (§20.1.2.2.40); txBody (§20.5.2.34); txBody (§19.3.1.51); txDef (§20.1.4.1.28); txPr (§21.2.2.216)|  
  
|Child Elements|Subclause|  
|--------------------|---------------|  
|extLst (Extension List)|§20.1.2.2.15|  
|flatTx (No text in 3D scene)|§20.1.5.8|  
|noAutofit (No AutoFit)|§21.1.2.1.2|  
|normAutofit (Normal AutoFit)|§21.1.2.1.3|  
|prstTxWarp (Preset Text Warp)|§20.1.9.19|  
|scene3d (3D Scene Properties)|§20.1.4.1.26|  
|sp3d (Apply 3D shape properties)|§20.1.5.12|  
|spAutoFit (Shape AutoFit)|§21.1.2.1.4|  
  
  [*Note*: The W3C XML Schema definition of this element’s content model (CT_TextBodyProperties) is located in §A.4.1. *end note*]  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlcopyrightiso.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BodyProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Drawing.BodyProperties.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the BodyProperties class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BodyProperties (params DocumentFormat.OpenXml.OpenXmlElement[] childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class DocumentFormat.OpenXml.OpenXmlElement[] childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Drawing.BodyProperties.#ctor(DocumentFormat.OpenXml.OpenXmlElement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray childElements As OpenXmlElement())" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Drawing.BodyProperties : DocumentFormat.OpenXml.OpenXmlElement[] -&gt; DocumentFormat.OpenXml.Drawing.BodyProperties" Usage="new DocumentFormat.OpenXml.Drawing.BodyProperties childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="DocumentFormat.OpenXml.OpenXmlElement[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the BodyProperties class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BodyProperties (System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt; childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Drawing.BodyProperties.#ctor(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (childElements As IEnumerable(Of OpenXmlElement))" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Drawing.BodyProperties : seq&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; -&gt; DocumentFormat.OpenXml.Drawing.BodyProperties" Usage="new DocumentFormat.OpenXml.Drawing.BodyProperties childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" />
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the BodyProperties class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BodyProperties (string outerXml);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string outerXml) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Drawing.BodyProperties.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (outerXml As String)" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Drawing.BodyProperties : string -&gt; DocumentFormat.OpenXml.Drawing.BodyProperties" Usage="new DocumentFormat.OpenXml.Drawing.BodyProperties outerXml" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="outerXml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outerXml">Specifies the outer XML of the element.</param>
        <summary>Initializes a new instance of the BodyProperties class from outer XML.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Anchor">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Drawing.TextAnchoringTypeValues&gt; Anchor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.EnumValue`1&lt;valuetype DocumentFormat.OpenXml.Drawing.TextAnchoringTypeValues&gt; Anchor" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.BodyProperties.Anchor" />
      <MemberSignature Language="VB.NET" Value="Public Property Anchor As EnumValue(Of TextAnchoringTypeValues)" />
      <MemberSignature Language="F#" Value="member this.Anchor : DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Drawing.TextAnchoringTypeValues&gt; with get, set" Usage="DocumentFormat.OpenXml.Drawing.BodyProperties.Anchor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "anchor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Drawing.TextAnchoringTypeValues&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Anchor.Represents the following attribute in the schema: anchor</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.EnumValue`1" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies the anchoring position of the `txBody` within the shape. If this attribute is omitted, then a value of `t`, meaning *top*, is implied.  
  
 Consider the following DrawingML:  
  
```  
<p:txBody>  
  <a:bodyPr anchor="ctr" … />  
  …  
</p:txBody>  
```  
  
 Here the text is vertically aligned in the center of the shape within which it is contained.  
  
 The possible values for this attribute are defined by the `ST_TextAnchoringType` simple type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnchorCenter">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.BooleanValue AnchorCenter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.BooleanValue AnchorCenter" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.BodyProperties.AnchorCenter" />
      <MemberSignature Language="VB.NET" Value="Public Property AnchorCenter As BooleanValue" />
      <MemberSignature Language="F#" Value="member this.AnchorCenter : DocumentFormat.OpenXml.BooleanValue with get, set" Usage="DocumentFormat.OpenXml.Drawing.BodyProperties.AnchorCenter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "anchorCtr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.BooleanValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Anchor Center.Represents the following attribute in the schema: anchorCtr</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.BooleanValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies the centering of the text box. The way it works fundamentally is to determine the smallest possible "bounds box" for the text and then to center that bounds box accordingly. Note that this is different than paragraph alignment, which aligns the text within the bounds box for the text. This flag is compatible with all of the different types of anchoring. If this attribute is omitted, then a value of `0`, meaning *off*, is implied.  
  
 The text within this shape has been both vertically centered with the `anchor` attribute and horizontally centered with the `anchorCtr` attribute.  
  
```  
<p:txBody>  
  <a:bodyPr anchor="ctr" anchorCtr="1" … />  
  …  
</p:txBody>  
```  
  
 The possible values for this attribute are defined by the XML Schema `boolean` data type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BottomInset">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Int32Value BottomInset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.Int32Value BottomInset" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.BodyProperties.BottomInset" />
      <MemberSignature Language="VB.NET" Value="Public Property BottomInset As Int32Value" />
      <MemberSignature Language="F#" Value="member this.BottomInset : DocumentFormat.OpenXml.Int32Value with get, set" Usage="DocumentFormat.OpenXml.Drawing.BodyProperties.BottomInset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "bIns")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Int32Value</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bottom Inset.Represents the following attribute in the schema: bIns</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.Int32Value" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies the bottom inset of the bounding rectangle. *Insets* are used just as internal margins for text boxes within shapes. If this attribute is omitted, a value of `45720`, meaning 0.05 inches, is implied.  
  
 Consider the following DrawingML:  
  
```  
<p:txBody>  
  <a:bodyPr lIns="91440" tIns="91440"   
  rIns="91440" bIns="91440" … />  
  …  
</p:txBody>  
```  
  
 The text box having the above body properties will have inset margins of `91440`, or 0.1 inches, on all four sides.  
  
 The possible values for this attribute are defined by the `ST_Coordinate32` simple type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Drawing.BodyProperties.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="bodyProperties.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnCount">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Int32Value ColumnCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.Int32Value ColumnCount" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.BodyProperties.ColumnCount" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnCount As Int32Value" />
      <MemberSignature Language="F#" Value="member this.ColumnCount : DocumentFormat.OpenXml.Int32Value with get, set" Usage="DocumentFormat.OpenXml.Drawing.BodyProperties.ColumnCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "numCol")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Int32Value</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Number of Columns.Represents the following attribute in the schema: numCol</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.Int32Value" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies the number of columns of text in the bounding rectangle. When applied to a text run this property takes the width of the bounding box for the text and divides it by the number of columns specified. These columns are then treated as overflow containers in that when the previous column has been filled with text the next column will act as the repository for additional text. When all columns have been filled and text still remains then the overflow properties set for this text body will be used and the text will be reflowed to make room for additional text. If this attribute is omitted, then a value of `1` is implied.  
  
 Consider the case where a text area would need to be split up into four separate columns. Then simply specifying one paragraph with one run of text is enough to describe four columns of text here.  
  
```  
<p:txBody>  
  <a:bodyPr numCol="4" … />  
  <a:p>  
    <a:r>  
      …  
      (Some text)  
      …  
    </a:r>  
  </a:p>  
</p:txBody>  
```  
  
 The possible values for this attribute are defined by the `ST_TextColumnCount` simple type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnSpacing">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Int32Value ColumnSpacing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.Int32Value ColumnSpacing" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.BodyProperties.ColumnSpacing" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnSpacing As Int32Value" />
      <MemberSignature Language="F#" Value="member this.ColumnSpacing : DocumentFormat.OpenXml.Int32Value with get, set" Usage="DocumentFormat.OpenXml.Drawing.BodyProperties.ColumnSpacing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "spcCol")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Int32Value</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Space Between Columns.Represents the following attribute in the schema: spcCol</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.Int32Value" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies the space between text columns in the text area. This should only apply when there is more than 1 column present. If this attribute is omitted, then a value of `0` is implied.  
  
 The possible values for this attribute are defined by the `ST_PositiveCoordinate32` simple type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompatibleLineSpacing">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.BooleanValue CompatibleLineSpacing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.BooleanValue CompatibleLineSpacing" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.BodyProperties.CompatibleLineSpacing" />
      <MemberSignature Language="VB.NET" Value="Public Property CompatibleLineSpacing As BooleanValue" />
      <MemberSignature Language="F#" Value="member this.CompatibleLineSpacing : DocumentFormat.OpenXml.BooleanValue with get, set" Usage="DocumentFormat.OpenXml.Drawing.BodyProperties.CompatibleLineSpacing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "compatLnSpc")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.BooleanValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Compatible Line Spacing.Represents the following attribute in the schema: compatLnSpc</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.BooleanValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies that the line spacing for this text body will be decided in a simplistic manner using the font scene. If this attribute is omitted, a value of `0`, meaning *false*, is implied.  
  
 The possible values for this attribute are defined by the XML Schema `boolean` data type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceAntiAlias">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.BooleanValue ForceAntiAlias { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.BooleanValue ForceAntiAlias" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.BodyProperties.ForceAntiAlias" />
      <MemberSignature Language="VB.NET" Value="Public Property ForceAntiAlias As BooleanValue" />
      <MemberSignature Language="F#" Value="member this.ForceAntiAlias : DocumentFormat.OpenXml.BooleanValue with get, set" Usage="DocumentFormat.OpenXml.Drawing.BodyProperties.ForceAntiAlias" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "forceAA")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.BooleanValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Force Anti-Alias.Represents the following attribute in the schema: forceAA</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.BooleanValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Forces the text to be rendered anti-aliased regardless of the font size. Certain fonts may appear grainy around their edges unless they are anti-aliased. Therefore this attribute allows for the specifying of which bodies of text should always be anti-aliased and which ones should not. If this attribute is omitted, then a value of `0`, meaning *off*, is implied.  
  
 The possible values for this attribute are defined by the XML Schema `boolean` data type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromWordArt">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.BooleanValue FromWordArt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.BooleanValue FromWordArt" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.BodyProperties.FromWordArt" />
      <MemberSignature Language="VB.NET" Value="Public Property FromWordArt As BooleanValue" />
      <MemberSignature Language="F#" Value="member this.FromWordArt : DocumentFormat.OpenXml.BooleanValue with get, set" Usage="DocumentFormat.OpenXml.Drawing.BodyProperties.FromWordArt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "fromWordArt")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.BooleanValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>From WordArt.Represents the following attribute in the schema: fromWordArt</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.BooleanValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies that text within this textbox is converted text from a WordArt object. This is more of a backwards compatibility attribute that is useful to the application from a tracking perspective. WordArt was the former way to apply text effects and therefore this attribute is useful in document conversion scenarios. If this attribute is omitted, then a value of `0`, meaning *off*, is implied.  
  
 Consider the following DrawingML:  
  
```  
<p:txBody>  
  <a:bodyPr wrap="none" fromWordArt="1" …   
  />  
  …  
</p:txBody>  
```  
  
 Because of the presence of the `fromWordArt` attribute the text within this shape can be mapped back to the corresponding WordArt during document conversion.  
  
 The possible values for this attribute are defined by the XML Schema `boolean` data type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalOverflow">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Drawing.TextHorizontalOverflowValues&gt; HorizontalOverflow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.EnumValue`1&lt;valuetype DocumentFormat.OpenXml.Drawing.TextHorizontalOverflowValues&gt; HorizontalOverflow" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.BodyProperties.HorizontalOverflow" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalOverflow As EnumValue(Of TextHorizontalOverflowValues)" />
      <MemberSignature Language="F#" Value="member this.HorizontalOverflow : DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Drawing.TextHorizontalOverflowValues&gt; with get, set" Usage="DocumentFormat.OpenXml.Drawing.BodyProperties.HorizontalOverflow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "horzOverflow")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Drawing.TextHorizontalOverflowValues&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Text Horizontal Overflow.Represents the following attribute in the schema: horzOverflow</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.EnumValue`1" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Determines whether the text can flow out of the bounding box horizontally. This is used to determine what will happen in the event that the text within a shape is too large for the bounding box it is contained within. If this attribute is omitted, then a value of `overflow` is implied.  
  
 Consider the case where we have multiply paragraphs within a shape and the second is greater in length and causes text to flow outside the shape. By applying the `clip` value of the `horzOverflow` attribute as a body property this overflowing text will now be cut off instead of extending beyond the bounds of the shape.  
  
```  
<p:txBody>  
  <a:bodyPr horzOverflow="clip" … />  
   …  
    <a:p>  
     …  
     (Some text)  
     …  
    </a:p>  
    <a:p>  
     …  
     (Some more text)  
     …  
    </a:p>  
</p:txBody>  
```  
  
 The possible values for this attribute are defined by the `ST_TextHorzOverflowType` simple type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftInset">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Int32Value LeftInset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.Int32Value LeftInset" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.BodyProperties.LeftInset" />
      <MemberSignature Language="VB.NET" Value="Public Property LeftInset As Int32Value" />
      <MemberSignature Language="F#" Value="member this.LeftInset : DocumentFormat.OpenXml.Int32Value with get, set" Usage="DocumentFormat.OpenXml.Drawing.BodyProperties.LeftInset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "lIns")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Int32Value</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Left Inset.Represents the following attribute in the schema: lIns</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.Int32Value" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies the left inset of the bounding rectangle. Insets are used just as internal margins for text boxes within shapes. If this attribute is omitted, then a value of `91440`, meaning 0.1 inches, is implied.  
  
 Consider the following DrawingML:  
  
```  
<p:txBody>  
  <a:bodyPr lIns="91440" tIns="91440" rIns="91440"   
    bIns="91440" … />  
  …  
</p:txBody>  
```  
  
 The text box having the above body properties will have inset margins of `91440`, or 0.1 inches, on all four sides.  
  
 The possible values for this attribute are defined by the `ST_Coordinate32` simple type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.BodyProperties.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.Drawing.BodyProperties.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresetTextWrap">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Drawing.PresetTextWrap PresetTextWrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.Drawing.PresetTextWrap PresetTextWrap" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.BodyProperties.PresetTextWrap" />
      <MemberSignature Language="VB.NET" Value="Public Property PresetTextWrap As PresetTextWrap" />
      <MemberSignature Language="F#" Value="member this.PresetTextWrap : DocumentFormat.OpenXml.Drawing.PresetTextWrap with get, set" Usage="DocumentFormat.OpenXml.Drawing.BodyProperties.PresetTextWrap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Drawing.PresetTextWrap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Preset Text Shape. Represents the following element tag in the schema: a:prstTxWarp</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <remark>
            xmlns:a = http://schemas.openxmlformats.org/drawingml/2006/main
            </remark>
      </Docs>
    </Member>
    <Member MemberName="RightInset">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Int32Value RightInset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.Int32Value RightInset" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.BodyProperties.RightInset" />
      <MemberSignature Language="VB.NET" Value="Public Property RightInset As Int32Value" />
      <MemberSignature Language="F#" Value="member this.RightInset : DocumentFormat.OpenXml.Int32Value with get, set" Usage="DocumentFormat.OpenXml.Drawing.BodyProperties.RightInset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "rIns")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Int32Value</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Right Inset.Represents the following attribute in the schema: rIns</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.Int32Value" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies the right inset of the bounding rectangle. Insets are used just as internal margins for text boxes within shapes. If this attribute is omitted, then a value of `91440`, meaning 0.1 inches, is implied.  
  
 Consider the following DrawingML:  
  
```  
<p:txBody>  
  <a:bodyPr lIns="91440" tIns="91440"   
  rIns="91440" bIns="91440" … />  
  …  
</p:txBody>  
```  
  
 The text box having the above body properties will have inset margins of `91440`, or 0.1 inches, on all four sides.  
  
 The possible values for this attribute are defined by the `ST_Coordinate32` simple type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightToLeftColumns">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.BooleanValue RightToLeftColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.BooleanValue RightToLeftColumns" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.BodyProperties.RightToLeftColumns" />
      <MemberSignature Language="VB.NET" Value="Public Property RightToLeftColumns As BooleanValue" />
      <MemberSignature Language="F#" Value="member this.RightToLeftColumns : DocumentFormat.OpenXml.BooleanValue with get, set" Usage="DocumentFormat.OpenXml.Drawing.BodyProperties.RightToLeftColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "rtlCol")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.BooleanValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Columns Right-To-Left.Represents the following attribute in the schema: rtlCol</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.BooleanValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies whether columns are used in a right-to-left or left-to-right order. The usage of this attribute only sets the column order that is used to determine which column overflow text should go to next. If this attribute is omitted, then a value of `0`, meaning *off*, is implied in which case text will start in the leftmost column and flow to the right.  
  
 This attribute in no way determines the direction of text but merely the direction in which multiple columns are used.  
  
 The possible values for this attribute are defined by the XML Schema `boolean` data type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rotation">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Int32Value Rotation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.Int32Value Rotation" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.BodyProperties.Rotation" />
      <MemberSignature Language="VB.NET" Value="Public Property Rotation As Int32Value" />
      <MemberSignature Language="F#" Value="member this.Rotation : DocumentFormat.OpenXml.Int32Value with get, set" Usage="DocumentFormat.OpenXml.Drawing.BodyProperties.Rotation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "rot")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Int32Value</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Rotation.Represents the following attribute in the schema: rot</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.Int32Value" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies the rotation that is being applied to the text within the bounding box. If it not specified, the rotation of the accompanying shape is used. If it is specified, then this is applied independently from the shape. That is the shape can have a rotation applied in addition to the text itself having a rotation applied to it. If this attribute is omitted, then a value of `0` is implied.  
  
 Consider the case where a shape has a rotation of `5400000`, meaning 90 degrees clockwise, applied to it. In addition to this, the text body itself has a rotation of `5400000`, or 90 degrees counter-clockwise, applied to it. Then the resulting shape would appear to be rotated but the text within it would appear as though it had not been rotated at all. The DrawingML specifying this would look like the following:  
  
```  
<p:sp>  
  <p:spPr>  
    <a:xfrm rot="5400000">  
      …  
    </a:xfrm>  
  </p:spPr>  
  …  
  <p:txBody>  
    <a:bodyPr rot="-5400000" … />  
    …  
    (Some text)  
    …  
  </p:txBody>  
</p:sp>  
```  
  
 The possible values for this attribute are defined by the `ST_Angle` simple type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TopInset">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Int32Value TopInset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.Int32Value TopInset" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.BodyProperties.TopInset" />
      <MemberSignature Language="VB.NET" Value="Public Property TopInset As Int32Value" />
      <MemberSignature Language="F#" Value="member this.TopInset : DocumentFormat.OpenXml.Int32Value with get, set" Usage="DocumentFormat.OpenXml.Drawing.BodyProperties.TopInset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "tIns")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Int32Value</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Top Inset.Represents the following attribute in the schema: tIns</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.Int32Value" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies the top inset of the bounding rectangle. Insets are used just as internal margins for text boxes within shapes. If this attribute is omitted, then a value of `45720`, meaning 0.05 inches, is implied.  
  
 Consider the following DrawingML:  
  
```  
<p:txBody>  
  <a:bodyPr lIns="91440" tIns="91440"   
  rIns="91440" bIns="91440" … />  
  …  
</p:txBody>  
```  
  
 The text box having the above body properties will have inset margins of `91440`, or 0.1 inches, on all four sides.  
  
 The possible values for this attribute are defined by the `ST_Coordinate32` simple type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpRight">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.BooleanValue UpRight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.BooleanValue UpRight" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.BodyProperties.UpRight" />
      <MemberSignature Language="VB.NET" Value="Public Property UpRight As BooleanValue" />
      <MemberSignature Language="F#" Value="member this.UpRight : DocumentFormat.OpenXml.BooleanValue with get, set" Usage="DocumentFormat.OpenXml.Drawing.BodyProperties.UpRight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "upright")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.BooleanValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Text Upright.Represents the following attribute in the schema: upright</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.BooleanValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies whether text should remain upright, regardless of the transform applied to it and the accompanying shape transform. If this attribute is omitted, then a value of `0`, meaning *false*, will be implied.  
  
 Consider text that has been rotated within the text body but has the `upright` flag set.  
  
```  
<p:txBody>  
  <a:bodyPr upright="1" rot="5400000" …/>  
  …  
  (Some text)  
  …  
</p:txBody>  
```  
  
 This text will appear as though no transform has been applied to it.  
  
 The possible values for this attribute are defined by the XML Schema `boolean` data type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseParagraphSpacing">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.BooleanValue UseParagraphSpacing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.BooleanValue UseParagraphSpacing" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.BodyProperties.UseParagraphSpacing" />
      <MemberSignature Language="VB.NET" Value="Public Property UseParagraphSpacing As BooleanValue" />
      <MemberSignature Language="F#" Value="member this.UseParagraphSpacing : DocumentFormat.OpenXml.BooleanValue with get, set" Usage="DocumentFormat.OpenXml.Drawing.BodyProperties.UseParagraphSpacing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "spcFirstLastPara")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.BooleanValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Paragraph Spacing.Represents the following attribute in the schema: spcFirstLastPara</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.BooleanValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies whether the before and after paragraph spacing defined by the user is to be respected. While the spacing between paragraphs is helpful, it is additionally useful to be able to set a flag as to whether this spacing is to be followed at the edges of the text body, in other words the first and last paragraphs in the text body. More precisely since this is a text body level property it should only effect the before paragraph spacing of the first paragraph and the after paragraph spacing of the last paragraph for a given text body. If this attribute is omitted, then a value of `0`, meaning *false*, is implied.  
  
 Consider the case where spacing has been defined between multiple paragraphs within a text body using the `spcBef` and `spcAft` paragraph spacing attributes. For this text body however the user would like to not have this followed for the edge paragraphs and thus we have the following DrawingML.  
  
```  
<p:txBody>  
  <a:bodyPr spcFirstLastPara="0" … />  
  …  
  <a:p>  
      <a:pPr>  
        <a:spcBef>  
        <a:spcPts val="1800"/>  
      </a:spcBef>  
      <a:spcAft>  
        <a:spcPts val="600"/>  
      </a:spcAft>  
      </a:pPr>  
    …  
    (Some text)  
    …  
  </a:p>  
  <a:p>  
      <a:pPr>  
        <a:spcBef>  
        <a:spcPts val="1800"/>  
      </a:spcBef>  
      <a:spcAft>  
        <a:spcPts val="600"/>  
      </a:spcAft>  
      </a:pPr>  
    …  
    (Some text)  
    …  
  </a:p>  
  …  
</p:txBody>  
```  
  
 The possible values for this attribute are defined by the XML Schema `boolean` data type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Vertical">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Drawing.TextVerticalValues&gt; Vertical { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.EnumValue`1&lt;valuetype DocumentFormat.OpenXml.Drawing.TextVerticalValues&gt; Vertical" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.BodyProperties.Vertical" />
      <MemberSignature Language="VB.NET" Value="Public Property Vertical As EnumValue(Of TextVerticalValues)" />
      <MemberSignature Language="F#" Value="member this.Vertical : DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Drawing.TextVerticalValues&gt; with get, set" Usage="DocumentFormat.OpenXml.Drawing.BodyProperties.Vertical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "vert")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Drawing.TextVerticalValues&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Vertical Text.Represents the following attribute in the schema: vert</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.EnumValue`1" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Determines if the text within the given text body should be displayed vertically. If this attribute is omitted, then a value of `horz`, meaning *no vertical text*, is implied.  
  
 Consider the case where the user needs to display text that appears vertical and has a right to left flow with respect to its columns.  
  
```  
<p:txBody>  
  <a:bodyPr vert="wordArtVertRtl" … />  
  …  
  <a:p>  
    …  
    <a:t>This is</a:t>  
    …  
  </a:p>  
  <a:p>  
    …  
    <a:t>some text.</a:t>  
    …  
  </a:p>  
</p:txBody>  
```  
  
 In the above sample DrawingML there are two paragraphs denoting a separation between the text otherwise which are known as either a line or paragraph break. Because `wordArtVertRtl` is used here this text will not only be displayed in a stacked manner flowing from top to bottom but also have the first paragraph be displayed to the right of the second. This is because it is both vertical text and right to left.  
  
 The possible values for this attribute are defined by the `ST_TextVerticalType` simple type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalOverflow">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Drawing.TextVerticalOverflowValues&gt; VerticalOverflow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.EnumValue`1&lt;valuetype DocumentFormat.OpenXml.Drawing.TextVerticalOverflowValues&gt; VerticalOverflow" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.BodyProperties.VerticalOverflow" />
      <MemberSignature Language="VB.NET" Value="Public Property VerticalOverflow As EnumValue(Of TextVerticalOverflowValues)" />
      <MemberSignature Language="F#" Value="member this.VerticalOverflow : DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Drawing.TextVerticalOverflowValues&gt; with get, set" Usage="DocumentFormat.OpenXml.Drawing.BodyProperties.VerticalOverflow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "vertOverflow")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Drawing.TextVerticalOverflowValues&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Text Vertical Overflow.Represents the following attribute in the schema: vertOverflow</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.EnumValue`1" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Determines whether the text can flow out of the bounding box vertically. This is used to determine what will happen in the event that the text within a shape is too large for the bounding box it is contained within. If this attribute is omitted, then a value of `overflow` is implied.  
  
 Consider the case where we have multiply paragraphs within a shape and the second causes text to flow outside the shape. By applying the `clip` value of the `vertOverflow` attribute as a body property this overflowing text will now be cut off instead of extending beyond the bounds of the shape.  
  
```  
<p:txBody>  
  <a:bodyPr vertOverflow="clip" … />  
  …  
  <a:p>  
    …  
    (Some text)  
    …  
  </a:p>  
  <a:p>  
    …  
    (Some longer text)  
    …  
  </a:p>  
</p:txBody>  
```  
  
 The possible values for this attribute are defined by the `ST_TextVertOverflowType` simple type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Wrap">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Drawing.TextWrappingValues&gt; Wrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.EnumValue`1&lt;valuetype DocumentFormat.OpenXml.Drawing.TextWrappingValues&gt; Wrap" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.BodyProperties.Wrap" />
      <MemberSignature Language="VB.NET" Value="Public Property Wrap As EnumValue(Of TextWrappingValues)" />
      <MemberSignature Language="F#" Value="member this.Wrap : DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Drawing.TextWrappingValues&gt; with get, set" Usage="DocumentFormat.OpenXml.Drawing.BodyProperties.Wrap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "wrap")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Drawing.TextWrappingValues&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Text Wrapping Type.Represents the following attribute in the schema: wrap</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.EnumValue`1" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies the wrapping options to be used for this text body. If this attribute is omitted, then a value of `square` is implied which will wrap the text using the bounding text box.  
  
 The possible values for this attribute are defined by the `ST_TextWrappingType` simple type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>