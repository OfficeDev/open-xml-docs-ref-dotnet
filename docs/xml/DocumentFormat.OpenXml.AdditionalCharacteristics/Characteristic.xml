<Type Name="Characteristic" FullName="DocumentFormat.OpenXml.AdditionalCharacteristics.Characteristic">
  <TypeSignature Language="C#" Value="public class Characteristic : DocumentFormat.OpenXml.OpenXmlLeafElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Characteristic extends DocumentFormat.OpenXml.OpenXmlLeafElement" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.AdditionalCharacteristics.Characteristic" />
  <TypeSignature Language="VB.NET" Value="Public Class Characteristic&#xA;Inherits OpenXmlLeafElement" />
  <TypeSignature Language="F#" Value="type Characteristic = class&#xA;    inherit OpenXmlLeafElement" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.OpenXmlLeafElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Single Characteristic.When the object is serialized out as xml, its qualified name is ac:characteristic.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 **characteristic (Single Characteristic)**  
  
 This element specifies a single characteristic. The type of characteristic is defined by the name attribute.  
  
 [*Example:* A producer can inform the consumer that the computations used to calculate the stored numbers in the formulas belong to a value space expressed by ranges of the binary mantissa and exponent. A consumer can optionally check those characteristics to determine whether, for example, the values should be recalculated. The XML for this would be:  
  
```xml  
<additionalCharacteristics>  
  <characteristic name='precisionMantissa' relation='gt' val='-9007199254740992'/>  
  <characteristic name='precisionMantissa' relation='lt' val='9007199254740992'/>  
  <characteristic name='precisionExponent' relation='ge' val='-1075'/>  
  <characteristic name='precisionExponent' relation='le' val='970'/>  
</additionalCharacteristics>  
```  
  
 *end example*]  
  
|Parent Elements|  
|---------------------|  
|additionalCharacteristics (§22.7.2.1)|  
  
  [*Note*: The W3C XML Schema definition of this element’s content model (CT_Characteristic) is located in §A.6.7. *end note*]  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlcopyrightiso.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Characteristic ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.AdditionalCharacteristics.Characteristic.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the Characteristic class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.AdditionalCharacteristics.Characteristic.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="characteristic.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.AdditionalCharacteristics.Characteristic.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.AdditionalCharacteristics.Characteristic.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.StringValue Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.StringValue Name" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.AdditionalCharacteristics.Characteristic.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As StringValue" />
      <MemberSignature Language="F#" Value="member this.Name : DocumentFormat.OpenXml.StringValue with get, set" Usage="DocumentFormat.OpenXml.AdditionalCharacteristics.Characteristic.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "name")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.StringValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Name of Characteristic.Represents the attribte in schema: name</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.StringValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies the name of the characteristic. There are no constraints on the value of the **name** attribute, but each name shall be associated with a specific vocabulary via the **vocabulary** attribute.  
  
 The values defined by this Standard shall be associated with a null **vocabulary** value, and are as follows:  
  
|Name Value|Property Specified|  
|----------------|------------------------|  
|`numColumns`|Number of columns supported by the spreadsheet producer|  
|`numRows`|Number of rows supported by the spreadsheet producer|  
|`functionVersion`|Version of the function specification used|  
|`precisionMantissa`|Allowed values of the mantissa of numbers within spreadsheet cells/formulas when expressed in base 2|  
|**`precisionExponent`**|Allowed values of the exponent of numbers within spreadsheet cells/formulas when expressed in base 2|  
|`numWorkbookColors`|Number of Workbook colors|  
|`numConditionalFormatConditions`|Number of condition format conditions on a workbook cell|  
|`nummaxSortLevels`|Number of level of sorting on a range or table|  
|`numAutoFilterItems`|Number of items shown in the Auto-filter dropdown|  
|`numDisplayCellChars`|Number of characters that can display in a cell|  
|`numPrintCellChars`|Number of characters per cell that Microsoft Excel can print|  
|`numUnqiueCellStyles`|Number of unique cell styles in a workbook (combinations of all cell formatting)|  
|`numFormulaLengthChars`|Length of formulas in characters|  
|`numFormulaNestingLevel`|Number of levels of formula nesting|  
|`numFunctionArguments`|Number of arguments to a function|  
|`numPivotTableRows`|Number of rows in a pivot table|  
|`numPivotTableColumns`|Number of columns in a pivot table|  
|`numUniquePivotFieldItems`|Number of unique items in a pivot field|  
|`numPivotTableMDXNameChars`|Number of characters in an MDX name for a pivot table item|  
|`numPivotTableRelationChars`|String length for a relationship pivot table|  
|`numPivotTableFieldLabelChars`|Length of field labels in PivotTable including caption length limitations|  
|`numPivotTableFields`|Number of fields in a pivot table|  
|`numSheetXRefArrayFormulas`|The number of array formulas in a worksheet that can refer to another (given) worksheet|  
  
 The possible values for this attribute are defined by the XML Schema **string** data type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Relation">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.AdditionalCharacteristics.RelationValues&gt; Relation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.EnumValue`1&lt;valuetype DocumentFormat.OpenXml.AdditionalCharacteristics.RelationValues&gt; Relation" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.AdditionalCharacteristics.Characteristic.Relation" />
      <MemberSignature Language="VB.NET" Value="Public Property Relation As EnumValue(Of RelationValues)" />
      <MemberSignature Language="F#" Value="member this.Relation : DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.AdditionalCharacteristics.RelationValues&gt; with get, set" Usage="DocumentFormat.OpenXml.AdditionalCharacteristics.Characteristic.Relation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "relation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.AdditionalCharacteristics.RelationValues&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Relationship of Value to Name.Represents the attribte in schema: relation</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.EnumValue`1" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies how the contents of the **value** attribute should be interpreted in the context of this characteristic.  
  
 The following would specify that the application supports from 0 to 10,000 columns, and that column ranges should be interpreted accordingly:  
  
```  
<additionalCharacteristics>  
  <characteristic name="numColumns" relation="le" val="10000"/>  
  <characteristic name="numColumns" relation="ge" val="0"/>  
</additionalCharacteristics>  
```  
  
 The possible values for this attribute are defined by the **ST_Relation** simple type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.StringValue Val { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.StringValue Val" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.AdditionalCharacteristics.Characteristic.Val" />
      <MemberSignature Language="VB.NET" Value="Public Property Val As StringValue" />
      <MemberSignature Language="F#" Value="member this.Val : DocumentFormat.OpenXml.StringValue with get, set" Usage="DocumentFormat.OpenXml.AdditionalCharacteristics.Characteristic.Val" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "val")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.StringValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Characteristic Value.Represents the attribte in schema: val</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.StringValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies the value of the characteristic.  
  
 The possible values for this attribute are defined by the XML Schema **string** data type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Vocabulary">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.StringValue Vocabulary { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.StringValue Vocabulary" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.AdditionalCharacteristics.Characteristic.Vocabulary" />
      <MemberSignature Language="VB.NET" Value="Public Property Vocabulary As StringValue" />
      <MemberSignature Language="F#" Value="member this.Vocabulary : DocumentFormat.OpenXml.StringValue with get, set" Usage="DocumentFormat.OpenXml.AdditionalCharacteristics.Characteristic.Vocabulary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "vocabulary")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.StringValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Characteristic Grammar.Represents the attribte in schema: vocabulary</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.StringValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies a URI defining the characteristic grammar with which the **name** attribute value shall be interpreted.  
  
 If this attribute is omitted, then the default grammar (as defined above) shall be used.  
  
 The possible values for this attribute are defined by the XML Schema **anyURI** data type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>