<Type Name="StyleDefinitionHeader" FullName="DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader">
  <TypeSignature Language="C#" Value="public class StyleDefinitionHeader : DocumentFormat.OpenXml.OpenXmlCompositeElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit StyleDefinitionHeader extends DocumentFormat.OpenXml.OpenXmlCompositeElement" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader" />
  <TypeSignature Language="VB.NET" Value="Public Class StyleDefinitionHeader&#xA;Inherits OpenXmlCompositeElement" />
  <TypeSignature Language="F#" Value="type StyleDefinitionHeader = class&#xA;    inherit OpenXmlCompositeElement" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.OpenXmlCompositeElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionTitle))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Diagrams.StyleLabelDescription))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Diagrams.StyleDisplayCategories))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Drawing.Diagrams.ExtensionList))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <para>Style Definition Header.</para>
      <para> When the object is serialized out as xml, its qualified name is dgm:styleDefHdr.</para>
    </summary>
    <remarks>
             The following table lists the possible child types:
             <list type="bullet"><item><description>StyleDefinitionTitle &lt;dgm:title&gt;</description></item><item><description>StyleLabelDescription &lt;dgm:desc&gt;</description></item><item><description>StyleDisplayCategories &lt;dgm:catLst&gt;</description></item><item><description>ExtensionList &lt;dgm:extLst&gt;</description></item></list></remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StyleDefinitionHeader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the StyleDefinitionHeader class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StyleDefinitionHeader (params DocumentFormat.OpenXml.OpenXmlElement[] childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class DocumentFormat.OpenXml.OpenXmlElement[] childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader.#ctor(DocumentFormat.OpenXml.OpenXmlElement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray childElements As OpenXmlElement())" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader : DocumentFormat.OpenXml.OpenXmlElement[] -&gt; DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader" Usage="new DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="DocumentFormat.OpenXml.OpenXmlElement[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>
            Initializes a new instance of the StyleDefinitionHeader class with the specified child elements.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StyleDefinitionHeader (System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt; childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader.#ctor(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (childElements As IEnumerable(Of OpenXmlElement))" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader : seq&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; -&gt; DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader" Usage="new DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" />
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>
            Initializes a new instance of the StyleDefinitionHeader class with the specified child elements.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StyleDefinitionHeader (string outerXml);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string outerXml) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (outerXml As String)" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader : string -&gt; DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader" Usage="new DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader outerXml" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="outerXml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outerXml">Specifies the outer XML of the element.</param>
        <summary>
            Initializes a new instance of the StyleDefinitionHeader class from outer XML.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="styleDefinitionHeader.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">True to recursively clone the subtree under the specified node; false to clone only the node itself. </param>
        <summary>
            Creates a duplicate of this node.  
            </summary>
        <returns>Returns the cloned node. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the local name of the element.
            </summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinVersion">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.StringValue MinVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.StringValue MinVersion" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader.MinVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property MinVersion As StringValue" />
      <MemberSignature Language="F#" Value="member this.MinVersion : DocumentFormat.OpenXml.StringValue with get, set" Usage="DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader.MinVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "minVer")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.StringValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para> Minimum Version.</para>
          <para>Represents the following attribute in the schema: minVer </para>
        </summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.StringValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 The minimum product version that can support this quick style.  
  
 The possible values for this attribute are defined by the XML Schema `string` data type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceId">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.Int32Value ResourceId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.Int32Value ResourceId" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader.ResourceId" />
      <MemberSignature Language="VB.NET" Value="Public Property ResourceId As Int32Value" />
      <MemberSignature Language="F#" Value="member this.ResourceId : DocumentFormat.OpenXml.Int32Value with get, set" Usage="DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader.ResourceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "resId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.Int32Value</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para> Resource ID.</para>
          <para>Represents the following attribute in the schema: resId </para>
        </summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.Int32Value" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 This attribute is the ID which associates this header to the actual style definition part.  
  
 The possible values for this attribute are defined by the XML Schema `int` data type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UniqueId">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.StringValue UniqueId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.StringValue UniqueId" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader.UniqueId" />
      <MemberSignature Language="VB.NET" Value="Public Property UniqueId As StringValue" />
      <MemberSignature Language="F#" Value="member this.UniqueId : DocumentFormat.OpenXml.StringValue with get, set" Usage="DocumentFormat.OpenXml.Drawing.Diagrams.StyleDefinitionHeader.UniqueId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "uniqueId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.StringValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para> Unique Style ID.</para>
          <para>Represents the following attribute in the schema: uniqueId </para>
        </summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.StringValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 This attribute defines a unique identifier for the associated style definition.  
  
 The possible values for this attribute are defined by the XML Schema `string` data type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>