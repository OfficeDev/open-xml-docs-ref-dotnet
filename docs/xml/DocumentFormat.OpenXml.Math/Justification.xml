<Type Name="Justification" FullName="DocumentFormat.OpenXml.Math.Justification">
  <TypeSignature Language="C#" Value="public class Justification : DocumentFormat.OpenXml.Math.OfficeMathJustificationType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Justification extends DocumentFormat.OpenXml.Math.OfficeMathJustificationType" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Math.Justification" />
  <TypeSignature Language="VB.NET" Value="Public Class Justification&#xA;Inherits OfficeMathJustificationType" />
  <TypeSignature Language="F#" Value="type Justification = class&#xA;    inherit OfficeMathJustificationType" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.Math.OfficeMathJustificationType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Justification. When the object is serialized out as xml, its qualified name is m:jc.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 **jc (Justification)**  
  
 This element specifies justification of the math paragraph (a series of adjacent instances of mathematical text within the same paragraph). A math paragraph can be Left Justified, Right Justified, Centered, or Centered as Group. If this element is omitted, the math paragraph is Centered as Group. Whether the element is absent or present without the val attribute, the default of the val attribute is *centerGroup*. This means that the instances of mathematical text can be aligned with respect to each other, but the entire group of mathematical text is centered as a whole. [*Example*: An example of Centered as Group is the following example, in which each equation is left-aligned, but the series is centered:  
  
 The XML that demonstrates jc in use is:  
  
```xml  
<m:oMathParaPr>  
  <m:jc m:val="centerGroup"/>  
</m:oMathParaPr>  
```  
  
 *end example*]  
  
|Parent Elements|  
|---------------------|  
|oMathParaPr (§22.1.2.79)|  
  
|Attributes|Description|  
|----------------|-----------------|  
|val (Value)|Specifies the default justification of mathematical text in the document. Possible values are *center*, *centerGroup*, *left*, and *right*.<br /><br /> The possible values for this attribute are defined by the *ST_Jc* simple type (§22.1.3.7).|  
  
 [*Note*: The W3C XML Schema definition of this element’s content model (CT_OMathJc) is located in §A.6.1. *end note*]  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlcopyrightiso.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Justification ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Math.Justification.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the Justification class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Math.Justification.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="justification.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Math.Justification.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.Math.Justification.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>