<Type Name="BreakBinary" FullName="DocumentFormat.OpenXml.Math.BreakBinary">
  <TypeSignature Language="C#" Value="public class BreakBinary : DocumentFormat.OpenXml.OpenXmlLeafElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BreakBinary extends DocumentFormat.OpenXml.OpenXmlLeafElement" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Math.BreakBinary" />
  <TypeSignature Language="VB.NET" Value="Public Class BreakBinary&#xA;Inherits OpenXmlLeafElement" />
  <TypeSignature Language="F#" Value="type BreakBinary = class&#xA;    inherit OpenXmlLeafElement" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.OpenXmlLeafElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Break on Binary Operators. When the object is serialized out as xml, its qualified name is m:brkBin.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 **brkBin (Break on Binary Operators)**  
  
 This element specifies how binary operators are treated when they coincide with a line break. If this element is omitted, the line break occurs before the binary operator. That is, the binary operator is the first element on the wrapped line.  
  
 Whether the element is absent or present without the val attribute, the default of the val attribute is *before*.  
  
 [*Example*: For example:  
  
 before  
  
 after  
  
 repeat  
  
 The above examples demonstrate how such an equation would look depending on the value of the brkBin document-property. These actual examples do not rely on the brkBin property of this document to maintain their configurations. This would be impossible because the brkBin property can only be set to one value for an entire document at any given time. Here we are demonstrating all three.  
  
 The XML below demonstrates brkBin in use under mathPr:  
  
```xml  
<m:mathPr>  
  <m:mathFont m:val="Cambria Math"/>  
  <m:brkBin m:val="before"/>  
  <m:brkBinSub m:val="--"/>  
  <m:smallFrac m:val="0"/>  
  <m:dispDef/>  
  <m:lMargin m:val="0"/>  
  <m:rMargin m:val="0"/>  
  <m:defJc m:val="centerGroup"/>  
  <m:wrapIndent m:val="1440"/>  
  <m:intLim m:val="subSup"/>  
  <m:naryLim m:val="undOvr"/>  
</m:mathPr>  
```  
  
 *end example*]  
  
|Parent Elements|  
|---------------------|  
|mathPr (§22.1.2.62)|  
  
|Attributes|Description|  
|----------------|-----------------|  
|val (Value)|Specifies where to break on binary operators. Possible values are *before*, *after*, and *repeat*.<br /><br /> The possible values for this attribute are defined by the *ST_BreakBin* simple type (§22.1.3.1).|  
  
 [*Note*: The W3C XML Schema definition of this element’s content model (CT_BreakBin) is located in §A.6.1. *end note*]  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlcopyrightiso.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BreakBinary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Math.BreakBinary.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the BreakBinary class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Math.BreakBinary.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="breakBinary.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Math.BreakBinary.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.Math.BreakBinary.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Math.BreakBinaryOperatorValues&gt; Val { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.EnumValue`1&lt;valuetype DocumentFormat.OpenXml.Math.BreakBinaryOperatorValues&gt; Val" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Math.BreakBinary.Val" />
      <MemberSignature Language="VB.NET" Value="Public Property Val As EnumValue(Of BreakBinaryOperatorValues)" />
      <MemberSignature Language="F#" Value="member this.Val : DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Math.BreakBinaryOperatorValues&gt; with get, set" Usage="DocumentFormat.OpenXml.Math.BreakBinary.Val" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(21, "val")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Math.BreakBinaryOperatorValues&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value.Represents the following attribute in the schema: m:val</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.EnumValue`1" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies where to break on binary operators. Possible values are `before`, `after`, and `repeat`.  
  
 The possible values for this attribute are defined by the `ST_BreakBin` simple type.  
  
 ]]></format>
        </remarks>
        <remark> xmlns:m=http://schemas.openxmlformats.org/officeDocument/2006/math
            </remark>
      </Docs>
    </Member>
  </Members>
</Type>