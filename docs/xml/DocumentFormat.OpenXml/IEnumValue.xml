<Type Name="IEnumValue" FullName="DocumentFormat.OpenXml.IEnumValue">
  <TypeSignature Language="C#" Value="public interface IEnumValue" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumValue" FrameworkAlternate="openxml-3.0.0" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.IEnumValue" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumValue" />
  <TypeSignature Language="F#" Value="type IEnumValue = interface" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IEnumValue" FrameworkAlternate="openxml-3.0.1" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml.Framework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            A definition of an OpenXml enum value
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.IEnumValue.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValid As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsValid : bool" Usage="DocumentFormat.OpenXml.IEnumValue.IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml.Framework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating whether the current value is valid.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.IEnumValue.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="DocumentFormat.OpenXml.IEnumValue.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml.Framework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the value of the enum.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.FileFormatVersions Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype DocumentFormat.OpenXml.FileFormatVersions Version" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.IEnumValue.Version" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Version As FileFormatVersions" />
      <MemberSignature Language="F#" Value="member this.Version : DocumentFormat.OpenXml.FileFormatVersions" Usage="DocumentFormat.OpenXml.IEnumValue.Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml.Framework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.FileFormatVersions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the version this type was introduced in.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
