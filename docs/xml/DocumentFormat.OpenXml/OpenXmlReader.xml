<Type Name="OpenXmlReader" FullName="DocumentFormat.OpenXml.OpenXmlReader">
  <TypeSignature Language="C#" Value="public abstract class OpenXmlReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit OpenXmlReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.OpenXmlReader" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class OpenXmlReader&#xA;Implements IDisposable" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Represents the Open XML reader class.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OpenXmlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the OpenXmlReader class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OpenXmlReader (bool readMiscNodes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(bool readMiscNodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlReader.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (readMiscNodes As Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="readMiscNodes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="readMiscNodes">Specify false to indicate to the reader to skip all miscellaneous nodes. The default value is false.</param>
        <summary>
            Initializes a new instance of the OpenXmlReader class using the supplied Boolean value.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public abstract System.Collections.ObjectModel.ReadOnlyCollection&lt;DocumentFormat.OpenXml.OpenXmlAttribute&gt; Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;valuetype DocumentFormat.OpenXml.OpenXmlAttribute&gt; Attributes" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlReader.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Attributes As ReadOnlyCollection(Of OpenXmlAttribute)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;DocumentFormat.OpenXml.OpenXmlAttribute&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the list of attributes of the current element.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public abstract void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Close ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Closes the reader.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static DocumentFormat.OpenXml.OpenXmlReader Create (DocumentFormat.OpenXml.OpenXmlElement openXmlElement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class DocumentFormat.OpenXml.OpenXmlReader Create(class DocumentFormat.OpenXml.OpenXmlElement openXmlElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlReader.Create(DocumentFormat.OpenXml.OpenXmlElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openXmlElement" Type="DocumentFormat.OpenXml.OpenXmlElement" />
      </Parameters>
      <Docs>
        <param name="openXmlElement">The OpenXmlElement to read.</param>
        <summary>
            Creates an OpenXmlReader from the OpenXmlElement (travel the DOM tree).
            </summary>
        <returns>The newly created OpenXmlReader.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static DocumentFormat.OpenXml.OpenXmlReader Create (DocumentFormat.OpenXml.Packaging.OpenXmlPart openXmlPart);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class DocumentFormat.OpenXml.OpenXmlReader Create(class DocumentFormat.OpenXml.Packaging.OpenXmlPart openXmlPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlReader.Create(DocumentFormat.OpenXml.Packaging.OpenXmlPart)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openXmlPart" Type="DocumentFormat.OpenXml.Packaging.OpenXmlPart" />
      </Parameters>
      <Docs>
        <param name="openXmlPart">The OpenXmlPart to read.</param>
        <summary>
            Creates an OpenXmlReader from the specified OpenXmlPart.
            </summary>
        <returns>The newly created OpenXmlReader.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static DocumentFormat.OpenXml.OpenXmlReader Create (System.IO.Stream partStream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class DocumentFormat.OpenXml.OpenXmlReader Create(class System.IO.Stream partStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlReader.Create(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (partStream As Stream) As OpenXmlReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="partStream">The part stream.</param>
        <summary>
            Creates an OpenXmlReader from the specified part stream.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static DocumentFormat.OpenXml.OpenXmlReader Create (DocumentFormat.OpenXml.OpenXmlElement openXmlElement, bool readMiscNodes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class DocumentFormat.OpenXml.OpenXmlReader Create(class DocumentFormat.OpenXml.OpenXmlElement openXmlElement, bool readMiscNodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlReader.Create(DocumentFormat.OpenXml.OpenXmlElement,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openXmlElement" Type="DocumentFormat.OpenXml.OpenXmlElement" />
        <Parameter Name="readMiscNodes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="openXmlElement">The OpenXmlElement to read.</param>
        <param name="readMiscNodes">Specify false to indicate to the reader to skip all miscellaneous nodes. The default value is false.</param>
        <summary>
            Creates an OpenXmlReader from the OpenXmlElement (travel the DOM tree).
            </summary>
        <returns>The newly created OpenXmlReader.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static DocumentFormat.OpenXml.OpenXmlReader Create (DocumentFormat.OpenXml.Packaging.OpenXmlPart openXmlPart, bool readMiscNodes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class DocumentFormat.OpenXml.OpenXmlReader Create(class DocumentFormat.OpenXml.Packaging.OpenXmlPart openXmlPart, bool readMiscNodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlReader.Create(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openXmlPart" Type="DocumentFormat.OpenXml.Packaging.OpenXmlPart" />
        <Parameter Name="readMiscNodes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="openXmlPart">The OpenXmlPart to read.</param>
        <param name="readMiscNodes">Specify false to indicate to the reader to skip all miscellaneous nodes. The default value is false.</param>
        <summary>
            Creates an OpenXmlReader from the specified OpenXmlPart and Boolean values.
            </summary>
        <returns>The newly created OpenXmlReader.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static DocumentFormat.OpenXml.OpenXmlReader Create (System.IO.Stream partStream, bool readMiscNodes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class DocumentFormat.OpenXml.OpenXmlReader Create(class System.IO.Stream partStream, bool readMiscNodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlReader.Create(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (partStream As Stream, readMiscNodes As Boolean) As OpenXmlReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partStream" Type="System.IO.Stream" />
        <Parameter Name="readMiscNodes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="partStream">The part stream.</param>
        <param name="readMiscNodes">Specify false to indicate to the reader to skip all miscellaneous nodes. The default value is false.</param>
        <summary>
            Creates an OpenXmlReader from the specified part stream and Boolean values.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="C#" Value="public abstract int Depth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Depth" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlReader.Depth" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Depth As Integer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the depth of the current node in the XML document. The depth of the root element is 0.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Closes the reader, and releases all resources. 
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlReader.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Specify true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        <summary>
            Closes the reader, and releases all resources. 
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementType">
      <MemberSignature Language="C#" Value="public abstract Type ElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ElementType" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlReader.ElementType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ElementType As Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the type of the corresponding strongly typed class of the current element.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public virtual string Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Encoding" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlReader.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Encoding As String" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the encoding of the XML file.
            </summary>
        <value>To be added.</value>
        <remarks>
            Returns null if the encoding is not specified in the XML file.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public abstract bool EOF { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EOF" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlReader.EOF" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property EOF As Boolean" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            When overridden in a derived class, gets a value that indicates whether the reader is positioned at the end of the stream. 
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetText">
      <MemberSignature Language="C#" Value="public abstract string GetText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetText() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlReader.GetText" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetText () As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the text of the element if the element is an OpenXmlLeafTextElement. Returns String.Empty for other elements.
            </summary>
        <returns>
            The text of the element if the element is an OpenXmlLeafTextElement. Returns String.Empty for other elements.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAttributes">
      <MemberSignature Language="C#" Value="public virtual bool HasAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAttributes" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlReader.HasAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HasAttributes As Boolean" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value that indicates whether the current node has any attributes. 
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEndElement">
      <MemberSignature Language="C#" Value="public abstract bool IsEndElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEndElement" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlReader.IsEndElement" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsEndElement As Boolean" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            When overridden in a derived class, gets a value that indicates whether the current node is an element end. 
            </summary>
        <value>To be added.</value>
        <remarks>IsStartElement and IsEndElement will be false when IsMiscNode==true.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMiscNode">
      <MemberSignature Language="C#" Value="public abstract bool IsMiscNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMiscNode" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlReader.IsMiscNode" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsMiscNode As Boolean" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            When overridden in a derived class, gets a value that indicates whether the current node is a miscellaneous XML node (non element). 
            </summary>
        <value>To be added.</value>
        <remarks>IsStartElement and IsEndElement will be false when IsMiscNode==true.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStartElement">
      <MemberSignature Language="C#" Value="public abstract bool IsStartElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStartElement" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlReader.IsStartElement" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsStartElement As Boolean" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            When overridden in a derived class, gets a value that indicates whether the current node is an element start. 
            </summary>
        <value>To be added.</value>
        <remarks>IsStartElement and IsEndElement will be false when IsMiscNode==true.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCurrentElement">
      <MemberSignature Language="C#" Value="public abstract DocumentFormat.OpenXml.OpenXmlElement LoadCurrentElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class DocumentFormat.OpenXml.OpenXmlElement LoadCurrentElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlReader.LoadCurrentElement" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function LoadCurrentElement () As OpenXmlElement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Loads the element at current cursor.
            </summary>
        <returns>The OpenXmlElement that was loaded.</returns>
        <remarks>The new current element is the end of the element after LoadCurrentElement().</remarks>
        <exception cref="T:System.InvalidOperationException">Thrown when the current is the end element.</exception>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public abstract string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlReader.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property LocalName As String" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            When overridden in a derived class, gets the local name of the current node. 
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceDeclarations">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,string&gt;&gt; NamespaceDeclarations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, string&gt;&gt; NamespaceDeclarations" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlReader.NamespaceDeclarations" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property NamespaceDeclarations As IEnumerable(Of KeyValuePair(Of String, String))" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the namespace declarations of the current element.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceUri">
      <MemberSignature Language="C#" Value="public abstract string NamespaceUri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceUri" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlReader.NamespaceUri" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property NamespaceUri As String" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            When overridden in a derived class, gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned. 
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public abstract string Prefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlReader.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Prefix As String" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            When overridden in a derived class, gets the namespace prefix associated with the current node. 
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read () As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Moves to read the next element.
            </summary>
        <returns>Returns true if the next element was read successfully; false if there are no more elements to read. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadFirstChild">
      <MemberSignature Language="C#" Value="public abstract bool ReadFirstChild ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadFirstChild() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlReader.ReadFirstChild" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReadFirstChild () As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Moves to read the first child element.
            </summary>
        <returns>Returns true if the first child element was read successfully; false if there are no child elements to read. </returns>
        <remarks>This method can only be called on element start. At the current node, the reader will move to the end tag if there is no child element.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadMiscNodes">
      <MemberSignature Language="C#" Value="public bool ReadMiscNodes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadMiscNodes" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlReader.ReadMiscNodes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReadMiscNodes As Boolean" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value that indicates whether the OpenXmlReader will read or skip all miscellaneous nodes.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadNextSibling">
      <MemberSignature Language="C#" Value="public abstract bool ReadNextSibling ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadNextSibling() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlReader.ReadNextSibling" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReadNextSibling () As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Moves to read the next sibling element.
            </summary>
        <returns>Returns true if the next sibling element was read successfully; false if there are no more sibling elements to read. </returns>
        <remarks>At the current node, the reader will move to the end tag of the parent node if there are no more sibling elements.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public abstract void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Skip ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Skips the child elements of the current node. 
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StandaloneXml">
      <MemberSignature Language="C#" Value="public virtual Nullable&lt;bool&gt; StandaloneXml { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; StandaloneXml" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlReader.StandaloneXml" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StandaloneXml As Nullable(Of Boolean)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the standalone property in the XML declaration of the XML stream. The default value is null.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThrowIfObjectDisposed">
      <MemberSignature Language="C#" Value="protected virtual void ThrowIfObjectDisposed ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ThrowIfObjectDisposed() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlReader.ThrowIfObjectDisposed" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ThrowIfObjectDisposed ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Thrown if the object is disposed.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>