<Type Name="OpenXmlUnknownElement" FullName="DocumentFormat.OpenXml.OpenXmlUnknownElement">
  <TypeSignature Language="C#" Value="public class OpenXmlUnknownElement : DocumentFormat.OpenXml.OpenXmlCompositeElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OpenXmlUnknownElement extends DocumentFormat.OpenXml.OpenXmlCompositeElement" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.OpenXmlUnknownElement" />
  <TypeSignature Language="VB.NET" Value="Public Class OpenXmlUnknownElement&#xA;Inherits OpenXmlCompositeElement" />
  <TypeSignature Language="F#" Value="type OpenXmlUnknownElement = class&#xA;    inherit OpenXmlCompositeElement" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.OpenXmlCompositeElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents elements that are not defined in the Ecma Office Open XML.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal OpenXmlUnknownElement ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlUnknownElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>OpenXmlUnknownElement constructor</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OpenXmlUnknownElement (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlUnknownElement.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.OpenXmlUnknownElement : string -&gt; DocumentFormat.OpenXml.OpenXmlUnknownElement" Usage="new DocumentFormat.OpenXml.OpenXmlUnknownElement name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Element name.</param>
        <summary>Initializes a new instance of the OpenXmlUnknownElement class using             the supplied element name.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OpenXmlUnknownElement (string qualifiedName, string namespaceUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string qualifiedName, string namespaceUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlUnknownElement.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (qualifiedName As String, namespaceUri As String)" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.OpenXmlUnknownElement : string * string -&gt; DocumentFormat.OpenXml.OpenXmlUnknownElement" Usage="new DocumentFormat.OpenXml.OpenXmlUnknownElement (qualifiedName, namespaceUri)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="qualifiedName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="qualifiedName">Qualified element name.</param>
        <param name="namespaceUri">Namespace URN of the element.</param>
        <summary>Initializes a new instance of the OpenXmlUnknownElement class using             the supplied qualified element name and namespace URI.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OpenXmlUnknownElement (string prefix, string localName, string namespaceUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string prefix, string localName, string namespaceUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlUnknownElement.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (prefix As String, localName As String, namespaceUri As String)" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.OpenXmlUnknownElement : string * string * string -&gt; DocumentFormat.OpenXml.OpenXmlUnknownElement" Usage="new DocumentFormat.OpenXml.OpenXmlUnknownElement (prefix, localName, namespaceUri)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">The namespace prefix of the element.</param>
        <param name="localName">Local name of the element.</param>
        <param name="namespaceUri">Namespace URN of the element.</param>
        <summary>Initializes a new instance of the OpenXmlUnknownElement class using             the supplied prefix, local name, and namespace URI.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlUnknownElement.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="openXmlUnknownElement.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>When overridden in a derived class, creates a duplicate of the node.</summary>
        <returns>The cloned node.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="CreateOpenXmlUnknownElement">
      <MemberSignature Language="C#" Value="public static DocumentFormat.OpenXml.OpenXmlUnknownElement CreateOpenXmlUnknownElement (string outerXml);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class DocumentFormat.OpenXml.OpenXmlUnknownElement CreateOpenXmlUnknownElement(string outerXml) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlUnknownElement.CreateOpenXmlUnknownElement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOpenXmlUnknownElement (outerXml As String) As OpenXmlUnknownElement" />
      <MemberSignature Language="F#" Value="static member CreateOpenXmlUnknownElement : string -&gt; DocumentFormat.OpenXml.OpenXmlUnknownElement" Usage="DocumentFormat.OpenXml.OpenXmlUnknownElement.CreateOpenXmlUnknownElement outerXml" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlUnknownElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outerXml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outerXml">The outer XML of the element.</param>
        <summary>Creates a new OpenXmlUnknownElement class by using the outer XML.</summary>
        <returns>A new OpenXmlUnknownElement class.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InnerText">
      <MemberSignature Language="C#" Value="public override string InnerText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerText" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlUnknownElement.InnerText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property InnerText As String" />
      <MemberSignature Language="F#" Value="member this.InnerText : string" Usage="DocumentFormat.OpenXml.OpenXmlUnknownElement.InnerText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the concatenated values of the node and all of its children.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlUnknownElement.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.OpenXmlUnknownElement.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When overridden in a derived class, gets the local name of the node.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="NamespaceUri">
      <MemberSignature Language="C#" Value="public override string NamespaceUri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceUri" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlUnknownElement.NamespaceUri" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NamespaceUri As String" />
      <MemberSignature Language="F#" Value="member this.NamespaceUri : string" Usage="DocumentFormat.OpenXml.OpenXmlUnknownElement.NamespaceUri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the namespace URI of the current node.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public override string Prefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlUnknownElement.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Prefix As String" />
      <MemberSignature Language="F#" Value="member this.Prefix : string" Usage="DocumentFormat.OpenXml.OpenXmlUnknownElement.Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the prefix of the current node.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlUnknownElement.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="DocumentFormat.OpenXml.OpenXmlUnknownElement.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the text of the unknown element, only if the unknown element             has only one child that is a text node.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public override void WriteTo (System.Xml.XmlWriter xmlWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteTo(class System.Xml.XmlWriter xmlWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlUnknownElement.WriteTo(System.Xml.XmlWriter)" />
      <MemberSignature Language="F#" Value="override this.WriteTo : System.Xml.XmlWriter -&gt; unit" Usage="openXmlUnknownElement.WriteTo xmlWriter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlWriter" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="xmlWriter">The XmlWriter to which you want to save.</param>
        <summary>Saves the current node to the specified XmlWriter.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="XmlQualifiedName">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlQualifiedName XmlQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlQualifiedName XmlQualifiedName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlUnknownElement.XmlQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlQualifiedName As XmlQualifiedName" />
      <MemberSignature Language="F#" Value="member this.XmlQualifiedName : System.Xml.XmlQualifiedName" Usage="DocumentFormat.OpenXml.OpenXmlUnknownElement.XmlQualifiedName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlQualifiedName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When overridden in a derived class, gets the qualified name of the node.</summary>
        <value>Returns <see cref="T:System.Xml.XmlQualifiedName" />.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>