<Type Name="OpenXmlElement" FullName="DocumentFormat.OpenXml.OpenXmlElement">
  <TypeSignature Language="C#" Value="public abstract class OpenXmlElement : ICloneable, System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit OpenXmlElement extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt;, class System.Collections.IEnumerable, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.OpenXmlElement" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class OpenXmlElement&#xA;Implements ICloneable, IEnumerable(Of OpenXmlElement)" />
  <TypeSignature Language="F#" Value="type OpenXmlElement = class&#xA;    interface seq&lt;OpenXmlElement&gt;&#xA;    interface IEnumerable&#xA;    interface ICloneable" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a base class that all elements in an Office Open XML document derive from.                          Represents a base class for all elements in an Office Open XML document.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Annotations will not be cloned when calling .Clone() and .CloneNode(bool)  
  
   
  
## Examples  
 The following code example shows how to access elements at the same level in a word-processing document. The test file used in the example contains the text “OpenXml Element.”  
  
```csharp  
using System;  
using System.Collections.Generic;  
using System.Linq;  
using DocumentFormat.OpenXml.Packaging;  
using DocumentFormat.OpenXml.Wordprocessing;  
  
namespace OpenXmlElement  
{  
    class Program  
    {  
        // This code example shows how to access elements at the same level    
        // in a word-processing document.   
        // The example is using a file that contains the text "OpenXml Element."  
        static void Main(string[] args)  
        {  
            string fileName = @"C:\Users\Public\Documents\AccessElementsSameLevel.docx";  
            using (WordprocessingDocument wordprocessingDocument =   
                WordprocessingDocument.Open(fileName, false))  
            {  
                // Create a Body object.  
                DocumentFormat.OpenXml.Wordprocessing.Body body =  
                    wordprocessingDocument.MainDocumentPart.Document.Body;  
  
                // Create a Paragraph object.  
                DocumentFormat.OpenXml.Wordprocessing.Paragraph firstParagraph =  
                    body.Elements<Paragraph>().FirstOrDefault();  
  
                // Get the first child of an OpenXmlElement.  
                 DocumentFormat.OpenXml.OpenXmlElement firstChild = firstParagraph.FirstChild;  
                IEnumerable<Run> elementsAfter =  
                    firstChild.ElementsAfter().Where(c => c is Run).Cast<Run>();  
  
                // Get the Run elements after the specified element.  
                Console.WriteLine("Run elements after the first child are: ");  
                foreach (DocumentFormat.OpenXml.Wordprocessing.Run run in elementsAfter)  
                {  
                    Console.WriteLine(run.InnerText);  
                }  
                Console.ReadKey();  
            }  
        }  
    }  
}  
// Output:  
// Run elements after the first child are:  
// OpenXml  
//  Element  
  
```  
  
```vb  
Imports System  
Imports System.Collections.Generic  
Imports System.Linq  
Imports DocumentFormat.OpenXml.Packaging  
Imports DocumentFormat.OpenXml.Wordprocessing  
  
Module Module1  
    ' This code example shows how to access elements at the same level    
    ' in a word-processing document.   
    ' The example is using a file that contains the text "OpenXml Element."  
    Sub Main()  
        Dim fileName As String = "C:\Users\Public\Documents\AccessElementsSameLevel.docx"  
        Using wordprocessingDocument As WordprocessingDocument = _  
    wordprocessingDocument.Open(fileName, False)  
            ' Create a Body object.  
            Dim body As DocumentFormat.OpenXml.Wordprocessing.Body = _  
    wordprocessingDocument.MainDocumentPart.Document.Body  
  
            ' Create a Paragraph object.  
            Dim firstParagraph As DocumentFormat.OpenXml.Wordprocessing.Paragraph = _  
    body.Elements(Of Paragraph)().FirstOrDefault()  
  
            ' Get the first child of an OpenXmlElement.  
            Dim firstChild As DocumentFormat.OpenXml.OpenXmlElement = _  
                firstParagraph.FirstChild  
            Dim elementsAfter As IEnumerable(Of Run) = _  
                firstChild.ElementsAfter().Where(Function(c) TypeOf c Is Run).Cast(Of Run)()  
  
            ' Get the Run elements before/after the specified element.  
            Console.WriteLine("Run elements after the first child are: ")  
            For Each run As DocumentFormat.OpenXml.Wordprocessing.Run In elementsAfter  
                Console.WriteLine(run.InnerText)  
            Next  
            Console.ReadKey()  
        End Using  
    End Sub  
End Module  
' Output:  
' Run elements after the first child are:  
' OpenXml  
'  Element  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OpenXmlElement ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the OpenXmlElement class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OpenXmlElement (string outerXml);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string outerXml) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (outerXml As String)" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.OpenXmlElement : string -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="new DocumentFormat.OpenXml.OpenXmlElement outerXml" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="outerXml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outerXml">The outer XML of the element.</param>
        <summary>Initializes a new instance of the OpenXmlElement class using the supplied outer XML of the element.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAnnotation">
      <MemberSignature Language="C#" Value="public void AddAnnotation (object annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAnnotation(object annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.AddAnnotation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAnnotation (annotation As Object)" />
      <MemberSignature Language="F#" Value="member this.AddAnnotation : obj -&gt; unit" Usage="openXmlElement.AddAnnotation annotation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="annotation">The annotation to add to this OpenXmlElement.</param>
        <summary>Adds an object to the current OpenXmlElement element's list of annotations.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddNamespaceDeclaration">
      <MemberSignature Language="C#" Value="public void AddNamespaceDeclaration (string prefix, string uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddNamespaceDeclaration(string prefix, string uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.AddNamespaceDeclaration(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddNamespaceDeclaration (prefix As String, uri As String)" />
      <MemberSignature Language="F#" Value="member this.AddNamespaceDeclaration : string * string -&gt; unit" Usage="openXmlElement.AddNamespaceDeclaration (prefix, uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">The Prefix</param>
        <param name="uri">The Uri</param>
        <summary>Adds a namepace declaration to the current node.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Thrown if the prefix is already used in the current node.</exception>
      </Docs>
    </Member>
    <Member MemberName="Ancestors">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; Ancestors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt; Ancestors() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.Ancestors" />
      <MemberSignature Language="VB.NET" Value="Public Iterator Function Ancestors () As IEnumerable(Of OpenXmlElement)" />
      <MemberSignature Language="F#" Value="member this.Ancestors : unit -&gt; seq&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" Usage="openXmlElement.Ancestors " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(DocumentFormat.OpenXml.OpenXmlElement/&lt;Ancestors&gt;d__96))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enumerates all of the current element's ancestors.</summary>
        <returns>An IEnumerable object that contains a list of the current OpenXmlElement element's ancestors.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ancestors&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; Ancestors&lt;T&gt; () where T : DocumentFormat.OpenXml.OpenXmlElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; Ancestors&lt;(class DocumentFormat.OpenXml.OpenXmlElement) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.Ancestors``1" />
      <MemberSignature Language="VB.NET" Value="Public Iterator Function Ancestors(Of T As OpenXmlElement) () As IEnumerable(Of T)" />
      <MemberSignature Language="F#" Value="member this.Ancestors : unit -&gt; seq&lt;'T (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)&gt; (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)" Usage="openXmlElement.Ancestors " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(DocumentFormat.OpenXml.OpenXmlElement/&lt;Ancestors&gt;d__97`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The element type.</typeparam>
        <summary>Enumerates only the current element's ancestors that have the specified type.</summary>
        <returns>An IEnumerable object that contains a list of the current OpenXmlElement element's ancestors.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Annotation">
      <MemberSignature Language="C#" Value="public object Annotation (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Annotation(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.Annotation(System.Type)" />
      <MemberSignature Language="F#" Value="member this.Annotation : Type -&gt; obj" Usage="openXmlElement.Annotation type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The type of the annotation to retrieve.</param>
        <summary>Get the first annotation object of the specified type from the current OpenXmlElement element.</summary>
        <returns>The first annotation object with the specified type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Annotation&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Annotation&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Annotation&lt;class T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.Annotation``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Annotation(Of T As Class) () As T" />
      <MemberSignature Language="F#" Value="member this.Annotation : unit -&gt; 'T (requires 'T : null)" Usage="openXmlElement.Annotation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type of the annotation to retrieve.</typeparam>
        <summary>Get the first annotation object of the specified type from the current OpenXmlElement element.</summary>
        <returns>The first annotation object of the specified type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Annotations">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;object&gt; Annotations (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;object&gt; Annotations(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.Annotations(System.Type)" />
      <MemberSignature Language="F#" Value="member this.Annotations : Type -&gt; seq&lt;obj&gt;" Usage="openXmlElement.Annotations type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(DocumentFormat.OpenXml.OpenXmlElement/&lt;Annotations&gt;d__156))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The Type of the annotations to retrieve.</param>
        <summary>Gets a collection of annotations with the specified type for the current OpenXmlElement element.</summary>
        <returns>An IEnumerable(T) object that contains the annotations for the current OpenXmlElement element.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Annotations&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; Annotations&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; Annotations&lt;class T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.Annotations``1" />
      <MemberSignature Language="VB.NET" Value="Public Iterator Function Annotations(Of T As Class) () As IEnumerable(Of T)" />
      <MemberSignature Language="F#" Value="member this.Annotations : unit -&gt; seq&lt;'T (requires 'T : null)&gt; (requires 'T : null)" Usage="openXmlElement.Annotations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(DocumentFormat.OpenXml.OpenXmlElement/&lt;Annotations&gt;d__155`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type of the annotations to retrieve.</typeparam>
        <summary>Gets a collection of annotations with the specified type for the current OpenXmlElement element.</summary>
        <returns>An IEnumerable(T) object that contains the annotations for current OpenXmlElement element.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (params DocumentFormat.OpenXml.OpenXmlElement[] newChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class DocumentFormat.OpenXml.OpenXmlElement[] newChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.Append(DocumentFormat.OpenXml.OpenXmlElement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (ParamArray newChildren As OpenXmlElement())" />
      <MemberSignature Language="F#" Value="member this.Append : DocumentFormat.OpenXml.OpenXmlElement[] -&gt; unit" Usage="openXmlElement.Append newChildren" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newChildren" Type="DocumentFormat.OpenXml.OpenXmlElement[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newChildren">The OpenXmlElement's to be appended.</param>
        <summary>Appends each element from an array of elements to the end of the current element's list of child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; newChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt; newChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.Append(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (newChildren As IEnumerable(Of OpenXmlElement))" />
      <MemberSignature Language="F#" Value="member this.Append : seq&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; -&gt; unit" Usage="openXmlElement.Append newChildren" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newChildren" Type="System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" />
      </Parameters>
      <Docs>
        <param name="newChildren">The OpenXmlElement's to be appended.</param>
        <summary>Appends each element from a list of elements to the end of the current element's list of child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendChild&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual T AppendChild&lt;T&gt; (T newChild) where T : DocumentFormat.OpenXml.OpenXmlElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!T AppendChild&lt;(class DocumentFormat.OpenXml.OpenXmlElement) T&gt;(!!T newChild) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.AppendChild``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendChild(Of T As OpenXmlElement) (newChild As T) As T" />
      <MemberSignature Language="F#" Value="abstract member AppendChild : 'T -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)&#xA;override this.AppendChild : 'T -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)" Usage="openXmlElement.AppendChild newChild" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="newChild" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="newChild">The OpenXmlElement to append.</param>
        <summary>Appends the specified element to the end of the current element's list of child nodes.</summary>
        <returns>The OpenXmlElement element that was appended.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildElements">
      <MemberSignature Language="C#" Value="public virtual DocumentFormat.OpenXml.OpenXmlElementList ChildElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.OpenXmlElementList ChildElements" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlElement.ChildElements" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ChildElements As OpenXmlElementList" />
      <MemberSignature Language="F#" Value="member this.ChildElements : DocumentFormat.OpenXml.OpenXmlElementList" Usage="DocumentFormat.OpenXml.OpenXmlElement.ChildElements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElementList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets all the child nodes of the current element.</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.OpenXmlElementList" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearAllAttributes">
      <MemberSignature Language="C#" Value="public void ClearAllAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearAllAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.ClearAllAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearAllAttributes ()" />
      <MemberSignature Language="F#" Value="member this.ClearAllAttributes : unit -&gt; unit" Usage="openXmlElement.ClearAllAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears all of the attributes, including both known attributes and extended attributes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="openXmlElement.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a duplicate of the current node.</summary>
        <returns>The cloned node.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cloning an OpenXmlNode copies all attributes and their values, including those generated by the XML processor to represent defaulted attributes. This method recursively clones the node and the subtree underneath it. Clone is equivalent to calling CloneNode(true).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public virtual DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="abstract member CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement&#xA;override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="openXmlElement.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>When overridden in a derived class, creates a duplicate of the node.</summary>
        <returns>The cloned node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Descendants">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; Descendants ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt; Descendants() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.Descendants" />
      <MemberSignature Language="VB.NET" Value="Public Iterator Function Descendants () As IEnumerable(Of OpenXmlElement)" />
      <MemberSignature Language="F#" Value="member this.Descendants : unit -&gt; seq&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" Usage="openXmlElement.Descendants " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(DocumentFormat.OpenXml.OpenXmlElement/&lt;Descendants&gt;d__101))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enumerates all of the current element's descendants.</summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Descendants&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; Descendants&lt;T&gt; () where T : DocumentFormat.OpenXml.OpenXmlElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; Descendants&lt;(class DocumentFormat.OpenXml.OpenXmlElement) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.Descendants``1" />
      <MemberSignature Language="VB.NET" Value="Public Iterator Function Descendants(Of T As OpenXmlElement) () As IEnumerable(Of T)" />
      <MemberSignature Language="F#" Value="member this.Descendants : unit -&gt; seq&lt;'T (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)&gt; (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)" Usage="openXmlElement.Descendants " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(DocumentFormat.OpenXml.OpenXmlElement/&lt;Descendants&gt;d__100`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The element type.</typeparam>
        <summary>Enumerate all of the current element's descendants of type T.</summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elements">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; Elements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt; Elements() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.Elements" />
      <MemberSignature Language="VB.NET" Value="Public Function Elements () As IEnumerable(Of OpenXmlElement)" />
      <MemberSignature Language="F#" Value="member this.Elements : unit -&gt; seq&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" Usage="openXmlElement.Elements " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enumerates all of the current element's children.</summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elements&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; Elements&lt;T&gt; () where T : DocumentFormat.OpenXml.OpenXmlElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; Elements&lt;(class DocumentFormat.OpenXml.OpenXmlElement) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.Elements``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Elements(Of T As OpenXmlElement) () As IEnumerable(Of T)" />
      <MemberSignature Language="F#" Value="member this.Elements : unit -&gt; seq&lt;'T (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)&gt; (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)" Usage="openXmlElement.Elements " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The element type.</typeparam>
        <summary>Enumerates only the current element's children that have the specified type.</summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementsAfter">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; ElementsAfter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt; ElementsAfter() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.ElementsAfter" />
      <MemberSignature Language="VB.NET" Value="Public Iterator Function ElementsAfter () As IEnumerable(Of OpenXmlElement)" />
      <MemberSignature Language="F#" Value="member this.ElementsAfter : unit -&gt; seq&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" Usage="openXmlElement.ElementsAfter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(DocumentFormat.OpenXml.OpenXmlElement/&lt;ElementsAfter&gt;d__103))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enumerates all of the sibling elements that follow the current element and have the same parent as the current element.</summary>
        <returns>An IEnumerable object that contains a list of OpenXmlElement elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementsBefore">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; ElementsBefore ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt; ElementsBefore() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.ElementsBefore" />
      <MemberSignature Language="VB.NET" Value="Public Iterator Function ElementsBefore () As IEnumerable(Of OpenXmlElement)" />
      <MemberSignature Language="F#" Value="member this.ElementsBefore : unit -&gt; seq&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" Usage="openXmlElement.ElementsBefore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(DocumentFormat.OpenXml.OpenXmlElement/&lt;ElementsBefore&gt;d__102))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enumerates all of the sibling elements that precede the current element and have the same parent as the current element.</summary>
        <returns>An IEnumerable object that contains a list of OpenXmlElement elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtendedAttributes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlAttribute&gt; ExtendedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;valuetype DocumentFormat.OpenXml.OpenXmlAttribute&gt; ExtendedAttributes" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlElement.ExtendedAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExtendedAttributes As IEnumerable(Of OpenXmlAttribute)" />
      <MemberSignature Language="F#" Value="member this.ExtendedAttributes : seq&lt;DocumentFormat.OpenXml.OpenXmlAttribute&gt;" Usage="DocumentFormat.OpenXml.OpenXmlElement.ExtendedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlAttribute&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets all extended attributes (attributes not defined in the schema) of the current element.</summary>
        <value>Returns <see cref="T:System.Collections.Generic.IList`1" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstChild">
      <MemberSignature Language="C#" Value="public virtual DocumentFormat.OpenXml.OpenXmlElement FirstChild { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.OpenXmlElement FirstChild" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlElement.FirstChild" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FirstChild As OpenXmlElement" />
      <MemberSignature Language="F#" Value="member this.FirstChild : DocumentFormat.OpenXml.OpenXmlElement" Usage="DocumentFormat.OpenXml.OpenXmlElement.FirstChild" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the first child of the OpenXmlElement element.             Returns null (Nothing in Visual Basic) if there is no such OpenXmlElement element.</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.OpenXmlElement" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.OpenXmlAttribute GetAttribute (string localName, string namespaceUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype DocumentFormat.OpenXml.OpenXmlAttribute GetAttribute(string localName, string namespaceUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.GetAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttribute (localName As String, namespaceUri As String) As OpenXmlAttribute" />
      <MemberSignature Language="F#" Value="member this.GetAttribute : string * string -&gt; DocumentFormat.OpenXml.OpenXmlAttribute" Usage="openXmlElement.GetAttribute (localName, namespaceUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">The tag name.</param>
        <param name="namespaceUri">The namespace URI.</param>
        <summary>Gets an Open XML attribute with the specified tag name and namespace URI.</summary>
        <returns>Returns a clone of the OpenXmlAttribute with local name equal to "localName" and namespace URI equal to "namespaceUri".</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">When the "localName" is empty.</exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">When the element does not have the specified attribute.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAttributes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;DocumentFormat.OpenXml.OpenXmlAttribute&gt; GetAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IList`1&lt;valuetype DocumentFormat.OpenXml.OpenXmlAttribute&gt; GetAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.GetAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttributes () As IList(Of OpenXmlAttribute)" />
      <MemberSignature Language="F#" Value="member this.GetAttributes : unit -&gt; System.Collections.Generic.IList&lt;DocumentFormat.OpenXml.OpenXmlAttribute&gt;" Usage="openXmlElement.GetAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;DocumentFormat.OpenXml.OpenXmlAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a list that contains a copy of all the attributes.</summary>
        <returns>A list of attributes. Return an empty list if there are no attributes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The returned list is a copy, non-live.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of OpenXmlElement)" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" Usage="openXmlElement.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that iterates through the child collection.</summary>
        <returns>An IEnumerator object that can be used to iterate through the child collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFirstChild&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetFirstChild&lt;T&gt; () where T : DocumentFormat.OpenXml.OpenXmlElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetFirstChild&lt;(class DocumentFormat.OpenXml.OpenXmlElement) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.GetFirstChild``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstChild(Of T As OpenXmlElement) () As T" />
      <MemberSignature Language="F#" Value="member this.GetFirstChild : unit -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)" Usage="openXmlElement.GetFirstChild " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Type of element.</typeparam>
        <summary>Finds the first child element in type T.</summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAttributes">
      <MemberSignature Language="C#" Value="public bool HasAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAttributes" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlElement.HasAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAttributes As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasAttributes : bool" Usage="DocumentFormat.OpenXml.OpenXmlElement.HasAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a boolean value that indicates whether the current element has any attributes.</summary>
        <value>Returns <see cref="T:System.Boolean" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasChildren">
      <MemberSignature Language="C#" Value="public abstract bool HasChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChildren" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlElement.HasChildren" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property HasChildren As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasChildren : bool" Usage="DocumentFormat.OpenXml.OpenXmlElement.HasChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the current element has any child elements.</summary>
        <value>Returns <see cref="T:System.Boolean" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InnerText">
      <MemberSignature Language="C#" Value="public virtual string InnerText { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerText" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlElement.InnerText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property InnerText As String" />
      <MemberSignature Language="F#" Value="member this.InnerText : string with get, set" Usage="DocumentFormat.OpenXml.OpenXmlElement.InnerText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the concatenated values of the node and all of its children.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InnerXml">
      <MemberSignature Language="C#" Value="public virtual string InnerXml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerXml" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlElement.InnerXml" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property InnerXml As String" />
      <MemberSignature Language="F#" Value="member this.InnerXml : string with get, set" Usage="DocumentFormat.OpenXml.OpenXmlElement.InnerXml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the markup that represents only the child elements of the current element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAfter&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual T InsertAfter&lt;T&gt; (T newChild, DocumentFormat.OpenXml.OpenXmlElement refChild) where T : DocumentFormat.OpenXml.OpenXmlElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!T InsertAfter&lt;(class DocumentFormat.OpenXml.OpenXmlElement) T&gt;(!!T newChild, class DocumentFormat.OpenXml.OpenXmlElement refChild) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.InsertAfter``1(``0,DocumentFormat.OpenXml.OpenXmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function InsertAfter(Of T As OpenXmlElement) (newChild As T, refChild As OpenXmlElement) As T" />
      <MemberSignature Language="F#" Value="abstract member InsertAfter : 'T * DocumentFormat.OpenXml.OpenXmlElement -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)&#xA;override this.InsertAfter : 'T * DocumentFormat.OpenXml.OpenXmlElement -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)" Usage="openXmlElement.InsertAfter (newChild, refChild)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="newChild" Type="T" />
        <Parameter Name="refChild" Type="DocumentFormat.OpenXml.OpenXmlElement" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="newChild">The OpenXmlElement to insert.</param>
        <param name="refChild">The OpenXmlElement that is the reference node. The newChild is placed after the refChild.</param>
        <summary>Inserts the specified element immediately after the specified reference element.</summary>
        <returns>The OpenXmlElement element that was inserted.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAfterSelf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T InsertAfterSelf&lt;T&gt; (T newElement) where T : DocumentFormat.OpenXml.OpenXmlElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T InsertAfterSelf&lt;(class DocumentFormat.OpenXml.OpenXmlElement) T&gt;(!!T newElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.InsertAfterSelf``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertAfterSelf(Of T As OpenXmlElement) (newElement As T) As T" />
      <MemberSignature Language="F#" Value="member this.InsertAfterSelf : 'T -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)" Usage="openXmlElement.InsertAfterSelf newElement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="newElement" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="newElement">The new element to be inserted as a sibling.</param>
        <summary>Inserts the specified element immediately after the current element.</summary>
        <returns>The inserted element.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when the "newElement" parameter is a null reference.</exception>
        <exception cref="T:System.InvalidOperationException">Thrown when the parent is a null reference.</exception>
      </Docs>
    </Member>
    <Member MemberName="InsertAt&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual T InsertAt&lt;T&gt; (T newChild, int index) where T : DocumentFormat.OpenXml.OpenXmlElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!T InsertAt&lt;(class DocumentFormat.OpenXml.OpenXmlElement) T&gt;(!!T newChild, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.InsertAt``1(``0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function InsertAt(Of T As OpenXmlElement) (newChild As T, index As Integer) As T" />
      <MemberSignature Language="F#" Value="abstract member InsertAt : 'T * int -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)&#xA;override this.InsertAt : 'T * int -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)" Usage="openXmlElement.InsertAt (newChild, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="newChild" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="newChild">The OpenXmlElement to be inserted.</param>
        <param name="index">The zero-based index at which element should be inserted.</param>
        <summary>Inserts the specified element at the specified index in the current element's list of child elements.</summary>
        <returns>The OpenXmlElement element that was inserted.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No change if the (newChild == null). Just return null.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertBefore&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual T InsertBefore&lt;T&gt; (T newChild, DocumentFormat.OpenXml.OpenXmlElement refChild) where T : DocumentFormat.OpenXml.OpenXmlElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!T InsertBefore&lt;(class DocumentFormat.OpenXml.OpenXmlElement) T&gt;(!!T newChild, class DocumentFormat.OpenXml.OpenXmlElement refChild) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.InsertBefore``1(``0,DocumentFormat.OpenXml.OpenXmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function InsertBefore(Of T As OpenXmlElement) (newChild As T, refChild As OpenXmlElement) As T" />
      <MemberSignature Language="F#" Value="abstract member InsertBefore : 'T * DocumentFormat.OpenXml.OpenXmlElement -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)&#xA;override this.InsertBefore : 'T * DocumentFormat.OpenXml.OpenXmlElement -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)" Usage="openXmlElement.InsertBefore (newChild, refChild)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="newChild" Type="T" />
        <Parameter Name="refChild" Type="DocumentFormat.OpenXml.OpenXmlElement" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="newChild">The OpenXmlElement to insert.</param>
        <param name="refChild">The OpenXmlElement that is the reference node. The newChild is placed before this OpenXmlElement.</param>
        <summary>Inserts the specified element immediately before the specified reference element.</summary>
        <returns>The OpenXmlElement element that was inserted.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertBeforeSelf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T InsertBeforeSelf&lt;T&gt; (T newElement) where T : DocumentFormat.OpenXml.OpenXmlElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T InsertBeforeSelf&lt;(class DocumentFormat.OpenXml.OpenXmlElement) T&gt;(!!T newElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.InsertBeforeSelf``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertBeforeSelf(Of T As OpenXmlElement) (newElement As T) As T" />
      <MemberSignature Language="F#" Value="member this.InsertBeforeSelf : 'T -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)" Usage="openXmlElement.InsertBeforeSelf newElement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="newElement" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="newElement">The new element to be inserted as a sibling.</param>
        <summary>Inserts the specified element immediately before the current element.</summary>
        <returns>The inserted element.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when the "newElement" parameter is a null reference.</exception>
        <exception cref="T:System.InvalidOperationException">Thrown when the parent is a null reference.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAfter">
      <MemberSignature Language="C#" Value="public bool IsAfter (DocumentFormat.OpenXml.OpenXmlElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAfter(class DocumentFormat.OpenXml.OpenXmlElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.IsAfter(DocumentFormat.OpenXml.OpenXmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAfter (element As OpenXmlElement) As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsAfter : DocumentFormat.OpenXml.OpenXmlElement -&gt; bool" Usage="openXmlElement.IsAfter element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="DocumentFormat.OpenXml.OpenXmlElement" />
      </Parameters>
      <Docs>
        <param name="element">The element to compare for order.</param>
        <summary>Determines if the current element appears after a specified element in document order.</summary>
        <returns>Returns true if the current element appears after the specified element in document order; otherwise returns false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBefore">
      <MemberSignature Language="C#" Value="public bool IsBefore (DocumentFormat.OpenXml.OpenXmlElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsBefore(class DocumentFormat.OpenXml.OpenXmlElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.IsBefore(DocumentFormat.OpenXml.OpenXmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsBefore (element As OpenXmlElement) As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsBefore : DocumentFormat.OpenXml.OpenXmlElement -&gt; bool" Usage="openXmlElement.IsBefore element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="DocumentFormat.OpenXml.OpenXmlElement" />
      </Parameters>
      <Docs>
        <param name="element">The element to compare for order.</param>
        <summary>Determines if the current element appears before a specified element in document order.</summary>
        <returns>Returns true if the current element appears before the specified element in document order; otherwise returns false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastChild">
      <MemberSignature Language="C#" Value="public virtual DocumentFormat.OpenXml.OpenXmlElement LastChild { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.OpenXmlElement LastChild" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlElement.LastChild" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LastChild As OpenXmlElement" />
      <MemberSignature Language="F#" Value="member this.LastChild : DocumentFormat.OpenXml.OpenXmlElement" Usage="DocumentFormat.OpenXml.OpenXmlElement.LastChild" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the last child of the OpenXmlElement element.             Returns null (Nothing in Visual Basic) if there is no such OpenXmlElement element.</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.OpenXmlElement" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public virtual string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlElement.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.OpenXmlElement.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the current element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupNamespace">
      <MemberSignature Language="C#" Value="public string LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string LookupNamespace(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.LookupNamespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LookupNamespace (prefix As String) As String" />
      <MemberSignature Language="F#" Value="member this.LookupNamespace : string -&gt; string" Usage="openXmlElement.LookupNamespace prefix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">The prefix to be resolved</param>
        <summary>Resolves the namespace prefix in the context of the current node.</summary>
        <returns>The resolved namespace. Returns null (Nothing in Visual Basic) if the prefix cannot be resolved.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupPrefix">
      <MemberSignature Language="C#" Value="public string LookupPrefix (string namespaceUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string LookupPrefix(string namespaceUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.LookupPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LookupPrefix (namespaceUri As String) As String" />
      <MemberSignature Language="F#" Value="member this.LookupPrefix : string -&gt; string" Usage="openXmlElement.LookupPrefix namespaceUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceUri">The namespace uri.</param>
        <summary>Finds the corresponding prefix for a namespace uri in the current element scope.</summary>
        <returns>The corresponding prefix. Returns null (Nothing in Visual Basic) if no prefix is found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MCAttributes">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.MarkupCompatibilityAttributes MCAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.MarkupCompatibilityAttributes MCAttributes" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlElement.MCAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property MCAttributes As MarkupCompatibilityAttributes" />
      <MemberSignature Language="F#" Value="member this.MCAttributes : DocumentFormat.OpenXml.MarkupCompatibilityAttributes with get, set" Usage="DocumentFormat.OpenXml.OpenXmlElement.MCAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.MarkupCompatibilityAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the markup compatibility attributes. Returns null if no markup compatibility attributes are defined for the current element.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceDeclarations">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,string&gt;&gt; NamespaceDeclarations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, string&gt;&gt; NamespaceDeclarations" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlElement.NamespaceDeclarations" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NamespaceDeclarations As IEnumerable(Of KeyValuePair(Of String, String))" />
      <MemberSignature Language="F#" Value="member this.NamespaceDeclarations : seq&lt;System.Collections.Generic.KeyValuePair&lt;string, string&gt;&gt;" Usage="DocumentFormat.OpenXml.OpenXmlElement.NamespaceDeclarations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets all the namespace declarations defined in the current element. Returns an empty enumerator if there is no namespace declaration.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceUri">
      <MemberSignature Language="C#" Value="public virtual string NamespaceUri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceUri" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlElement.NamespaceUri" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NamespaceUri As String" />
      <MemberSignature Language="F#" Value="member this.NamespaceUri : string" Usage="DocumentFormat.OpenXml.OpenXmlElement.NamespaceUri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the namespace URI of the current element.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSibling">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.OpenXmlElement NextSibling ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class DocumentFormat.OpenXml.OpenXmlElement NextSibling() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.NextSibling" />
      <MemberSignature Language="VB.NET" Value="Public Function NextSibling () As OpenXmlElement" />
      <MemberSignature Language="F#" Value="member this.NextSibling : unit -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="openXmlElement.NextSibling " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the OpenXmlElement element that immediately follows the current OpenXmlElement element.              Returns null (Nothing in Visual Basic) if there is no next OpenXmlElement element.</summary>
        <returns>The OpenXmlElement element that immediately follows the current OpenXmlElement element.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSibling&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T NextSibling&lt;T&gt; () where T : DocumentFormat.OpenXml.OpenXmlElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T NextSibling&lt;(class DocumentFormat.OpenXml.OpenXmlElement) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.NextSibling``1" />
      <MemberSignature Language="VB.NET" Value="Public Function NextSibling(Of T As OpenXmlElement) () As T" />
      <MemberSignature Language="F#" Value="member this.NextSibling : unit -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)" Usage="openXmlElement.NextSibling " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>Gets the OpenXmlElement element with the specified type that follows the current OpenXmlElement element.              Returns null (Nothing in Visual Basic) if there is no next OpenXmlElement.</summary>
        <returns>The OpenXmlElement element with the specified type that follows the current OpenXmlElement element.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenXmlElementContext">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.OpenXmlElementContext OpenXmlElementContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.OpenXmlElementContext OpenXmlElementContext" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlElement.OpenXmlElementContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OpenXmlElementContext As OpenXmlElementContext" />
      <MemberSignature Language="F#" Value="member this.OpenXmlElementContext : DocumentFormat.OpenXml.OpenXmlElementContext" Usage="DocumentFormat.OpenXml.OpenXmlElement.OpenXmlElementContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElementContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the OpenXmlEementContext of the current element.</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.OpenXmlElementContext" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OuterXml">
      <MemberSignature Language="C#" Value="public string OuterXml { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OuterXml" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlElement.OuterXml" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OuterXml As String" />
      <MemberSignature Language="F#" Value="member this.OuterXml : string" Usage="DocumentFormat.OpenXml.OpenXmlElement.OuterXml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the markup that represents the current element and all of its child elements.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.OpenXmlElement Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.OpenXmlElement Parent" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlElement.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As OpenXmlElement" />
      <MemberSignature Language="F#" Value="member this.Parent : DocumentFormat.OpenXml.OpenXmlElement" Usage="DocumentFormat.OpenXml.OpenXmlElement.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parent element of the current element.</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.OpenXmlElement" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public virtual string Prefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlElement.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Prefix As String" />
      <MemberSignature Language="F#" Value="member this.Prefix : string" Usage="DocumentFormat.OpenXml.OpenXmlElement.Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the namespace prefix of current element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrependChild&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual T PrependChild&lt;T&gt; (T newChild) where T : DocumentFormat.OpenXml.OpenXmlElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!T PrependChild&lt;(class DocumentFormat.OpenXml.OpenXmlElement) T&gt;(!!T newChild) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.PrependChild``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PrependChild(Of T As OpenXmlElement) (newChild As T) As T" />
      <MemberSignature Language="F#" Value="abstract member PrependChild : 'T -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)&#xA;override this.PrependChild : 'T -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)" Usage="openXmlElement.PrependChild newChild" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="newChild" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="newChild">The OpenXmlElement to add.</param>
        <summary>Inserts the specified element at the beginning of the current element's list of child elements.</summary>
        <returns>The OpenXmlElement element that was added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviousSibling">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.OpenXmlElement PreviousSibling ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class DocumentFormat.OpenXml.OpenXmlElement PreviousSibling() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.PreviousSibling" />
      <MemberSignature Language="VB.NET" Value="Public Function PreviousSibling () As OpenXmlElement" />
      <MemberSignature Language="F#" Value="member this.PreviousSibling : unit -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="openXmlElement.PreviousSibling " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the OpenXmlElement element that immediately precedes the current OpenXmlElement element.              Returns null (Nothing in Visual Basic ) if there is no preceding OpenXmlElement element.</summary>
        <returns>The OpenXmlElement element that immediately precedes the current OpenXmlElement element.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviousSibling&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T PreviousSibling&lt;T&gt; () where T : DocumentFormat.OpenXml.OpenXmlElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T PreviousSibling&lt;(class DocumentFormat.OpenXml.OpenXmlElement) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.PreviousSibling``1" />
      <MemberSignature Language="VB.NET" Value="Public Function PreviousSibling(Of T As OpenXmlElement) () As T" />
      <MemberSignature Language="F#" Value="member this.PreviousSibling : unit -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)" Usage="openXmlElement.PreviousSibling " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>Gets the OpenXmlElement element with the specified type that precedes the current OpenXmlElement.              Returns null (Nothing in Visual Basic) if there is no preceding OpenXmlElement element.</summary>
        <returns>The OpenXmlElement element with the specified type that precedes the current OpenXmlElement element.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.Remove" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove ()" />
      <MemberSignature Language="F#" Value="member this.Remove : unit -&gt; unit" Usage="openXmlElement.Remove " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes the current element from its parent.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Thrown when the parent is a null reference.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllChildren">
      <MemberSignature Language="C#" Value="public abstract void RemoveAllChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllChildren() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.RemoveAllChildren" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub RemoveAllChildren ()" />
      <MemberSignature Language="F#" Value="abstract member RemoveAllChildren : unit -&gt; unit" Usage="openXmlElement.RemoveAllChildren " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all of the current element's child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllChildren&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void RemoveAllChildren&lt;T&gt; () where T : DocumentFormat.OpenXml.OpenXmlElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAllChildren&lt;(class DocumentFormat.OpenXml.OpenXmlElement) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.RemoveAllChildren``1" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAllChildren(Of T As OpenXmlElement) ()" />
      <MemberSignature Language="F#" Value="member this.RemoveAllChildren : unit -&gt; unit (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)" Usage="openXmlElement.RemoveAllChildren " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>Remove all of the current element's child elements that are of type T.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotations">
      <MemberSignature Language="C#" Value="public void RemoveAnnotations (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAnnotations(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.RemoveAnnotations(System.Type)" />
      <MemberSignature Language="F#" Value="member this.RemoveAnnotations : Type -&gt; unit" Usage="openXmlElement.RemoveAnnotations type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The Type of the annotations to remove.</param>
        <summary>Removes the annotations of the specified type from the current OpenXmlElement element.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotations&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void RemoveAnnotations&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAnnotations&lt;class T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.RemoveAnnotations``1" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAnnotations(Of T As Class) ()" />
      <MemberSignature Language="F#" Value="member this.RemoveAnnotations : unit -&gt; unit (requires 'T : null)" Usage="openXmlElement.RemoveAnnotations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type of the annotations to remove.</typeparam>
        <summary>Removes the annotations with the specified type from the current OpenXmlElement element.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAttribute">
      <MemberSignature Language="C#" Value="public void RemoveAttribute (string localName, string namespaceUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAttribute(string localName, string namespaceUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.RemoveAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAttribute (localName As String, namespaceUri As String)" />
      <MemberSignature Language="F#" Value="member this.RemoveAttribute : string * string -&gt; unit" Usage="openXmlElement.RemoveAttribute (localName, namespaceUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">The local name of the attribute.</param>
        <param name="namespaceUri">The namesapce URI of the attribute.</param>
        <summary>Removes the attribute from the current element.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the localName is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveChild&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual T RemoveChild&lt;T&gt; (T oldChild) where T : DocumentFormat.OpenXml.OpenXmlElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!T RemoveChild&lt;(class DocumentFormat.OpenXml.OpenXmlElement) T&gt;(!!T oldChild) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.RemoveChild``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveChild(Of T As OpenXmlElement) (oldChild As T) As T" />
      <MemberSignature Language="F#" Value="abstract member RemoveChild : 'T -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)&#xA;override this.RemoveChild : 'T -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)" Usage="openXmlElement.RemoveChild oldChild" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="oldChild" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="oldChild">The element being removed.</param>
        <summary>Removes the specified child element from the current element's list of child elements.</summary>
        <returns>The element that was removed.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveNamespaceDeclaration">
      <MemberSignature Language="C#" Value="public void RemoveNamespaceDeclaration (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveNamespaceDeclaration(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.RemoveNamespaceDeclaration(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveNamespaceDeclaration (prefix As String)" />
      <MemberSignature Language="F#" Value="member this.RemoveNamespaceDeclaration : string -&gt; unit" Usage="openXmlElement.RemoveNamespaceDeclaration prefix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix"></param>
        <summary>Removes the namespace declaration for the specified prefix. Removes nothing if there is no prefix.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceChild&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual T ReplaceChild&lt;T&gt; (DocumentFormat.OpenXml.OpenXmlElement newChild, T oldChild) where T : DocumentFormat.OpenXml.OpenXmlElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!T ReplaceChild&lt;(class DocumentFormat.OpenXml.OpenXmlElement) T&gt;(class DocumentFormat.OpenXml.OpenXmlElement newChild, !!T oldChild) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.ReplaceChild``1(DocumentFormat.OpenXml.OpenXmlElement,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceChild(Of T As OpenXmlElement) (newChild As OpenXmlElement, oldChild As T) As T" />
      <MemberSignature Language="F#" Value="abstract member ReplaceChild : DocumentFormat.OpenXml.OpenXmlElement * 'T -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)&#xA;override this.ReplaceChild : DocumentFormat.OpenXml.OpenXmlElement * 'T -&gt; 'T (requires 'T :&gt; DocumentFormat.OpenXml.OpenXmlElement)" Usage="openXmlElement.ReplaceChild (newChild, oldChild)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="newChild" Type="DocumentFormat.OpenXml.OpenXmlElement" />
        <Parameter Name="oldChild" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="newChild">The new OpenXmlElement to put in the child list.</param>
        <param name="oldChild">The OpenXmlElement being replaced in the list.</param>
        <summary>Replaces a child element with another child element in the current element's list of child elements.</summary>
        <returns>The OpenXmlElement element that was replaced.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttribute">
      <MemberSignature Language="C#" Value="public void SetAttribute (DocumentFormat.OpenXml.OpenXmlAttribute openXmlAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAttribute(valuetype DocumentFormat.OpenXml.OpenXmlAttribute openXmlAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.SetAttribute(DocumentFormat.OpenXml.OpenXmlAttribute)" />
      <MemberSignature Language="F#" Value="member this.SetAttribute : DocumentFormat.OpenXml.OpenXmlAttribute -&gt; unit" Usage="openXmlElement.SetAttribute openXmlAttribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openXmlAttribute" Type="DocumentFormat.OpenXml.OpenXmlAttribute" />
      </Parameters>
      <Docs>
        <param name="openXmlAttribute">The attribute to be set on the element.</param>
        <summary>Sets an attribute to the specified element.             If the attribute is a known attribute, the value of the attribute is set.             If the attribute is an extended attribute, the 'openxmlAttribute' is added to the extended attributes list.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when the LocalName of the "openxmlAttribute" parameter is null or empty.</exception>
        <exception cref="T:System.InvalidOperationException">Thrown when an attempt to set a namespace declaration is made.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAttributes">
      <MemberSignature Language="C#" Value="public void SetAttributes (System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlAttribute&gt; openXmlAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAttributes(class System.Collections.Generic.IEnumerable`1&lt;valuetype DocumentFormat.OpenXml.OpenXmlAttribute&gt; openXmlAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.SetAttributes(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlAttribute})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttributes (openXmlAttributes As IEnumerable(Of OpenXmlAttribute))" />
      <MemberSignature Language="F#" Value="member this.SetAttributes : seq&lt;DocumentFormat.OpenXml.OpenXmlAttribute&gt; -&gt; unit" Usage="openXmlElement.SetAttributes openXmlAttributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openXmlAttributes" Type="System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlAttribute&gt;" />
      </Parameters>
      <Docs>
        <param name="openXmlAttributes">The attributes to be set on the element.</param>
        <summary>Sets a number of attributes to the element.             If an attribute is a known attribute, the value of the attribute is set.             If an attribute is an extended attribute, the 'openxmlAttribute' is added to the extended attributes list.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>Returns <see cref="T:System.Collections.IEnumerator" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public virtual void WriteTo (System.Xml.XmlWriter xmlWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteTo(class System.Xml.XmlWriter xmlWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlElement.WriteTo(System.Xml.XmlWriter)" />
      <MemberSignature Language="F#" Value="abstract member WriteTo : System.Xml.XmlWriter -&gt; unit&#xA;override this.WriteTo : System.Xml.XmlWriter -&gt; unit" Usage="openXmlElement.WriteTo xmlWriter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlWriter" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="xmlWriter">The XmlWriter to which you want to save.</param>
        <summary>Saves the current node to the specified XmlWriter.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlQualifiedName">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlQualifiedName XmlQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlQualifiedName XmlQualifiedName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlElement.XmlQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property XmlQualifiedName As XmlQualifiedName" />
      <MemberSignature Language="F#" Value="member this.XmlQualifiedName : System.Xml.XmlQualifiedName" Usage="DocumentFormat.OpenXml.OpenXmlElement.XmlQualifiedName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlQualifiedName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the qualified name of the current element.</summary>
        <value>Returns <see cref="T:System.Xml.XmlQualifiedName" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XName">
      <MemberSignature Language="C#" Value="public virtual System.Xml.Linq.XName XName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XName XName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlElement.XName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property XName As XName" />
      <MemberSignature Language="F#" Value="member this.XName : System.Xml.Linq.XName" Usage="DocumentFormat.OpenXml.OpenXmlElement.XName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the qualified name of the current element.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>