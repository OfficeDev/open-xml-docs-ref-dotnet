<Type Name="OpenXmlWriter" FullName="DocumentFormat.OpenXml.OpenXmlWriter">
  <TypeSignature Language="C#" Value="public abstract class OpenXmlWriter : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit OpenXmlWriter extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.OpenXmlWriter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class OpenXmlWriter&#xA;Implements IDisposable" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Defines the OpenXmlWriter.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OpenXmlWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlWriter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the OpenXmlWriter.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public abstract void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Close ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Close the writer.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static DocumentFormat.OpenXml.OpenXmlWriter Create (DocumentFormat.OpenXml.Packaging.OpenXmlPart openXmlPart);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class DocumentFormat.OpenXml.OpenXmlWriter Create(class DocumentFormat.OpenXml.Packaging.OpenXmlPart openXmlPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlWriter.Create(DocumentFormat.OpenXml.Packaging.OpenXmlPart)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openXmlPart" Type="DocumentFormat.OpenXml.Packaging.OpenXmlPart" />
      </Parameters>
      <Docs>
        <param name="openXmlPart">The OpenXmlPart to be writern.</param>
        <summary>
            Create an OpenXmlWriter from the OpenXmlPart.
            </summary>
        <returns>The created OpenXmlWriter instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static DocumentFormat.OpenXml.OpenXmlWriter Create (System.IO.Stream partStream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class DocumentFormat.OpenXml.OpenXmlWriter Create(class System.IO.Stream partStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlWriter.Create(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (partStream As Stream) As OpenXmlWriter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="partStream">The target stream.</param>
        <summary>
            Create an OpenXmlWriter on a given stream.
            </summary>
        <returns>The created OpenXmlWriter instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static DocumentFormat.OpenXml.OpenXmlWriter Create (DocumentFormat.OpenXml.Packaging.OpenXmlPart openXmlPart, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class DocumentFormat.OpenXml.OpenXmlWriter Create(class DocumentFormat.OpenXml.Packaging.OpenXmlPart openXmlPart, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlWriter.Create(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.Text.Encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openXmlPart" Type="DocumentFormat.OpenXml.Packaging.OpenXmlPart" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="openXmlPart">The OpenXmlPart to be writern.</param>
        <param name="encoding">The encoding for the XML stream.</param>
        <summary>
            Create an OpenXmlWriter from the OpenXmlPart.
            </summary>
        <returns>The created OpenXmlWriter instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static DocumentFormat.OpenXml.OpenXmlWriter Create (System.IO.Stream partStream, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class DocumentFormat.OpenXml.OpenXmlWriter Create(class System.IO.Stream partStream, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlWriter.Create(System.IO.Stream,System.Text.Encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partStream" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="partStream">The target stream.</param>
        <param name="encoding">The encoding for the XML stream.</param>
        <summary>
            Create an OpenXmlWriter on given stream
            </summary>
        <returns>The created OpenXmlWriter instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Closes the writer, and releases all resources. 
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlWriter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        <summary>
            Closes the reader, and releases all resources. 
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThrowIfObjectDisposed">
      <MemberSignature Language="C#" Value="protected virtual void ThrowIfObjectDisposed ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ThrowIfObjectDisposed() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlWriter.ThrowIfObjectDisposed" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ThrowIfObjectDisposed ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Throw if object is disposed.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteElement">
      <MemberSignature Language="C#" Value="public abstract void WriteElement (DocumentFormat.OpenXml.OpenXmlElement elementObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteElement(class DocumentFormat.OpenXml.OpenXmlElement elementObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlWriter.WriteElement(DocumentFormat.OpenXml.OpenXmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteElement (elementObject As OpenXmlElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementObject" Type="DocumentFormat.OpenXml.OpenXmlElement" />
      </Parameters>
      <Docs>
        <param name="elementObject">The OpenXmlElement object to be writen.</param>
        <summary>
            Write the OpenXmlElement to the writer.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndElement">
      <MemberSignature Language="C#" Value="public abstract void WriteEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlWriter.WriteEndElement" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEndElement ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Closes one element.  
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="C#" Value="public abstract void WriteStartDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlWriter.WriteStartDocument" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartDocument ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Writes the XML declaration with the version "1.0".
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="C#" Value="public abstract void WriteStartDocument (bool standalone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartDocument(bool standalone) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlWriter.WriteStartDocument(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartDocument (standalone As Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="standalone" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="standalone">If true, it writes "standalone=yes"; if false, it writes "standalone=no". </param>
        <summary>
            Writes the XML declaration with the version "1.0" and the standalone attribute.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public abstract void WriteStartElement (DocumentFormat.OpenXml.OpenXmlElement elementObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartElement(class DocumentFormat.OpenXml.OpenXmlElement elementObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlWriter.WriteStartElement(DocumentFormat.OpenXml.OpenXmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartElement (elementObject As OpenXmlElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementObject" Type="DocumentFormat.OpenXml.OpenXmlElement" />
      </Parameters>
      <Docs>
        <param name="elementObject">The OpenXmlElement object to be writen.</param>
        <summary>
            Writes out a start tag of the element and all the attributes of the element.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public abstract void WriteStartElement (DocumentFormat.OpenXml.OpenXmlReader elementReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartElement(class DocumentFormat.OpenXml.OpenXmlReader elementReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlWriter.WriteStartElement(DocumentFormat.OpenXml.OpenXmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartElement (elementReader As OpenXmlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementReader" Type="DocumentFormat.OpenXml.OpenXmlReader" />
      </Parameters>
      <Docs>
        <param name="elementReader">The OpenXmlReader to read from. </param>
        <summary>
            Writes out a start element tag of the current element of the OpenXmlReader. And write all the attributes of the element.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public abstract void WriteStartElement (DocumentFormat.OpenXml.OpenXmlElement elementObject, System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlAttribute&gt; attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartElement(class DocumentFormat.OpenXml.OpenXmlElement elementObject, class System.Collections.Generic.IEnumerable`1&lt;valuetype DocumentFormat.OpenXml.OpenXmlAttribute&gt; attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlWriter.WriteStartElement(DocumentFormat.OpenXml.OpenXmlElement,System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlAttribute})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartElement (elementObject As OpenXmlElement, attributes As IEnumerable(Of OpenXmlAttribute))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementObject" Type="DocumentFormat.OpenXml.OpenXmlElement" />
        <Parameter Name="attributes" Type="System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlAttribute&gt;" />
      </Parameters>
      <Docs>
        <param name="elementObject">The OpenXmlElement object to be writen.</param>
        <param name="attributes">The attributes to be writtern.</param>
        <summary>
            Writes out a start tag of the element. And write the attributes in attributes. The attributes of the element will be omitted.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public abstract void WriteStartElement (DocumentFormat.OpenXml.OpenXmlReader elementReader, System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlAttribute&gt; attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartElement(class DocumentFormat.OpenXml.OpenXmlReader elementReader, class System.Collections.Generic.IEnumerable`1&lt;valuetype DocumentFormat.OpenXml.OpenXmlAttribute&gt; attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlWriter.WriteStartElement(DocumentFormat.OpenXml.OpenXmlReader,System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlAttribute})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartElement (elementReader As OpenXmlReader, attributes As IEnumerable(Of OpenXmlAttribute))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementReader" Type="DocumentFormat.OpenXml.OpenXmlReader" />
        <Parameter Name="attributes" Type="System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlAttribute&gt;" />
      </Parameters>
      <Docs>
        <param name="elementReader">The OpenXmlReader to read from. </param>
        <param name="attributes">The attributes to be writtern, can be null if no attrbutes.</param>
        <summary>
            Writes out a start element tag of the current element of the OpenXmlReader. And write the attributes in attributes. 
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public abstract void WriteStartElement (DocumentFormat.OpenXml.OpenXmlElement elementObject, System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlAttribute&gt; attributes, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,string&gt;&gt; namespaceDeclarations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartElement(class DocumentFormat.OpenXml.OpenXmlElement elementObject, class System.Collections.Generic.IEnumerable`1&lt;valuetype DocumentFormat.OpenXml.OpenXmlAttribute&gt; attributes, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, string&gt;&gt; namespaceDeclarations) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlWriter.WriteStartElement(DocumentFormat.OpenXml.OpenXmlElement,System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlAttribute},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartElement (elementObject As OpenXmlElement, attributes As IEnumerable(Of OpenXmlAttribute), namespaceDeclarations As IEnumerable(Of KeyValuePair(Of String, String)))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementObject" Type="DocumentFormat.OpenXml.OpenXmlElement" />
        <Parameter Name="attributes" Type="System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlAttribute&gt;" />
        <Parameter Name="namespaceDeclarations" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.String&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="elementObject">The OpenXmlElement object to be writen.</param>
        <param name="attributes">The attributes to be writtern.</param>
        <param name="namespaceDeclarations">The namespace declarations to be written, can be null if no namespace declarations.</param>
        <summary>
            Writes out a start tag of the element. And write the attributes in attributes. The attributes of the element will be omitted.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public abstract void WriteStartElement (DocumentFormat.OpenXml.OpenXmlReader elementReader, System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlAttribute&gt; attributes, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,string&gt;&gt; namespaceDeclarations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartElement(class DocumentFormat.OpenXml.OpenXmlReader elementReader, class System.Collections.Generic.IEnumerable`1&lt;valuetype DocumentFormat.OpenXml.OpenXmlAttribute&gt; attributes, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, string&gt;&gt; namespaceDeclarations) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlWriter.WriteStartElement(DocumentFormat.OpenXml.OpenXmlReader,System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlAttribute},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartElement (elementReader As OpenXmlReader, attributes As IEnumerable(Of OpenXmlAttribute), namespaceDeclarations As IEnumerable(Of KeyValuePair(Of String, String)))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementReader" Type="DocumentFormat.OpenXml.OpenXmlReader" />
        <Parameter Name="attributes" Type="System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlAttribute&gt;" />
        <Parameter Name="namespaceDeclarations" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.String&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="elementReader">The OpenXmlReader to read from. </param>
        <param name="attributes">The attributes to be writtern, can be null if no attrbutes.</param>
        <param name="namespaceDeclarations">The namespace declarations to be written, can be null if no namespace declarations.</param>
        <summary>
            Writes out a start element tag of the current element of the OpenXmlReader. And write the attributes in attributes. 
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public abstract void WriteString (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteString(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlWriter.WriteString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteString (text As String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text to write. </param>
        <summary>
            When overridden in a derived class, writes the given text content. 
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>