<Type Name="OpenXmlCompositeElement" FullName="DocumentFormat.OpenXml.OpenXmlCompositeElement">
  <TypeSignature Language="C#" Value="public abstract class OpenXmlCompositeElement : DocumentFormat.OpenXml.OpenXmlElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit OpenXmlCompositeElement extends DocumentFormat.OpenXml.OpenXmlElement" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.OpenXmlCompositeElement" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class OpenXmlCompositeElement&#xA;Inherits OpenXmlElement" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represents the base class for composite elements.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OpenXmlCompositeElement ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the OpenXmlCompositeElement class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OpenXmlCompositeElement (params DocumentFormat.OpenXml.OpenXmlElement[] childrenElements);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class DocumentFormat.OpenXml.OpenXmlElement[] childrenElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.#ctor(DocumentFormat.OpenXml.OpenXmlElement[])" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (ParamArray childrenElements As OpenXmlElement())" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childrenElements" Type="DocumentFormat.OpenXml.OpenXmlElement[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="childrenElements">An array of OpenXmlElement elements.</param>
        <summary>
            Initializes a new instance of the OpenXmlCompositeElement using the supplied array of OpenXmlElement elements.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OpenXmlCompositeElement (System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; childrenElements);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt; childrenElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.#ctor(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement})" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (childrenElements As IEnumerable(Of OpenXmlElement))" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childrenElements" Type="System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" />
      </Parameters>
      <Docs>
        <param name="childrenElements">A collection of OpenXmlElement elements.</param>
        <summary>
            Initializes a new instance of the OpenXmlCompositeElement class using the supplied collection of OpenXmlElement elements.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OpenXmlCompositeElement (System.Collections.IEnumerable childrenElements);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.IEnumerable childrenElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.#ctor(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (childrenElements As IEnumerable)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childrenElements" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="childrenElements">A collection of elements.</param>
        <summary>
            Initializes a new instance of the OpenXmlCompositeElement class using the supplied collection of elements.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OpenXmlCompositeElement (string outerXml);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string outerXml) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (outerXml As String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="outerXml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outerXml">The outer XML of the element.</param>
        <summary>
            Initializes a new instance of the OpenXmlCompositeElement class using the supplied outer XML.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendChild&lt;T&gt;">
      <MemberSignature Language="C#" Value="public override T AppendChild&lt;T&gt; (T newChild) where T : DocumentFormat.OpenXml.OpenXmlElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!T AppendChild&lt;(class DocumentFormat.OpenXml.OpenXmlElement) T&gt;(!!T newChild) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.AppendChild``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function AppendChild(Of T As OpenXmlElement) (newChild As T) As T" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="newChild" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="newChild">The OpenXmlElement element to append.</param>
        <summary>
            Appends the specified element to the end of the current element's list of child nodes. 
            </summary>
        <returns>The OpenXmlElement element that was appended. </returns>
        <remarks>Returns null if newChild equals null.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstChild">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement FirstChild { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.OpenXmlElement FirstChild" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlCompositeElement.FirstChild" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property FirstChild As OpenXmlElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the first child of the current OpenXmlElement element.
            </summary>
        <value>To be added.</value>
        <remarks>
            Returns null (Nothing in Visual Basic) if there is no such OpenXmlElement element. 
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasChildren">
      <MemberSignature Language="C#" Value="public override bool HasChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChildren" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlCompositeElement.HasChildren" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HasChildren As Boolean" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value that indicates whether the current element has any child elements. 
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InnerText">
      <MemberSignature Language="C#" Value="public override string InnerText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerText" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlCompositeElement.InnerText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property InnerText As String" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the concatenated values of the current node and all of its children. 
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InnerXml">
      <MemberSignature Language="C#" Value="public override string InnerXml { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerXml" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlCompositeElement.InnerXml" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property InnerXml As String" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the markup that represents only the child nodes of the current node.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAfter&lt;T&gt;">
      <MemberSignature Language="C#" Value="public override T InsertAfter&lt;T&gt; (T newChild, DocumentFormat.OpenXml.OpenXmlElement refChild) where T : DocumentFormat.OpenXml.OpenXmlElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!T InsertAfter&lt;(class DocumentFormat.OpenXml.OpenXmlElement) T&gt;(!!T newChild, class DocumentFormat.OpenXml.OpenXmlElement refChild) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.InsertAfter``1(``0,DocumentFormat.OpenXml.OpenXmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function InsertAfter(Of T As OpenXmlElement) (newChild As T, refChild As OpenXmlElement) As T" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="newChild" Type="T" />
        <Parameter Name="refChild" Type="DocumentFormat.OpenXml.OpenXmlElement" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="newChild">The OpenXmlElement element to insert.</param>
        <param name="refChild">The OpenXmlElement element that is in the reference node.</param>
        <summary>
            Inserts the specified element immediately after the specified reference element.
            </summary>
        <returns>The OpenXmlElement element that was inserted.</returns>
        <remarks>Returns null if newChild is null. </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAt&lt;T&gt;">
      <MemberSignature Language="C#" Value="public override T InsertAt&lt;T&gt; (T newChild, int index) where T : DocumentFormat.OpenXml.OpenXmlElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!T InsertAt&lt;(class DocumentFormat.OpenXml.OpenXmlElement) T&gt;(!!T newChild, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.InsertAt``1(``0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function InsertAt(Of T As OpenXmlElement) (newChild As T, index As Integer) As T" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="newChild" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="newChild">The OpenXmlElement element to insert.</param>
        <param name="index">The zero-based index to insert the element to.</param>
        <summary>
            Inserts the specified element at the specified index of the current element's children.
            </summary>
        <returns>The OpenXmlElement element that was inserted.</returns>
        <remarks>Returns null if newChild equals null.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown when index is less than 0 or is greater than the count of children.</exception>
      </Docs>
    </Member>
    <Member MemberName="InsertBefore&lt;T&gt;">
      <MemberSignature Language="C#" Value="public override T InsertBefore&lt;T&gt; (T newChild, DocumentFormat.OpenXml.OpenXmlElement refChild) where T : DocumentFormat.OpenXml.OpenXmlElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!T InsertBefore&lt;(class DocumentFormat.OpenXml.OpenXmlElement) T&gt;(!!T newChild, class DocumentFormat.OpenXml.OpenXmlElement refChild) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.InsertBefore``1(``0,DocumentFormat.OpenXml.OpenXmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function InsertBefore(Of T As OpenXmlElement) (newChild As T, refChild As OpenXmlElement) As T" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="newChild" Type="T" />
        <Parameter Name="refChild" Type="DocumentFormat.OpenXml.OpenXmlElement" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="newChild">The OpenXmlElement to insert.</param>
        <param name="refChild">The OpenXmlElement that is in the reference node.</param>
        <summary>
            Inserts the specified element immediately before the specified reference element.
            </summary>
        <returns>The OpenXmlElement that was inserted.</returns>
        <remarks>Returns null if newChild equals null.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastChild">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement LastChild { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.OpenXmlElement LastChild" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.OpenXmlCompositeElement.LastChild" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LastChild As OpenXmlElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the last child of the current OpenXmlElement element.
            Returns null (Nothing in Visual Basic) if there is no such OpenXmlElement element. 
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrependChild&lt;T&gt;">
      <MemberSignature Language="C#" Value="public override T PrependChild&lt;T&gt; (T newChild) where T : DocumentFormat.OpenXml.OpenXmlElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!T PrependChild&lt;(class DocumentFormat.OpenXml.OpenXmlElement) T&gt;(!!T newChild) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.PrependChild``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function PrependChild(Of T As OpenXmlElement) (newChild As T) As T" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="newChild" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="newChild">The OpenXmlElement element to add.</param>
        <summary>
            Inserts the specified element at the beginning of the current element's list of child nodes. 
            </summary>
        <returns>The OpenXmlElement that was added.</returns>
        <remarks>Returns null if newChild equals null.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllChildren">
      <MemberSignature Language="C#" Value="public override void RemoveAllChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemoveAllChildren() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.RemoveAllChildren" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub RemoveAllChildren ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Removes all of the current element's child elements.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveChild&lt;T&gt;">
      <MemberSignature Language="C#" Value="public override T RemoveChild&lt;T&gt; (T oldChild) where T : DocumentFormat.OpenXml.OpenXmlElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!T RemoveChild&lt;(class DocumentFormat.OpenXml.OpenXmlElement) T&gt;(!!T oldChild) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.RemoveChild``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function RemoveChild(Of T As OpenXmlElement) (oldChild As T) As T" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="oldChild" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="oldChild">The element to remove. </param>
        <summary>
            Removes the specified child element. 
            </summary>
        <returns>The element that was removed. </returns>
        <remarks>Returns null if newChild equals null. </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceChild&lt;T&gt;">
      <MemberSignature Language="C#" Value="public override T ReplaceChild&lt;T&gt; (DocumentFormat.OpenXml.OpenXmlElement newChild, T oldChild) where T : DocumentFormat.OpenXml.OpenXmlElement;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!T ReplaceChild&lt;(class DocumentFormat.OpenXml.OpenXmlElement) T&gt;(class DocumentFormat.OpenXml.OpenXmlElement newChild, !!T oldChild) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.OpenXmlCompositeElement.ReplaceChild``1(DocumentFormat.OpenXml.OpenXmlElement,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReplaceChild(Of T As OpenXmlElement) (newChild As OpenXmlElement, oldChild As T) As T" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>DocumentFormat.OpenXml.OpenXmlElement</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="newChild" Type="DocumentFormat.OpenXml.OpenXmlElement" />
        <Parameter Name="oldChild" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="newChild">The new OpenXmlElement to put in the child list.</param>
        <param name="oldChild">The OpenXmlElement to be replaced in the child list.</param>
        <summary>
            Replaces one of the current element's child elements with another OpenXmlElement element.
            </summary>
        <returns>The OpenXmlElement that was replaced.</returns>
        <remarks>Returns null if newChild equals null.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>