<Type Name="BiDiVisual" FullName="DocumentFormat.OpenXml.Wordprocessing.BiDiVisual">
  <TypeSignature Language="C#" Value="public class BiDiVisual : DocumentFormat.OpenXml.Wordprocessing.OnOffOnlyType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BiDiVisual extends DocumentFormat.OpenXml.Wordprocessing.OnOffOnlyType" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Wordprocessing.BiDiVisual" />
  <TypeSignature Language="VB.NET" Value="Public Class BiDiVisual&#xA;Inherits OnOffOnlyType" />
  <TypeSignature Language="F#" Value="type BiDiVisual = class&#xA;    inherit OnOffOnlyType" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.Wordprocessing.OnOffOnlyType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines the BiDiVisual Class. When the object is serialized out as xml, its qualified name is w:bidiVisual.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 **bidiVisual (Visually Right to Left Table)**  
  
 This element specifies that the cells with this table shall be visually represented in a right to left direction. This element also affects the application of all table-level properties.  
  
 When this property is specified, then the ordering of all cells (and table-level properties) in this table shall be applied to the table assuming that the table is a normal left to right table, but the table cells shall be displayed in a right to left direction. [*Example*: A left border on the first table cell must be displayed on the right side of that cell (which would be the rightmost cell) in a visually right to left table. *end example*]  
  
 If this element is omitted, then the table shall not be presented right to left.  
  
 [*Example*: Consider the following table  which has the logical right to left property set:  
  
 One  
  
 Two  
  
 Three  
  
 This property would be specified in the WordprocessingML as follows:  
  
```xml  
<w:tblPr>  
  <w:bidiVisual/>  
</w:tblPr>  
```  
  
 Since the bidiVisual element specifies this is a visually right to left table, the actual table data would be stored in its logical order as follows:  
  
```xml  
<w:tr>  
  <w:tc>  
    <w:p>  
      <w:r>  
        <w:t>One</w:t>  
      </w:r>  
    </w:p>  
  </w:tc>  
  <w:tc>  
    <w:p>  
      <w:r>  
        <w:t>Two</w:t>  
      </w:r>  
    </w:p>  
  </w:tc>  
  <w:tc>  
    <w:p>  
      <w:r>  
        <w:t>Three</w:t>  
      </w:r>  
    </w:p>  
  </w:tc>  
  <w:tc>  
    <w:p/>  
  </w:tc>  
</w:tr>  
```  
  
 The first logical cell with text *One* is stored first in the file format, and displayed on the rightmost in this table visually. *end example*]  
  
|Parent Elements|  
|---------------------|  
|tblPr (§17.4.60); tblPr (§17.4.59); tblPr (§17.7.6.4); tblPr (§17.7.6.3)|  
  
 This element’s content model is defined by the common boolean property definition in §17.17.4.  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlcopyrightiso.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BiDiVisual ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Wordprocessing.BiDiVisual.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the BiDiVisual class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Wordprocessing.BiDiVisual.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="biDiVisual.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Wordprocessing.BiDiVisual.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.Wordprocessing.BiDiVisual.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>