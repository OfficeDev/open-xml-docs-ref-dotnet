<Type Name="Body" FullName="DocumentFormat.OpenXml.Wordprocessing.Body">
  <TypeSignature Language="C#" Value="public class Body : DocumentFormat.OpenXml.Wordprocessing.BodyType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Body extends DocumentFormat.OpenXml.Wordprocessing.BodyType" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Wordprocessing.Body" />
  <TypeSignature Language="VB.NET" Value="Public Class Body&#xA;Inherits BodyType" />
  <TypeSignature Language="F#" Value="type Body = class&#xA;    inherit BodyType" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.Wordprocessing.BodyType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines the Body Class. When the object is serialized out as xml, its qualified name is w:body.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 **body (Document Body)**  
  
 This element specifies the contents of the body of the document - the main document editing surface.  
  
 The document body contains what is referred to as *block-level markup* - markup which can exist as a sibling element to paragraphs in a WordprocessingML document.  
  
 [*Example*: Consider a document with a single paragraph in the main document story. This document would require the following WordprocessingML in its main document part:  
  
```xml  
<w:document>  
  <w:body>  
    <w:p/>  
  </w:body>  
</w:document>  
```  
  
 The fact that the paragraph is inside the body element makes it part of the main document story. *end example*]  
  
|Parent Elements|  
|---------------------|  
|document (§17.2.3)|  
  
|Child Elements|Subclause|  
|--------------------|---------------|  
|altChunk (Anchor for Imported External Content)|§17.17.2.1|  
|bookmarkEnd (Bookmark End)|§17.13.6.1|  
|bookmarkStart (Bookmark Start)|§17.13.6.2|  
|commentRangeEnd (Comment Anchor Range End)|§17.13.4.3|  
|commentRangeStart (Comment Anchor Range Start)|§17.13.4.4|  
|customXml (Block-Level Custom XML Element)|§17.5.1.6|  
|customXmlDelRangeEnd (Custom XML Markup Deletion End)|§17.13.5.4|  
|customXmlDelRangeStart (Custom XML Markup Deletion Start)|§17.13.5.5|  
|customXmlInsRangeEnd (Custom XML Markup Insertion End)|§17.13.5.6|  
|customXmlInsRangeStart (Custom XML Markup Insertion Start)|§17.13.5.7|  
|customXmlMoveFromRangeEnd (Custom XML Markup Move Source End)|§17.13.5.8|  
|customXmlMoveFromRangeStart (Custom XML Markup Move Source Start)|§17.13.5.9|  
|customXmlMoveToRangeEnd (Custom XML Markup Move Destination Location End)|§17.13.5.10|  
|customXmlMoveToRangeStart (Custom XML Markup Move Destination Location Start)|§17.13.5.11|  
|del (Deleted Run Content)|§17.13.5.14|  
|ins (Inserted Run Content)|§17.13.5.18|  
|moveFrom (Move Source Run Content)|§17.13.5.22|  
|moveFromRangeEnd (Move Source Location Container - End)|§17.13.5.23|  
|moveFromRangeStart (Move Source Location Container - Start)|§17.13.5.24|  
|moveTo (Move Destination Run Content)|§17.13.5.25|  
|moveToRangeEnd (Move Destination Location Container - End)|§17.13.5.27|  
|moveToRangeStart (Move Destination Location Container - Start)|§17.13.5.28|  
|oMath (Office Math)|§22.1.2.77|  
|oMathPara (Office Math Paragraph)|§22.1.2.78|  
|p (Paragraph)|§17.3.1.22|  
|permEnd (Range Permission End)|§17.13.7.1|  
|permStart (Range Permission Start)|§17.13.7.2|  
|proofErr (Proofing Error Anchor)|§17.13.8.1|  
|sdt (Block-Level Structured Document Tag)|§17.5.2.29|  
|sectPr (Document Final Section Properties)|§17.6.17|  
|tbl (Table)|§17.4.38|  
  
 [*Note*: The W3C XML Schema definition of this element’s content model (CT_Body) is located in §A.1. *end note*]  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlcopyrightiso.md)]  
  
   
  
## Examples  
 The following code example creates a word-processing document by package and writes some text into it.  
  
```csharp  
using System;  
using System.IO.Packaging;  
using DocumentFormat.OpenXml;  
using DocumentFormat.OpenXml.Packaging;  
using DocumentFormat.OpenXml.Wordprocessing;  
  
namespace BodyEx  
{  
    class Program  
    {  
        // Create a document by package, and write some text in it.  
        static void Main(string[] args)  
        {  
            string fileName = @"C:\users\public\documents\BodyEx.zip";  
  
            // Create a word document by package.   
            Package package = Package.Open(fileName);  
            WordprocessingDocument wordprocessingDocument =   
                WordprocessingDocument.Create(package, WordprocessingDocumentType.Template);  
  
            // Make some changes to the document.  
            MainDocumentPart mainDocumentPart = wordprocessingDocument.AddMainDocumentPart();  
            mainDocumentPart.Document = new Document();  
            Document document = mainDocumentPart.Document;  
            Body body = document.AppendChild(new Body());  
            Paragraph para = body.AppendChild(new Paragraph());  
            Run run = para.AppendChild(new Run());  
            run.AppendChild(new Text("Created text in body."));  
  
            // Close the document and the package.  
            wordprocessingDocument.Close();  
            package.Close();  
  
            Console.WriteLine("The package has been created.\nPress a key.");  
            Console.ReadKey();  
        }  
    }  
}  
  
```  
  
```vb  
Imports System.IO.Packaging  
Imports DocumentFormat.OpenXml  
Imports DocumentFormat.OpenXml.Packaging  
Imports DocumentFormat.OpenXml.Wordprocessing  
  
Module Module1  
Sub Main(args As String())  
        Dim fileName As String = "C:\users\public\documents\BodyEx.zip"  
  
        ' Create a word document by package.   
        Dim package As Package = package.Open(fileName)  
        Dim wordprocessingDocument As WordprocessingDocument = _  
            wordprocessingDocument.Create(package, WordprocessingDocumentType.Template)  
  
        ' Make some changes to the document.  
        Dim mainDocumentPart As MainDocumentPart = _  
            wordprocessingDocument.AddMainDocumentPart()  
        mainDocumentPart.Document = New Document()  
        Dim document As Document = mainDocumentPart.Document  
        Dim body As Body = document.AppendChild(New Body())  
        Dim para As Paragraph = body.AppendChild(New Paragraph())  
        Dim run As Run = para.AppendChild(New Run())  
        run.AppendChild(New Text("Created text in body."))  
  
        ' Close the document and the package.  
        wordprocessingDocument.Close()  
        package.Close()  
  
        Console.WriteLine("The package has been created." & vbLf & "Press a key.")  
        Console.ReadKey()  
    End Sub  
End Module  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Body ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Wordprocessing.Body.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the Body class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Body (params DocumentFormat.OpenXml.OpenXmlElement[] childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class DocumentFormat.OpenXml.OpenXmlElement[] childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Wordprocessing.Body.#ctor(DocumentFormat.OpenXml.OpenXmlElement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray childElements As OpenXmlElement())" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Wordprocessing.Body : DocumentFormat.OpenXml.OpenXmlElement[] -&gt; DocumentFormat.OpenXml.Wordprocessing.Body" Usage="new DocumentFormat.OpenXml.Wordprocessing.Body childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="DocumentFormat.OpenXml.OpenXmlElement[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the Body class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Body (System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt; childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Wordprocessing.Body.#ctor(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (childElements As IEnumerable(Of OpenXmlElement))" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Wordprocessing.Body : seq&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; -&gt; DocumentFormat.OpenXml.Wordprocessing.Body" Usage="new DocumentFormat.OpenXml.Wordprocessing.Body childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" />
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the Body class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Body (string outerXml);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string outerXml) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Wordprocessing.Body.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (outerXml As String)" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Wordprocessing.Body : string -&gt; DocumentFormat.OpenXml.Wordprocessing.Body" Usage="new DocumentFormat.OpenXml.Wordprocessing.Body outerXml" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="outerXml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outerXml">Specifies the outer XML of the element.</param>
        <summary>Initializes a new instance of the Body class from outer XML.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Wordprocessing.Body.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="body.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Wordprocessing.Body.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.Wordprocessing.Body.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>