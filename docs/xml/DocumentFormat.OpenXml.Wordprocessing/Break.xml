<Type Name="Break" FullName="DocumentFormat.OpenXml.Wordprocessing.Break">
  <TypeSignature Language="C#" Value="public class Break : DocumentFormat.OpenXml.OpenXmlLeafElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Break extends DocumentFormat.OpenXml.OpenXmlLeafElement" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Wordprocessing.Break" />
  <TypeSignature Language="VB.NET" Value="Public Class Break&#xA;Inherits OpenXmlLeafElement" />
  <TypeSignature Language="F#" Value="type Break = class&#xA;    inherit OpenXmlLeafElement" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.OpenXmlLeafElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Break. When the object is serialized out as xml, its qualified name is w:br.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 **br (Break)**  
  
 This element specifies that a break shall be placed at the current location in the run content. A *break* is a special character which is used to override the normal line breaking that would be performed based on the normal layout of the document’s contents. [*Example*: Normal breaking for English would occur only after a breaking space or optional hyphen character. *end example*]  
  
 The behavior of this break character (the location where text shall be restarted after this break) shall be determined by its type and clear attribute values, described below.  
  
 [*Example*: Consider the following sentence in a WordprocessingML document:  
  
```xml  
This is a simple sentence.  
```  
  
 Normally, just as shown above, this sentence would be displayed on a single line as it is not long enough to require line breaking (given the width of the current page). However, if a text wrapping break character (a typical line break) were inserted after the word *is*, as follows:  
  
```xml  
<w:r>  
  <w:t>This is</w:t>  
  <w:br/>  
  <w:t xml:space="preserve"> a simple sentence.</w:t>  
</w:r>  
```  
  
 This would imply that this break must be treated as a simple line break, and break the line after that word:  
  
```xml  
This is a simple sentence.  
```  
  
 The break character forced the following text to be restarted on the next available line in the document. *end example*]  
  
|Parent Elements|  
|---------------------|  
|r (§22.1.2.87); r (§17.3.2.25)|  
  
  [*Note*: The W3C XML Schema definition of this element’s content model (CT_Br) is located in §A.1. *end note*]  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlcopyrightiso.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Wordprocessing.Break.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the Break class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Wordprocessing.BreakTextRestartLocationValues&gt; Clear { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.EnumValue`1&lt;valuetype DocumentFormat.OpenXml.Wordprocessing.BreakTextRestartLocationValues&gt; Clear" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Wordprocessing.Break.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Property Clear As EnumValue(Of BreakTextRestartLocationValues)" />
      <MemberSignature Language="F#" Value="member this.Clear : DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Wordprocessing.BreakTextRestartLocationValues&gt; with get, set" Usage="DocumentFormat.OpenXml.Wordprocessing.Break.Clear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(23, "clear")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Wordprocessing.BreakTextRestartLocationValues&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Restart Location For Text Wrapping Break.Represents the following attribute in the schema: w:clear</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.EnumValue`1" />.</value>
        <remarks>To be added.</remarks>
        <remark> xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
            </remark>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Wordprocessing.Break.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="break.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Wordprocessing.Break.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.Wordprocessing.Break.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Wordprocessing.BreakValues&gt; Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.EnumValue`1&lt;valuetype DocumentFormat.OpenXml.Wordprocessing.BreakValues&gt; Type" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Wordprocessing.Break.Type" />
      <MemberSignature Language="VB.NET" Value="Public Property Type As EnumValue(Of BreakValues)" />
      <MemberSignature Language="F#" Value="member this.Type : DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Wordprocessing.BreakValues&gt; with get, set" Usage="DocumentFormat.OpenXml.Wordprocessing.Break.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(23, "type")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Wordprocessing.BreakValues&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Break Type.Represents the following attribute in the schema: w:type</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.EnumValue`1" />.</value>
        <remarks>To be added.</remarks>
        <remark> xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
            </remark>
      </Docs>
    </Member>
  </Members>
</Type>