<Type Name="DocPartName" FullName="DocumentFormat.OpenXml.Wordprocessing.DocPartName">
  <TypeSignature Language="C#" Value="public class DocPartName : DocumentFormat.OpenXml.OpenXmlLeafElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DocPartName extends DocumentFormat.OpenXml.OpenXmlLeafElement" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Wordprocessing.DocPartName" />
  <TypeSignature Language="VB.NET" Value="Public Class DocPartName&#xA;Inherits OpenXmlLeafElement" />
  <TypeSignature Language="F#" Value="type DocPartName = class&#xA;    inherit OpenXmlLeafElement" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.OpenXmlLeafElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Entry Name. When the object is serialized out as xml, its qualified name is w:name.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 **name (Entry Name)**  
  
 This element specifies a name for the contents of this glossary document entry. This name can contain any string content, and allows the entry to have a friendly identifier contained within the definition for this glossary document entry. [*Note*: This name can be surfaced in a user interface, for example. *end note*]  
  
 [*Example*: Consider the following WordprocessingML fragment for the properties of a single glossary document entry:  
  
```xml  
<w:docPartPr>  
  …  <w:name w:val="Sample Entry" />  
  <w:description w:val="This is an example of a glossary document entry for example purposes." />  
  …</w:docPartPr>  
```  
  
 The name element specifies that the friendly name associated with the parent entry must be *Sample Entry*. This value can be used as needed by an application, for example, to display in a user interface. *end example*]  
  
|Parent Elements|  
|---------------------|  
|docPartPr (§17.12.7)|  
  
  [*Note*: The W3C XML Schema definition of this element’s content model (CT_DocPartName) is located in §A.1. *end note*]  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlcopyrightiso.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DocPartName ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Wordprocessing.DocPartName.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the DocPartName class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Wordprocessing.DocPartName.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="docPartName.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decorated">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.OnOffValue Decorated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.OnOffValue Decorated" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Wordprocessing.DocPartName.Decorated" />
      <MemberSignature Language="VB.NET" Value="Public Property Decorated As OnOffValue" />
      <MemberSignature Language="F#" Value="member this.Decorated : DocumentFormat.OpenXml.OnOffValue with get, set" Usage="DocumentFormat.OpenXml.Wordprocessing.DocPartName.Decorated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(23, "decorated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OnOffValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Built-In Entry.Represents the following attribute in the schema: w:decorated</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.EnumValue`1" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies that the name for the current entry is a built-in entry which should not be displayed in the user interface. This information may be used by an application as needed—for example, to disambiguate an entry from one with the same name, ensuring that the built-in entry can be uniquely identified by the application.  
  
 If this attribute is omitted, its value shall be assumed to be `false`.  
  
 Consider the following WordprocessingML fragment for the name of a single glossary document entry:  
  
```  
<w:name w:decorated="true" w:val=":-)" />  
```  
  
 The `decorated` attribute specifies that the parent entry is a built-in entry, and shall be treated as such.  
  
 The possible values for this attribute are defined by the `ST_OnOff` simple type.  
  
 ]]></format>
        </remarks>
        <remark> xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
            </remark>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Wordprocessing.DocPartName.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.Wordprocessing.DocPartName.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.StringValue Val { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.StringValue Val" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Wordprocessing.DocPartName.Val" />
      <MemberSignature Language="VB.NET" Value="Public Property Val As StringValue" />
      <MemberSignature Language="F#" Value="member this.Val : DocumentFormat.OpenXml.StringValue with get, set" Usage="DocumentFormat.OpenXml.Wordprocessing.DocPartName.Val" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(23, "val")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.StringValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Name Value.Represents the following attribute in the schema: w:val</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.StringValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies a string value which contains the name of the current glossary document entry.  
  
 Consider the following WordprocessingML fragment for the name of a single glossary document entry:  
  
```  
<w:name w:val="Sample Entry" />  
```  
  
 The `val` attribute specifies that the name of the parent entry is `Sample Entry`.  
  
 The possible values for this attribute are defined by the `ST_String` simple type.  
  
 ]]></format>
        </remarks>
        <remark> xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
            </remark>
      </Docs>
    </Member>
  </Members>
</Type>