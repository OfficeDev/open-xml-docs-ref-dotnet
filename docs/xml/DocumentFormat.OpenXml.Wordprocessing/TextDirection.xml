<Type Name="TextDirection" FullName="DocumentFormat.OpenXml.Wordprocessing.TextDirection">
  <TypeSignature Language="C#" Value="public class TextDirection : DocumentFormat.OpenXml.OpenXmlLeafElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextDirection extends DocumentFormat.OpenXml.OpenXmlLeafElement" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Wordprocessing.TextDirection" />
  <TypeSignature Language="VB.NET" Value="Public Class TextDirection&#xA;Inherits OpenXmlLeafElement" />
  <TypeSignature Language="F#" Value="type TextDirection = class&#xA;    inherit OpenXmlLeafElement" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.OpenXmlLeafElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines the TextDirection Class. When the object is serialized out as xml, its qualified name is w:textDirection.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 **textDirection (Paragraph Text Flow Direction)**  
  
 This element specifies the direction of the text flow for this paragraph.  
  
 If this element is omitted on a given paragraph, its value is determined by the setting previously set at any level of the style hierarchy (i.e. that previous setting remains unchanged). If this setting is never specified in the style hierarchy, then the paragraph shall inherit the text flow settings from the parent section.  
  
 [*Example*: Consider a document with a paragraph in which text should flow bottom to top vertically, and left to right horizontally. This setting would be specified with the following WordprocessingML:  
  
```xml  
<w:pPr>  
  <w:textFlow w:val="btLr" />  
</w:pPr>  
```  
  
 The textFlow element specifies via the *btLr* value in the val attribute that the text flow should go bottom to top, and left to right. *end example*]  
  
|Parent Elements|  
|---------------------|  
|pPr (§17.3.1.26); pPr (§17.3.1.25); pPr (§17.7.5.2); pPr (§17.7.6.1); pPr (§17.9.23); pPr (§17.7.8.2)|  
  
  [*Note*: The W3C XML Schema definition of this element’s content model (CT_TextDirection) is located in §A.1. *end note*]  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 **textDirection (Table Cell Text Flow Direction)**  
  
 This element specifies the direction of the text flow for this table cell.  
  
 If this element is omitted on a given table cell, its value is determined by the setting previously set at any level of the style hierarchy (i.e. that previous setting remains unchanged). If this setting is never specified in the style hierarchy, then the table cell shall inherit the text flow settings from the parent section.  
  
 [*Example*: Consider a table with one cell in which all the table cell's text flow is top to bottom - right to left:  
  
 Text in this table cell  
  
 This table cell would specify this text flow using the following WordprocessingML:  
  
```xml  
<w:tc>  
  <w:tcPr>  
    …  
    <w:textDirection w:val="tbRl" />  
  </w:tcPr>  
  …  
</w:tc>  
```  
  
 The textDirection element specifies via the *tbRl* value in the val attribute that the text flow should go top to bottom, then right to left. *end example*]  
  
|Parent Elements|  
|---------------------|  
|tcPr (§17.7.6.8); tcPr (§17.7.6.9); tcPr (§17.4.70); tcPr (§17.4.71)|  
  
  [*Note*: The W3C XML Schema definition of this element’s content model (CT_TextDirection) is located in §A.1. *end note*]  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 **textDirection (Text Flow Direction)**  
  
 This element specifies the direction of the text flow for this section.  
  
 [*Example*: Consider a document with a section in which text must flow bottom to top vertically, and left to right horizontally. This setting requires the following WordprocessingML:  
  
```xml  
<w:sectPr>  
  …  <w:textDirection w:="btLr" />  
</w:sectPr>  
```  
  
 The textDirection element specifies via the *btLr* value in the  attribute that the text flow must go bottom to top, and left to right. *end example*]  
  
|Parent Elements|  
|---------------------|  
|sectPr (§17.6.17); sectPr (§17.6.18); sectPr (§17.6.19)|  
  
  [*Note*: The W3C XML Schema definition of this element’s content model (CT_TextDirection) is located in §A.1. *end note*]  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlcopyrightiso.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextDirection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Wordprocessing.TextDirection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the TextDirection class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Wordprocessing.TextDirection.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="textDirection.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Wordprocessing.TextDirection.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.Wordprocessing.TextDirection.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Wordprocessing.TextDirectionValues&gt; Val { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.EnumValue`1&lt;valuetype DocumentFormat.OpenXml.Wordprocessing.TextDirectionValues&gt; Val" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Wordprocessing.TextDirection.Val" />
      <MemberSignature Language="VB.NET" Value="Public Property Val As EnumValue(Of TextDirectionValues)" />
      <MemberSignature Language="F#" Value="member this.Val : DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Wordprocessing.TextDirectionValues&gt; with get, set" Usage="DocumentFormat.OpenXml.Wordprocessing.TextDirection.Val" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(23, "val")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Wordprocessing.TextDirectionValues&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Direction of Text Flow.Represents the following attribute in the schema: w:val</summary>
        <value>Returns <see cref="T:DocumentFormat.OpenXml.EnumValue`1" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following information from the ECMA International [Standard ECMA-376](http://www.ecma-international.org/publications/standards/Ecma-376.htm) can be useful when working with this class.  
  
 Specifies the direction of the text flow for this object.  
  
 Consider a document with a section in which text shall flow bottom to top vertically, and left to right horizontally. This setting requires the following WordprocessingML:  
  
```  
<w:sectPr>  
  …  
  <w:textDirection w:val="btLr" />  
</w:sectPr>  
```  
  
 The `textDirection` element specifies via the `btLr` value in the `val` attribute that the text flow shall go bottom to top, and left to right.  
  
 The possible values for this attribute are defined by the `ST_TextDirection` simple type.  
  
 ]]></format>
        </remarks>
        <remark> xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
            </remark>
      </Docs>
    </Member>
  </Members>
</Type>