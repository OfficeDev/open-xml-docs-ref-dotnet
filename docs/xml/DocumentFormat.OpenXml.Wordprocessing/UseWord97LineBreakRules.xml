<Type Name="UseWord97LineBreakRules" FullName="DocumentFormat.OpenXml.Wordprocessing.UseWord97LineBreakRules">
  <TypeSignature Language="C#" Value="public class UseWord97LineBreakRules : DocumentFormat.OpenXml.Wordprocessing.OnOffType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UseWord97LineBreakRules extends DocumentFormat.OpenXml.Wordprocessing.OnOffType" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Wordprocessing.UseWord97LineBreakRules" />
  <TypeSignature Language="VB.NET" Value="Public Class UseWord97LineBreakRules&#xA;Inherits OnOffType" />
  <TypeSignature Language="F#" Value="type UseWord97LineBreakRules = class&#xA;    inherit OnOffType" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.Wordprocessing.OnOffType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Emulate Word 97 East Asian Line Breaking. When the object is serialized out as xml, its qualified name is w:useWord97LineBreakRules.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 `9.7.3.55 useWord97LineBreakRules (Use Incorrect Inter-Character Spacing Rules)`  
  
 This element specifies that applications should perform specific calculations (detailed below) when determining inter-character spacing under certain conditions. These calculations would not normally be considered correct.  
  
 Typically, the behaviors specified by the following elements are applied unconditionally:  
  
-   The autoSpaceDE (Part 1, §17.3.1.2) and autoSpaceDN (Part 1, §17.3.1.3) elements  
  
-   The topLinePunct (Part 1, §17.3.1.43) element  
  
 The compatibility element described in this subclause, when present with a val attribute value of *true* (or equivalent), specifies that applications should ignore the settings listed above in the following scenarios:  
  
 *If an ideographic character and a non-ideographic/numeric character are logically adjacent (ignoring all content which is not within a* t *element), but separated by a field boundary, i.e.:*  
  
 *The first character is within a* fldSimple *element, but the second is not.*  
  
 *The characters are separated by a* fldChar *element with a* fldCharType *attribute value of end*  
  
 *Then any appropriate inter-character spacing should be omitted. [Note: Inter-character spacing should still be calculated correctly within the field result. end note]*  
  
 *If a full-width punctuation character appears at the start of a paragraph which also specifies numbering via the* numPr *element (Part 1, §17.3.1.19), the compression specified by the* topLinePunct *element is ignored.*  
  
 [*Example*: Consider a paragraph which contains a field ending in an ideograph and another paragraph, with numbering, which contains a full-width punctuation character in the first character position:  
  
```xml  
<w:p>  
  <w:r>  
    <w:fldChar w:fldCharType="begin" />  
  </w:r>  
  …  
  <w:r>  
    <w:t>  
日</w:t>  
  </w:r>  
  <w:r>  
    <w:fldChar w:fldCharType="end" />  
  </w:r>  
  <w:r>  
    <w:t>  
1</w:t>  
  </w:r>  
</w:p>  
<w:p>  
  <w:pPr>  
    <w:numPr>  
      …  
    </w:numPr>  
  </w:pPr>  
  <w:r>  
    <w:t>  
（</w:t>  
  </w:r>  
</w:p>  
```  
  
 Typically, if both the autoSpaceDN and topLinePunct are *true*, additional spacing is added after the ideograph in the first paragraph and punctuation kerning is applied in the second paragraph (with gridlines added for visual reference):  
  
 dc08d1da-9885-483d-8b28-6b6c416d9d06  
  
 If this compatibility setting is turned on:  
  
```xml  
<w:compat>  
  <w:useWord97LineBreakRules />  
</w:compat>  
```  
  
 Then applications should not add any inter-character spacing at th end of the field and should turn off punctuation kerning in the second paragraph:  
  
 0dc33978-b8a8-482c-ac37-00458bbd5bed  
  
 *end example*]  
  
|Parent Elements|  
|---------------------|  
|compat (Part 1, §17.15.1.21)|  
  
 This element’s content model is defined by the common boolean property definition in Part 1, §17.17.4.  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlcopyrightiso.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UseWord97LineBreakRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Wordprocessing.UseWord97LineBreakRules.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the UseWord97LineBreakRules class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Wordprocessing.UseWord97LineBreakRules.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="useWord97LineBreakRules.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Wordprocessing.UseWord97LineBreakRules.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.Wordprocessing.UseWord97LineBreakRules.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the element.</summary>
        <value>Returns <see cref="T:System.String" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>