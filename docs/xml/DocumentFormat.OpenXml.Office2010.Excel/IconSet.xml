<Type Name="IconSet" FullName="DocumentFormat.OpenXml.Office2010.Excel.IconSet">
  <TypeSignature Language="C#" Value="public class IconSet : DocumentFormat.OpenXml.OpenXmlCompositeElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IconSet extends DocumentFormat.OpenXml.OpenXmlCompositeElement" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Office2010.Excel.IconSet" />
  <TypeSignature Language="VB.NET" Value="Public Class IconSet&#xA;Inherits OpenXmlCompositeElement" />
  <TypeSignature Language="F#" Value="type IconSet = class&#xA;    inherit OpenXmlCompositeElement" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.OpenXmlCompositeElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.ConditionalFormattingValueObject), DocumentFormat.OpenXml.FileFormatVersions.Office2010 | DocumentFormat.OpenXml.FileFormatVersions.Office2013)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.ChildElementInfo(typeof(DocumentFormat.OpenXml.Office2010.Excel.ConditionalFormattingIcon), DocumentFormat.OpenXml.FileFormatVersions.Office2010 | DocumentFormat.OpenXml.FileFormatVersions.Office2013)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>DocumentFormat.OpenXml.OfficeAvailability(DocumentFormat.OpenXml.FileFormatVersions.Office2010)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("DomGen", "2.0")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines the IconSet Class.This class is available in Office2010 or above. When the object is serialized out as xml, its qualified name is x14:iconSet.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 *2.6.28   CT_IconSet*  
  
 *Target namespace:* http://schemas.microsoft.com/office/spreadsheetml/2009/9/main  
  
 *Referenced by:* CT_CfRule  
  
 A complex type that specifies the properties of a conditional formatting rule that uses an icon set. The first *cfvo* element following this element MUST be ignored. There MUST be greater than or equal to three *cfvo* elements and MUST be less than or equal to five *cfvo* elements following this complex type.  
  
 *Child Elements:*  
  
 *cfvo:* A CT_Cfvo element that specifies a threshold value between each icon in the icon set.  
  
 *cfIcon:* A CT_CfIcon element that specifies a particular icon to use within an icon set. This element MUST be present if and only if *custom* equals "true".  
  
 *Attributes:*  
  
 *iconSet:* An ST_IconSetType attribute that specifies the icon set used.  
  
 *showValue:* A *Boolean* ([XMLSCHEMA2] section 3.2.2) attribute that specifies whether the cells in the applied range display the icon and cell value, or the icon only.  
  
|||  
|-|-|  
|*Value*|*Meaning*|  
|*"true"*|*The icon and cell value are shown in the cell.*|  
|*"false"*|*Only the icon is shown in the cell.*|  
  
 *percent:* Undefined and MUST be ignored.  
  
 *reverse:* A *Boolean* ([XMLSCHEMA2] section 3.2.2) attribute that specifies whether the icons in the icon set specified in *iconSet* are shown in reverse order. If *custom* equals "true" this value MUST be ignored.  
  
|||  
|-|-|  
|*Value*|*Meaning*|  
|*"true"*|*The icons specified in iconSet are shown in reverse order.*|  
|*"false"*|*The icons specified in iconSet are shown in the order defined by the icon set.*|  
  
 *custom:* A *Boolean* ([XMLSCHEMA2] section 3.2.2) attribute that specifies whether a custom set of icons is used. If this value is "true", there MUST be the same number of *cfIcon* elements as *cfvo* elements and the icons specified by the *cfIcon* elements are used rather than those specified by *iconSet*. If this value is "false", there MUST be 0 *cfIcon* elements.  
  
|||  
|-|-|  
|*Value*|*Meaning*|  
|*"false"*|*No custom set of icons is used.*|  
|*"true"*|*A custom set of icons is used.*|  
  
 The following W3C XML Schema ([XMLSCHEMA1] section 2.1) fragment specifies the contents of this complex type.  
  
 *\<xsd:complexType name="CT_IconSet">*  
  
 *\<xsd:sequence>*  
  
 *\<xsd:element name="cfvo" type="CT_Cfvo" minOccurs="2" maxOccurs="unbounded"/>*  
  
 *\<xsd:element name="cfIcon" type="CT_CfIcon" minOccurs="0" maxOccurs="5"/>*  
  
 *\</xsd:sequence>*  
  
 *\<xsd:attribute name="iconSet" type="ST_IconSetType" use="optional" default="3TrafficLights1"/>*  
  
 *\<xsd:attribute name="showValue" type="xsd:boolean" use="optional" default="true"/>*  
  
 *\<xsd:attribute name="percent" type="xsd:boolean" use="optional" default="true"/>*  
  
 *\<xsd:attribute name="reverse" type="xsd:boolean" use="optional" default="false"/>*  
  
 *\<xsd:attribute name="custom" type="xsd:boolean" use="optional" default="false"/>*  
  
 *\</xsd:complexType>*  
  
 See section 5.4 for the full W3C XML Schema ([XMLSCHEMA1] section 2.1).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IconSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Office2010.Excel.IconSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the IconSet class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IconSet (params DocumentFormat.OpenXml.OpenXmlElement[] childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class DocumentFormat.OpenXml.OpenXmlElement[] childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Office2010.Excel.IconSet.#ctor(DocumentFormat.OpenXml.OpenXmlElement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray childElements As OpenXmlElement())" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Office2010.Excel.IconSet : DocumentFormat.OpenXml.OpenXmlElement[] -&gt; DocumentFormat.OpenXml.Office2010.Excel.IconSet" Usage="new DocumentFormat.OpenXml.Office2010.Excel.IconSet childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="DocumentFormat.OpenXml.OpenXmlElement[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the IconSet class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IconSet (System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt; childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Office2010.Excel.IconSet.#ctor(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (childElements As IEnumerable(Of OpenXmlElement))" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Office2010.Excel.IconSet : seq&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; -&gt; DocumentFormat.OpenXml.Office2010.Excel.IconSet" Usage="new DocumentFormat.OpenXml.Office2010.Excel.IconSet childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" />
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>Initializes a new instance of the IconSet class with the specified child elements.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IconSet (string outerXml);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string outerXml) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Office2010.Excel.IconSet.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (outerXml As String)" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Office2010.Excel.IconSet : string -&gt; DocumentFormat.OpenXml.Office2010.Excel.IconSet" Usage="new DocumentFormat.OpenXml.Office2010.Excel.IconSet outerXml" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="outerXml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outerXml">Specifies the outer XML of the element.</param>
        <summary>Initializes a new instance of the IconSet class from outer XML.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Office2010.Excel.IconSet.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="iconSet.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Custom">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.BooleanValue Custom { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.BooleanValue Custom" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Office2010.Excel.IconSet.Custom" />
      <MemberSignature Language="VB.NET" Value="Public Property Custom As BooleanValue" />
      <MemberSignature Language="F#" Value="member this.Custom : DocumentFormat.OpenXml.BooleanValue with get, set" Usage="DocumentFormat.OpenXml.Office2010.Excel.IconSet.Custom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "custom")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.BooleanValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>custom.Represents the following attribute in the schema: custom</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IconSetTypes">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Office2010.Excel.IconSetTypeValues&gt; IconSetTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.EnumValue`1&lt;valuetype DocumentFormat.OpenXml.Office2010.Excel.IconSetTypeValues&gt; IconSetTypes" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Office2010.Excel.IconSet.IconSetTypes" />
      <MemberSignature Language="VB.NET" Value="Public Property IconSetTypes As EnumValue(Of IconSetTypeValues)" />
      <MemberSignature Language="F#" Value="member this.IconSetTypes : DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Office2010.Excel.IconSetTypeValues&gt; with get, set" Usage="DocumentFormat.OpenXml.Office2010.Excel.IconSet.IconSetTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "iconSet")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Office2010.Excel.IconSetTypeValues&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>iconSet.Represents the following attribute in the schema: iconSet</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Office2010.Excel.IconSet.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="DocumentFormat.OpenXml.Office2010.Excel.IconSet.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the element.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Percent">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.BooleanValue Percent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.BooleanValue Percent" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Office2010.Excel.IconSet.Percent" />
      <MemberSignature Language="VB.NET" Value="Public Property Percent As BooleanValue" />
      <MemberSignature Language="F#" Value="member this.Percent : DocumentFormat.OpenXml.BooleanValue with get, set" Usage="DocumentFormat.OpenXml.Office2010.Excel.IconSet.Percent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "percent")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.BooleanValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>percent.Represents the following attribute in the schema: percent</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.BooleanValue Reverse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.BooleanValue Reverse" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Office2010.Excel.IconSet.Reverse" />
      <MemberSignature Language="VB.NET" Value="Public Property Reverse As BooleanValue" />
      <MemberSignature Language="F#" Value="member this.Reverse : DocumentFormat.OpenXml.BooleanValue with get, set" Usage="DocumentFormat.OpenXml.Office2010.Excel.IconSet.Reverse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "reverse")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.BooleanValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>reverse.Represents the following attribute in the schema: reverse</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowValue">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.BooleanValue ShowValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.BooleanValue ShowValue" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Office2010.Excel.IconSet.ShowValue" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowValue As BooleanValue" />
      <MemberSignature Language="F#" Value="member this.ShowValue : DocumentFormat.OpenXml.BooleanValue with get, set" Usage="DocumentFormat.OpenXml.Office2010.Excel.IconSet.ShowValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>DocumentFormat.OpenXml.SchemaAttr(0, "showValue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.BooleanValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>showValue.Represents the following attribute in the schema: showValue</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>